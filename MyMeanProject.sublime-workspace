{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"h",
				"http"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/package.json",
			"settings":
			{
				"buffer_size": 1006,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/app.js",
			"settings":
			{
				"buffer_size": 4518,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/stream.js",
			"settings":
			{
				"buffer_size": 403,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/node_modules/socket.io-client/socket.io.js",
			"settings":
			{
				"buffer_size": 157823,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/circle.log",
			"settings":
			{
				"buffer_size": 33559,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/model.js",
			"settings":
			{
				"buffer_size": 3018,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/public/templates/bar.ejs",
			"settings":
			{
				"buffer_size": 267,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 3217 files for \"stream\"\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\app.js:\n    9  var server = http.createServer(app);\n   10  \n   11: var logFile = require('fs').createWriteStream('./circle.log', {flags: 'a'});\n   12: app.use(express.logger({stream: logFile}));\n   13  app.use(express.compress());\n   14  app.use(express.static(__dirname + '/public'));\n   ..\n   98      var behaviour = {\n   99     		'shuffle': shuffle,\n  100:    		'stream': stream,\n  101     		'reset': reset\n  102      };\n  ...\n  119  }\n  120  \n  121: function stream() {\n  122      var count = 100;\n  123:     function streamEvent (job) {\n  124          sio.of('/circle').emit('add', {ts: Date.now(), entry: model.add(0, 0)});\n  125          sio.of('/circle').emit('remove', {ts: Date.now(), id: model.removeRandom()});\n  126          if (--count) {\n  127:             setTimeout(function(){streamEvent(job);}, 150);\n  128              job.running(100 - count);\n  129          } else {\n  130              job.complete();\n  131:             logFile.write('stream completed' + '\\n');\n  132          }\n  133      }\n  134:     jobs.start('stream', streamEvent);\n  135:     logFile.write('stream started' + '\\n');\n  136  }\n  137  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\circle.log:\n   60  127.0.0.1 - - [Mon, 17 Nov 2014 03:03:38 GMT] \"GET / HTTP/1.1\" 200 1262 \"-\" \"-\"\n   61  127.0.0.1 - - [Mon, 17 Nov 2014 03:04:44 GMT] \"GET /jobs HTTP/1.1\" 404 17 \"-\" \"-\"\n   62: stream started\n   63: stream completed\n   64  127.0.0.1 - - [Mon, 17 Nov 2014 03:05:39 GMT] \"GET /css/circle.css HTTP/1.1\" 304 - \"http://localhost:7777/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\"\n   65  127.0.0.1 - - [Mon, 17 Nov 2014 03:05:39 GMT] \"GET /extern/underscore-min.map HTTP/1.1\" 404 38 \"http://localhost:7777/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\"\n   66: 127.0.0.1 - - [Mon, 17 Nov 2014 03:06:08 GMT] \"GET /jobs/stream HTTP/1.1\" 404 24 \"-\" \"-\"\n   67  127.0.0.1 - - [Tue, 18 Nov 2014 02:37:05 GMT] \"GET / HTTP/1.1\" 304 - \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\"\n   68  127.0.0.1 - - [Tue, 18 Nov 2014 02:37:05 GMT] \"GET /css/circle.css HTTP/1.1\" 304 - \"http://localhost:7777/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\"\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body\\parse-arguments.js:\n    1  module.exports = parseArguments\n    2  \n    3: function isWritable(stream) {\n    4:     return typeof stream.write === \"function\" &&\n    5:         typeof stream.end === \"function\"\n    6  }\n    7  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body\\README.md:\n  102  ```\n  103  \n  104: `textBody` allows you to get the body from any readable stream.\n  105: It will read the entire content of the stream into memory and\n  106  give it back to you in the callback.\n  107  \n  108   - `limit`: You can set `opts.limit` to a custom number to change the \n  109      limit at which `textBody` gives up. By default it will only\n  110:     read a 1MB body, if a stream contains more then 1MB it returns\n  111      an error. This prevents someone attacking your HTTP server\n  112      with an infinite body causing an out of memory attack.\n  ...\n  150  ```\n  151  \n  152: `formBody` allows you to get the body of a readable stream. It\n  153  does the same as `textBody` but assumes the content is querystring\n  154  encoded and parses just like it was a &lt;form&gt; submit.\n  ...\n  198  ```\n  199  \n  200: `jsonBody` allows you to get the body of a readable stream. It\n  201  does the same as `textbody` but assumes the content it a JSON\n  202  value and parses it using `JSON.parse`. If `JSON.parse` throws\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body\\node_modules\\raw-body\\HISTORY.md:\n    7  ==================\n    8  \n    9:   * check encoding for old streams1\n   10    * support node.js < 0.10.6\n   11  \n   ..\n   41    * add err.statusCode and err.type\n   42    * allow for encoding option to be true\n   43:   * pause the stream instead of dumping on error\n   44:   * throw if the stream's encoding is set\n   45  \n   46  1.0.1 / 2013-11-19\n   47  ==================\n   48  \n   49:   * dont support streams1, throw if dev set encoding\n   50  \n   51  1.0.0 / 2013-11-17\n   ..\n   77  ==================\n   78  \n   79:   * dump stream on bad headers\n   80    * listen to events after defining received and buffers\n   81  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body\\node_modules\\raw-body\\index.js:\n    4  var StringDecoder = require('string_decoder/').StringDecoder\n    5  \n    6: module.exports = function (stream, options, done) {\n    7    if (typeof options === 'function') {\n    8      done = options\n    .\n   29  \n   30    // check the length and limit options.\n   31:   // note: we intentionally leave the stream paused,\n   32:   // so users should handle the stream themselves.\n   33    if (limit !== null && length !== null && length > limit) {\n   34:     if (typeof stream.pause === 'function')\n   35:       stream.pause()\n   36  \n   37      process.nextTick(function () {\n   ..\n   45    }\n   46  \n   47:   // streams1: assert request encoding is buffer.\n   48:   // streams2+: assert the stream encoding is buffer.\n   49:   //   stream._decoder: streams1\n   50:   //   state.encoding: streams2\n   51:   //   state.decoder: streams2, specifically < 0.10.6\n   52:   var state = stream._readableState\n   53:   if (stream._decoder || (state && (state.encoding || state.decoder))) {\n   54:     if (typeof stream.pause === 'function')\n   55:       stream.pause()\n   56  \n   57      process.nextTick(function () {\n   58:       var err = makeError('stream encoding should not be set',\n   59:         'stream.encoding.set')\n   60        // developer error\n   61        err.status = err.statusCode = 500\n   ..\n   74      : []\n   75  \n   76:   stream.on('data', onData)\n   77:   stream.once('end', onEnd)\n   78:   stream.once('error', onEnd)\n   79:   stream.once('close', cleanup)\n   80  \n   81    return defer\n   ..\n   93  \n   94      if (limit !== null && received > limit) {\n   95:       if (typeof stream.pause === 'function')\n   96:         stream.pause()\n   97        var err = makeError('request entity too large', 'entity.too.large')\n   98        err.status = err.statusCode = 413\n   ..\n  106    function onEnd(err) {\n  107      if (err) {\n  108:       if (typeof stream.pause === 'function')\n  109:         stream.pause()\n  110        done(err)\n  111      } else if (length !== null && received !== length) {\n  ...\n  129      received = buffer = null\n  130  \n  131:     stream.removeListener('data', onData)\n  132:     stream.removeListener('end', onEnd)\n  133:     stream.removeListener('error', onEnd)\n  134:     stream.removeListener('close', cleanup)\n  135    }\n  136  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body\\node_modules\\raw-body\\package.json:\n    1  {\n    2    \"name\": \"raw-body\",\n    3:   \"description\": \"Get and validate the raw body of a readable stream.\",\n    4    \"version\": \"1.1.7\",\n    5    \"author\": {\n    .\n   11    \"repository\": {\n   12      \"type\": \"git\",\n   13:     \"url\": \"git://github.com/stream-utils/raw-body\"\n   14    },\n   15    \"dependencies\": {\n   ..\n   20      \"istanbul\": \"0.2.10\",\n   21      \"mocha\": \"~1.20.1\",\n   22:     \"readable-stream\": \"~1.0.17\",\n   23      \"request\": \">= 2.36.0 < 3\",\n   24      \"through2\": \"~0.4.1\"\n   ..\n   34    \"gitHead\": \"8c594465290b09de925deb6fca17de9046b6d601\",\n   35    \"bugs\": {\n   36:     \"url\": \"https://github.com/stream-utils/raw-body/issues\"\n   37    },\n   38:   \"homepage\": \"https://github.com/stream-utils/raw-body\",\n   39    \"_id\": \"raw-body@1.1.7\",\n   40    \"_shasum\": \"1d027c2bfa116acc6623bca8f00016572a87d425\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body\\node_modules\\raw-body\\README.md:\n    2  \n    3  [![NPM version](https://badge.fury.io/js/method-override.svg)](http://badge.fury.io/js/raw-body)\n    4: [![Build Status](https://travis-ci.org/stream-utils/raw-body.svg?branch=master)](https://travis-ci.org/stream-utils/raw-body)\n    5: [![Coverage Status](https://img.shields.io/coveralls/stream-utils/raw-body.svg?branch=master)](https://coveralls.io/r/stream-utils/raw-body)\n    6  \n    7: Gets the entire buffer of a stream either as a `Buffer` or a string.\n    8: Validates the stream's length against an expected length and maximum limit.\n    9  Ideal for parsing request bodies.\n   10  \n   ..\n   41  ```\n   42  \n   43: ### getRawBody(stream, [options], [callback])\n   44  \n   45  Returns a thunk for yielding with generators.\n   ..\n   47  Options:\n   48  \n   49: - `length` - The length length of the stream.\n   50:   If the contents of the stream do not add up to this length,\n   51    an `400` error code is returned.\n   52  - `limit` - The byte limit of the body.\n   ..\n   64  \n   65      - `limit` - the limit in bytes\n   66:     - `length` and `expected` - the expected length of the stream\n   67      - `received` - the received bytes\n   68      - `status` and `statusCode` - the corresponding status code for the error\n   69:     - `type` - either `entity.too.large`, `request.size.invalid`, or `stream.encoding.set`\n   70  \n   71  - `res` - the result, either as a `String` if an encoding was set or a `Buffer` otherwise.\n   72  \n   73: If an error occurs, the stream will be paused,\n   74: and you are responsible for correctly disposing the stream.\n   75  For HTTP requests, no handling is required if you send a response.\n   76: For streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.\n   77  \n   78  ## License\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\HISTORY.md:\n  190  \n  191    * deps: raw-body@1.1.6\n  192:     - assert stream encoding on node.js 0.8\n  193:     - assert stream encoding on node.js < 0.10.6\n  194      - deps: bytes@1\n  195  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\README.md:\n   60  - `inflate` - if deflated bodies will be inflated. (default: `true`)\n   61  - `limit` - maximum request body size. (default: `<100kb>`)\n   62: - `type` - request content-type to parse (default: `application/octet-stream`)\n   63  - `verify` - function to verify body content\n   64  \n   65: The `type` argument is passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme) library. This can be an extension name (like `bin`), a mime type (like `application/octet-stream`), or a mime time with a wildcard (like `application/*`).\n   66  \n   67  The `verify` argument, if supplied, is called as `verify(req, res, buf, encoding)`, where `buf` is a `Buffer` of the raw request body and `encoding` is the encoding of the request. The parsing can be aborted by throwing an error.\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\lib\\read.js:\n   34  function read(req, res, next, parse, options) {\n   35    var length\n   36:   var stream\n   37  \n   38    // flag as parsed\n   ..\n   40  \n   41    try {\n   42:     stream = contentstream(req, options.inflate)\n   43:     length = stream.length\n   44:     delete stream.length\n   45    } catch (err) {\n   46      return next(err)\n   ..\n   60  \n   61    // read body\n   62:   getBody(stream, options, function (err, body) {\n   63      if (err) {\n   64        if (!err.status) {\n   ..\n   74  \n   75        // read off entire request\n   76:       stream.resume()\n   77        onFinished(req, function onfinished() {\n   78          next(err)\n   ..\n  110  \n  111  /**\n  112:  * Get the content stream of the request.\n  113   *\n  114   * @param {object} req\n  ...\n  118   */\n  119  \n  120: function contentstream(req, inflate) {\n  121    var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  122    var err\n  123    var length = req.headers['content-length']\n  124:   var stream\n  125  \n  126    if (inflate === false && encoding !== 'identity') {\n  ...\n  132    switch (encoding) {\n  133      case 'deflate':\n  134:       stream = zlib.createInflate()\n  135:       req.pipe(stream)\n  136        break\n  137      case 'gzip':\n  138:       stream = zlib.createGunzip()\n  139:       req.pipe(stream)\n  140        break\n  141      case 'identity':\n  142:       stream = req\n  143:       stream.length = length\n  144        break\n  145      default:\n  ...\n  150    }\n  151  \n  152:   return stream\n  153  }\n  154  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\lib\\types\\raw.js:\n   34      ? bytes(options.limit || '100kb')\n   35      : options.limit\n   36:   var type = options.type || 'application/octet-stream'\n   37    var verify = options.verify || false\n   38  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\Changelog.md:\n    3  \n    4   * added encodings UTF-7 (RFC2152) and UTF-7-IMAP (RFC3501 Section 5.1.3)\n    5:  * fixed streaming base64 encoding\n    6  \n    7  # 0.4.3 / 2014-06-14\n    .\n   22   * code is rewritten from scratch\n   23   * all widespread encodings are supported\n   24:  * streaming interface added\n   25   * browserify compatibility added\n   26   * (optional) extend core primitive encodings to make usage even simpler\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\package.json:\n   77    \"browser\": {\n   78      \"./extend-node\": false,\n   79:     \"./streams\": false\n   80    },\n   81    \"devDependencies\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\README.md:\n    7   * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n    8   * Intuitive encode/decode API\n    9:  * Streaming support for Node v0.10+\n   10:  * Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n   11   * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n   12   * License: MIT.\n   ..\n   29  ```\n   30  \n   31: ### Streaming API (Node v0.10+)\n   32  ```javascript\n   33  \n   34: // Decode stream (from binary stream to js strings)\n   35  http.createServer(function(req, res) {\n   36:     var converterStream = iconv.decodeStream('win1251');\n   37:     req.pipe(converterStream);\n   38  \n   39:     converterStream.on('data', function(str) {\n   40          console.log(str); // Do something with decoded strings, chunk-by-chunk.\n   41      });\n   42  });\n   43  \n   44: // Convert encoding streaming example\n   45: fs.createReadStream('file-in-win1251.txt')\n   46:     .pipe(iconv.decodeStream('win1251'))\n   47:     .pipe(iconv.encodeStream('ucs2'))\n   48:     .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n   49  \n   50: // Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\n   51  http.createServer(function(req, res) {\n   52:     req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n   53          assert(typeof body == 'string');\n   54          console.log(body); // full request body string\n   ..\n   76  });\n   77  \n   78: fs.createReadStream(\"file.txt\", \"shift_jis\");\n   79  \n   80  // External modules are also supported (if they use Node primitives, which they probably do).\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\README.md~:\n   49  ## TODO\n   50  \n   51: *   Support streaming character conversion, something like util.pipe(req, iconv.fromEncodingStream('latin1')).\n   52  *   Add more encodings.\n   53  *   Add transliteration (best fit char).\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\encodings\\utf7.js:\n   54          base64Accum = this.base64Accum;\n   55  \n   56:     // The decoder is more involved as we must handle chunks in stream.\n   57  \n   58      for (var i = 0; i < buf.length; i++) {\n   ..\n  224          base64Accum = this.base64Accum;\n  225  \n  226:     // The decoder is more involved as we must handle chunks in stream.\n  227      // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n  228  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\lib\\extend-node.js:\n  164  \n  165          // -- Readable -------------------------------------------------------------\n  166:         if (iconv.supportsStreams) {\n  167:             var Readable = require('stream').Readable;\n  168  \n  169              original.ReadableSetEncoding = Readable.prototype.setEncoding;\n  ...\n  199          Buffer.prototype.write = original.BufferWrite;\n  200  \n  201:         if (iconv.supportsStreams) {\n  202:             var Readable = require('stream').Readable;\n  203  \n  204              Readable.prototype.setEncoding = original.ReadableSetEncoding;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\lib\\index.js:\n  111  if (nodeVer) {\n  112  \n  113:     // Load streaming support in Node v0.10+\n  114      var nodeVerArr = nodeVer.split(\".\").map(Number);\n  115      if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n  116:         require(\"./streams\")(iconv);\n  117      }\n  118  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\iconv-lite\\lib\\streams.js:\n    1: var Transform = require(\"stream\").Transform;\n    2  \n    3  \n    .\n    6      \n    7      // Additional Public API.\n    8:     iconv.encodeStream = function encodeStream(encoding, options) {\n    9:         return new IconvLiteEncoderStream(iconv.getCodec(encoding).encoder(options), options);\n   10      }\n   11  \n   12:     iconv.decodeStream = function decodeStream(encoding, options) {\n   13:         return new IconvLiteDecoderStream(iconv.getCodec(encoding).decoder(options), options);\n   14      }\n   15  \n   16:     iconv.supportsStreams = true;\n   17  \n   18  \n   19      // Not published yet.\n   20:     iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n   21:     iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n   22:     iconv._collect = IconvLiteDecoderStream.prototype.collect;\n   23  };\n   24  \n   25  \n   26: // == Encoder stream =======================================================\n   27: function IconvLiteEncoderStream(conv, options) {\n   28      this.conv = conv;\n   29      options = options || {};\n   ..\n   32  }\n   33  \n   34: IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n   35:     constructor: { value: IconvLiteEncoderStream }\n   36  });\n   37  \n   38: IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n   39      if (typeof chunk != 'string')\n   40:         return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n   41      try {\n   42          var res = this.conv.write(chunk);\n   ..\n   49  }\n   50  \n   51: IconvLiteEncoderStream.prototype._flush = function(done) {\n   52      try {\n   53          var res = this.conv.end();\n   ..\n   60  }\n   61  \n   62: IconvLiteEncoderStream.prototype.collect = function(cb) {\n   63      var chunks = [];\n   64      this.on('error', cb);\n   ..\n   71  \n   72  \n   73: // == Decoder stream =======================================================\n   74: function IconvLiteDecoderStream(conv, options) {\n   75      this.conv = conv;\n   76      options = options || {};\n   ..\n   79  }\n   80  \n   81: IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n   82:     constructor: { value: IconvLiteDecoderStream }\n   83  });\n   84  \n   85: IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n   86      if (!Buffer.isBuffer(chunk))\n   87:         return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n   88      try {\n   89          var res = this.conv.write(chunk);\n   ..\n   96  }\n   97  \n   98: IconvLiteDecoderStream.prototype._flush = function(done) {\n   99      try {\n  100          var res = this.conv.end();\n  ...\n  107  }\n  108  \n  109: IconvLiteDecoderStream.prototype.collect = function(cb) {\n  110      var res = '';\n  111      this.on('error', cb);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\raw-body\\HISTORY.md:\n    2  ==================\n    3  \n    4:   * Fully unpipe the stream on error\n    5      - Fixes `Cannot switch to old mode now` error on Node.js 0.10+\n    6  \n    .\n   36  ==================\n   37  \n   38:   * check encoding for old streams1\n   39    * support node.js < 0.10.6\n   40  \n   ..\n   70    * add err.statusCode and err.type\n   71    * allow for encoding option to be true\n   72:   * pause the stream instead of dumping on error\n   73:   * throw if the stream's encoding is set\n   74  \n   75  1.0.1 / 2013-11-19\n   76  ==================\n   77  \n   78:   * dont support streams1, throw if dev set encoding\n   79  \n   80  1.0.0 / 2013-11-17\n   ..\n  106  ==================\n  107  \n  108:   * dump stream on bad headers\n  109    * listen to events after defining received and buffers\n  110  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\raw-body\\index.js:\n    2  var iconv = require('iconv-lite')\n    3  \n    4: module.exports = function (stream, options, done) {\n    5    if (options === true || typeof options === 'string') {\n    6      // short cut for encoding\n    .\n   35  \n   36    // check the length and limit options.\n   37:   // note: we intentionally leave the stream paused,\n   38:   // so users should handle the stream themselves.\n   39    if (limit !== null && length !== null && length > limit) {\n   40      var err = makeError('request entity too large', 'entity.too.large')\n   ..\n   43      err.limit = limit\n   44      cleanup()\n   45:     halt(stream)\n   46      process.nextTick(function () {\n   47        done(err)\n   ..\n   50    }\n   51  \n   52:   // streams1: assert request encoding is buffer.\n   53:   // streams2+: assert the stream encoding is buffer.\n   54:   //   stream._decoder: streams1\n   55:   //   state.encoding: streams2\n   56:   //   state.decoder: streams2, specifically < 0.10.6\n   57:   var state = stream._readableState\n   58:   if (stream._decoder || (state && (state.encoding || state.decoder))) {\n   59      // developer error\n   60:     var err = makeError('stream encoding should not be set',\n   61:       'stream.encoding.set')\n   62      err.status = err.statusCode = 500\n   63      cleanup()\n   64:     halt(stream)\n   65      process.nextTick(function () {\n   66        done(err)\n   ..\n   76    } catch (err) {\n   77      cleanup()\n   78:     halt(stream)\n   79      process.nextTick(function () {\n   80        done(err)\n   ..\n   87      : []\n   88  \n   89:   stream.on('data', onData)\n   90:   stream.once('end', onEnd)\n   91:   stream.once('error', onEnd)\n   92:   stream.once('close', cleanup)\n   93  \n   94    return defer\n   ..\n  111        err.limit = limit\n  112        cleanup()\n  113:       halt(stream)\n  114        done(err)\n  115      }\n  ...\n  119      if (err) {\n  120        cleanup()\n  121:       halt(stream)\n  122        done(err)\n  123      } else if (length !== null && received !== length) {\n  ...\n  141      received = buffer = null\n  142  \n  143:     stream.removeListener('data', onData)\n  144:     stream.removeListener('end', onEnd)\n  145:     stream.removeListener('error', onEnd)\n  146:     stream.removeListener('close', cleanup)\n  147    }\n  148  }\n  ...\n  162  \n  163  /**\n  164:  * Halt a stream.\n  165   *\n  166:  * @param {Object} stream\n  167   * @api private\n  168   */\n  169  \n  170: function halt(stream) {\n  171:   // unpipe everything from the stream\n  172:   unpipe(stream)\n  173  \n  174:   // pause stream\n  175:   if (typeof stream.pause === 'function') {\n  176:     stream.pause()\n  177    }\n  178  }\n  ...\n  194  \n  195  /**\n  196:  * Unpipe everything from a stream.\n  197   *\n  198:  * @param {Object} stream\n  199   * @api private\n  200   */\n  201  \n  202  /* istanbul ignore next: implementation differs between versions */\n  203: function unpipe(stream) {\n  204:   if (typeof stream.unpipe === 'function') {\n  205      // new-style\n  206:     stream.unpipe()\n  207      return\n  208    }\n  ...\n  210    // Node.js 0.8 hack\n  211    var listener\n  212:   var listeners = stream.listeners('close')\n  213  \n  214    for (var i = 0; i < listeners.length; i++) {\n  ...\n  220  \n  221      // invoke the listener\n  222:     listener.call(stream)\n  223    }\n  224  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\raw-body\\package.json:\n    1  {\n    2    \"name\": \"raw-body\",\n    3:   \"description\": \"Get and validate the raw body of a readable stream.\",\n    4    \"version\": \"1.3.0\",\n    5    \"author\": {\n    .\n   21    \"repository\": {\n   22      \"type\": \"git\",\n   23:     \"url\": \"git://github.com/stream-utils/raw-body\"\n   24    },\n   25    \"dependencies\": {\n   ..\n   30      \"istanbul\": \"0.3.0\",\n   31      \"mocha\": \"~1.20.1\",\n   32:     \"readable-stream\": \"~1.0.17\",\n   33      \"through2\": \"~0.5.1\"\n   34    },\n   ..\n   42    },\n   43    \"bugs\": {\n   44:     \"url\": \"https://github.com/stream-utils/raw-body/issues\"\n   45    },\n   46:   \"homepage\": \"https://github.com/stream-utils/raw-body\",\n   47    \"_id\": \"raw-body@1.3.0\",\n   48    \"dist\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\raw-body\\README.md:\n    2  \n    3  [![NPM version](https://badge.fury.io/js/raw-body.svg)](http://badge.fury.io/js/raw-body)\n    4: [![Build Status](https://travis-ci.org/stream-utils/raw-body.svg?branch=master)](https://travis-ci.org/stream-utils/raw-body)\n    5: [![Coverage Status](https://img.shields.io/coveralls/stream-utils/raw-body.svg?branch=master)](https://coveralls.io/r/stream-utils/raw-body)\n    6  \n    7: Gets the entire buffer of a stream either as a `Buffer` or a string.\n    8: Validates the stream's length against an expected length and maximum limit.\n    9  Ideal for parsing request bodies.\n   10  \n   ..\n   42  ```\n   43  \n   44: ### getRawBody(stream, [options], [callback])\n   45  \n   46  Returns a thunk for yielding with generators.\n   ..\n   48  Options:\n   49  \n   50: - `length` - The length length of the stream.\n   51:   If the contents of the stream do not add up to this length,\n   52    an `400` error code is returned.\n   53  - `limit` - The byte limit of the body.\n   ..\n   66  \n   67      - `limit` - the limit in bytes\n   68:     - `length` and `expected` - the expected length of the stream\n   69      - `received` - the received bytes\n   70      - `encoding` - the invalid encoding\n   71      - `status` and `statusCode` - the corresponding status code for the error\n   72:     - `type` - either `entity.too.large`, `request.size.invalid`, `stream.encoding.set`, or `encoding.unsupported`\n   73  \n   74  - `res` - the result, either as a `String` if an encoding was set or a `Buffer` otherwise.\n   75  \n   76: If an error occurs, the stream will be paused, everything unpiped,\n   77: and you are responsible for correctly disposing the stream.\n   78  For HTTP requests, no handling is required if you send a response.\n   79: For streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.\n   80  \n   81  ## License\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\type-is\\node_modules\\mime-types\\README.md:\n   12  \n   13  - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`,\n   14:   so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`.\n   15  - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`.\n   16  - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db)\n   ..\n   65  \n   66  ```js\n   67: mime.extension('application/octet-stream') // 'bin'\n   68  ```\n   69  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\type-is\\node_modules\\mime-types\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\body-parser\\node_modules\\type-is\\node_modules\\mime-types\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\co-body\\Readme.md:\n   12  ## Options\n   13  \n   14:   Available via [raw-body](https://github.com/stream-utils/raw-body/blob/master/index.js):\n   15  \n   16    - `limit` number or string representing the request size limit (1mb for json and 56kb for form-urlencoded)\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\co-body\\node_modules\\raw-body\\HISTORY.md:\n    7  ==================\n    8  \n    9:   * check encoding for old streams1\n   10    * support node.js < 0.10.6\n   11  \n   ..\n   41    * add err.statusCode and err.type\n   42    * allow for encoding option to be true\n   43:   * pause the stream instead of dumping on error\n   44:   * throw if the stream's encoding is set\n   45  \n   46  1.0.1 / 2013-11-19\n   47  ==================\n   48  \n   49:   * dont support streams1, throw if dev set encoding\n   50  \n   51  1.0.0 / 2013-11-17\n   ..\n   77  ==================\n   78  \n   79:   * dump stream on bad headers\n   80    * listen to events after defining received and buffers\n   81  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\co-body\\node_modules\\raw-body\\index.js:\n    4  var StringDecoder = require('string_decoder/').StringDecoder\n    5  \n    6: module.exports = function (stream, options, done) {\n    7    if (typeof options === 'function') {\n    8      done = options\n    .\n   29  \n   30    // check the length and limit options.\n   31:   // note: we intentionally leave the stream paused,\n   32:   // so users should handle the stream themselves.\n   33    if (limit !== null && length !== null && length > limit) {\n   34:     if (typeof stream.pause === 'function')\n   35:       stream.pause()\n   36  \n   37      process.nextTick(function () {\n   ..\n   45    }\n   46  \n   47:   // streams1: assert request encoding is buffer.\n   48:   // streams2+: assert the stream encoding is buffer.\n   49:   //   stream._decoder: streams1\n   50:   //   state.encoding: streams2\n   51:   //   state.decoder: streams2, specifically < 0.10.6\n   52:   var state = stream._readableState\n   53:   if (stream._decoder || (state && (state.encoding || state.decoder))) {\n   54:     if (typeof stream.pause === 'function')\n   55:       stream.pause()\n   56  \n   57      process.nextTick(function () {\n   58:       var err = makeError('stream encoding should not be set',\n   59:         'stream.encoding.set')\n   60        // developer error\n   61        err.status = err.statusCode = 500\n   ..\n   74      : []\n   75  \n   76:   stream.on('data', onData)\n   77:   stream.once('end', onEnd)\n   78:   stream.once('error', onEnd)\n   79:   stream.once('close', cleanup)\n   80  \n   81    return defer\n   ..\n   93  \n   94      if (limit !== null && received > limit) {\n   95:       if (typeof stream.pause === 'function')\n   96:         stream.pause()\n   97        var err = makeError('request entity too large', 'entity.too.large')\n   98        err.status = err.statusCode = 413\n   ..\n  106    function onEnd(err) {\n  107      if (err) {\n  108:       if (typeof stream.pause === 'function')\n  109:         stream.pause()\n  110        done(err)\n  111      } else if (length !== null && received !== length) {\n  ...\n  129      received = buffer = null\n  130  \n  131:     stream.removeListener('data', onData)\n  132:     stream.removeListener('end', onEnd)\n  133:     stream.removeListener('error', onEnd)\n  134:     stream.removeListener('close', cleanup)\n  135    }\n  136  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\co-body\\node_modules\\raw-body\\package.json:\n    1  {\n    2    \"name\": \"raw-body\",\n    3:   \"description\": \"Get and validate the raw body of a readable stream.\",\n    4    \"version\": \"1.1.7\",\n    5    \"author\": {\n    .\n   11    \"repository\": {\n   12      \"type\": \"git\",\n   13:     \"url\": \"git://github.com/stream-utils/raw-body\"\n   14    },\n   15    \"dependencies\": {\n   ..\n   20      \"istanbul\": \"0.2.10\",\n   21      \"mocha\": \"~1.20.1\",\n   22:     \"readable-stream\": \"~1.0.17\",\n   23      \"request\": \">= 2.36.0 < 3\",\n   24      \"through2\": \"~0.4.1\"\n   ..\n   34    \"gitHead\": \"8c594465290b09de925deb6fca17de9046b6d601\",\n   35    \"bugs\": {\n   36:     \"url\": \"https://github.com/stream-utils/raw-body/issues\"\n   37    },\n   38:   \"homepage\": \"https://github.com/stream-utils/raw-body\",\n   39    \"_id\": \"raw-body@1.1.7\",\n   40    \"_shasum\": \"1d027c2bfa116acc6623bca8f00016572a87d425\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\co-body\\node_modules\\raw-body\\README.md:\n    2  \n    3  [![NPM version](https://badge.fury.io/js/method-override.svg)](http://badge.fury.io/js/raw-body)\n    4: [![Build Status](https://travis-ci.org/stream-utils/raw-body.svg?branch=master)](https://travis-ci.org/stream-utils/raw-body)\n    5: [![Coverage Status](https://img.shields.io/coveralls/stream-utils/raw-body.svg?branch=master)](https://coveralls.io/r/stream-utils/raw-body)\n    6  \n    7: Gets the entire buffer of a stream either as a `Buffer` or a string.\n    8: Validates the stream's length against an expected length and maximum limit.\n    9  Ideal for parsing request bodies.\n   10  \n   ..\n   41  ```\n   42  \n   43: ### getRawBody(stream, [options], [callback])\n   44  \n   45  Returns a thunk for yielding with generators.\n   ..\n   47  Options:\n   48  \n   49: - `length` - The length length of the stream.\n   50:   If the contents of the stream do not add up to this length,\n   51    an `400` error code is returned.\n   52  - `limit` - The byte limit of the body.\n   ..\n   64  \n   65      - `limit` - the limit in bytes\n   66:     - `length` and `expected` - the expected length of the stream\n   67      - `received` - the received bytes\n   68      - `status` and `statusCode` - the corresponding status code for the error\n   69:     - `type` - either `entity.too.large`, `request.size.invalid`, or `stream.encoding.set`\n   70  \n   71  - `res` - the result, either as a `String` if an encoding was set or a `Buffer` otherwise.\n   72  \n   73: If an error occurs, the stream will be paused,\n   74: and you are responsible for correctly disposing the stream.\n   75  For HTTP requests, no handling is required if you send a response.\n   76: For streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.\n   77  \n   78  ## License\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\HISTORY.md:\n   68  ==================\n   69  \n   70:  * fix listeners for delayed stream creation\n   71:    - fixes regression for certain `stream.pipe(res)` situations\n   72  \n   73  1.0.4 / 2014-06-03\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\index.js:\n   71      var on = res.on\n   72      var end = res.end\n   73:     var stream\n   74  \n   75      // see #8\n   ..\n   91          this._implicitHeader();\n   92        }\n   93:       return stream\n   94:         ? stream.write(new Buffer(chunk, encoding))\n   95          : write.call(res, chunk, encoding);\n   96      };\n   ..\n  113        }\n  114  \n  115:       return stream\n  116:         ? stream.end()\n  117          : end.call(res);\n  118      };\n  ...\n  123        }\n  124  \n  125:       if (stream) {\n  126:         return stream.on(type, listener)\n  127        }\n  128  \n  129:       // buffer listeners for future stream\n  130        listeners.push([type, listener])\n  131  \n  ...\n  185        }\n  186  \n  187:       // compression stream\n  188        debug('%s compression', method)\n  189:       stream = exports.methods[method](options);\n  190:       addListeners(stream, stream.on, listeners)\n  191  \n  192        // overwrite the flush method\n  193        res.flush = function(){\n  194:         stream.flush();\n  195        }\n  196  \n  ...\n  200  \n  201        // compression\n  202:       stream.on('data', function(chunk){\n  203          if (write.call(res, chunk) === false) {\n  204:           stream.pause()\n  205          }\n  206        });\n  207  \n  208:       stream.on('end', function(){\n  209          end.call(res);\n  210        });\n  211  \n  212        on.call(res, 'drain', function() {\n  213:         stream.resume()\n  214        });\n  215      });\n  ...\n  220  \n  221  /**\n  222:  * Add bufferred listeners to stream\n  223   */\n  224  \n  225: function addListeners(stream, on, listeners) {\n  226    for (var i = 0; i < listeners.length; i++) {\n  227:     on.apply(stream, listeners[i])\n  228    }\n  229  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\README.md:\n   81  app.use(compression())\n   82  \n   83: // server-sent event stream\n   84  app.get('/events', function (req, res) {\n   85:   res.setHeader('Content-Type', 'text/event-stream')\n   86    res.setHeader('Cache-Control', 'no-cache')\n   87  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\node_modules\\accepts\\node_modules\\mime-types\\README.md:\n   12  \n   13  - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`,\n   14:   so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`.\n   15  - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`.\n   16  - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db)\n   ..\n   65  \n   66  ```js\n   67: mime.extension('application/octet-stream') // 'bin'\n   68  ```\n   69  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\node_modules\\accepts\\node_modules\\mime-types\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\node_modules\\accepts\\node_modules\\mime-types\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\node_modules\\compressible\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\node_modules\\compressible\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\compression\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect\\History.md:\n  414      - Calling `res.csrfToken()` after `req.session.destroy()` will now work\n  415    * deps: express-session@~1.7.4\n  416:     - Fix `res.end` patch to call correct upstream `res.write`\n  417      - Fix response end delay for non-chunked responses\n  418    * deps: qs@1.0.2\n  ...\n  666  \n  667    * deps: compression@1.0.6\n  668:     - fix listeners for delayed stream creation\n  669:     - fix regression for certain `stream.pipe(res)` situations\n  670      - fix regression when negotiation fails\n  671  \n  ...\n  716      - Calculate ETag with md5 for reduced collisions\n  717      - Fix wrong behavior when index file matches directory\n  718:     - Ignore stream errors after request ends\n  719      - Skip directories in index file search\n  720      - deps: send@0.4.0\n  ...\n 1528  \n 1529    * Changed to `devDependencies`\n 1530:   * Fixed stream creation on `static()` __HEAD__ request. [Andreas Lind Petersen]\n 1531    * Fixed Win32 support for `static()`\n 1532    * Fixed monkey-patch issue. Closes #261\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect\\Readme.md:\n  125      - [body](https://github.com/raynos/body)\n  126      - [co-body](https://github.com/visionmedia/co-body)\n  127:     - [raw-body](https://github.com/stream-utils/raw-body)\n  128    - [compression](https://github.com/expressjs/compression) - previously `compress`\n  129    - [connect-timeout](https://github.com/expressjs/timeout) - previously `timeout`\n  ...\n  148      - [cookies](https://github.com/jed/cookies) and [keygrip](https://github.com/jed/keygrip)\n  149    - `limit`\n  150:     - [raw-body](https://github.com/stream-utils/raw-body)\n  151    - `multipart`\n  152      - [connect-multiparty](https://github.com/superjoe30/connect-multiparty)\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect\\node_modules\\finalhandler\\index.js:\n  141  \n  142  /**\n  143:  * Unpipe everything from a stream.\n  144   *\n  145:  * @param {Object} stream\n  146   * @api private\n  147   */\n  148  \n  149  /* istanbul ignore next: implementation differs between versions */\n  150: function unpipe(stream) {\n  151:   if (typeof stream.unpipe === 'function') {\n  152      // new-style\n  153:     stream.unpipe()\n  154      return\n  155    }\n  ...\n  157    // Node.js 0.8 hack\n  158    var listener\n  159:   var listeners = stream.listeners('close')\n  160  \n  161    for (var i = 0; i < listeners.length; i++) {\n  ...\n  167  \n  168      // invoke the listener\n  169:     listener.call(stream)\n  170    }\n  171  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect\\node_modules\\finalhandler\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~2.0.0\",\n   22:     \"readable-stream\": \"~1.0.33\",\n   23      \"should\": \"~4.1.0\",\n   24      \"supertest\": \"~0.14.0\"\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect\\node_modules\\finalhandler\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\README.md:\n   38  });\n   39  \n   40: // default options, immediately start reading from the request stream and\n   41  // parsing\n   42  app.use(busboy({ immediate: true }));\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\package.json:\n    6      \"email\": \"mscdex@mscdex.net\"\n    7    },\n    8:   \"description\": \"A streaming parser for HTML form data for node.js\",\n    9    \"main\": \"./lib/main\",\n   10    \"dependencies\": {\n   11      \"dicer\": \"0.2.3\",\n   12:     \"readable-stream\": \"1.1.x\"\n   13    },\n   14    \"scripts\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\README.md:\n   87      busboy.on('file', function(fieldname, file, filename, encoding, mimetype) {\n   88        var saveTo = path.join(os.tmpDir(), path.basename(fieldname));\n   89:       file.pipe(fs.createWriteStream(saveTo));\n   90      });\n   91      busboy.on('finish', function() {\n   ..\n  164  ===\n  165  \n  166: _Busboy_ is a _Writable_ stream\n  167  \n  168  Busboy (special) events\n  169  -----------------------\n  170  \n  171: * **file**(< _string_ >fieldname, < _ReadableStream_ >stream, < _string_ >filename, < _string_ >transferEncoding, < _string_ >mimeType) - Emitted for each new file form field found. `transferEncoding` contains the 'Content-Transfer-Encoding' value for the file stream. `mimeType` contains the 'Content-Type' value for the file stream.\n  172:     * Note: if you listen for this event, you should always handle the `stream` no matter if you care about the file contents or not (e.g. you can simply just do `stream.resume();` if you want to discard the contents), otherwise the 'finish' event will never fire on the Busboy instance. However, if you don't care about **any** incoming files, you can simply not listen for the 'file' event at all and any/all files will be automatically and safely discarded (these discarded files do still count towards `files` and `parts` limits).\n  173:     * If a configured file size limit was reached, `stream` will both have a boolean property `truncated` (best checked at the end of the stream) and emit a 'limit' event to notify you when this happens.\n  174  \n  175  * **field**(< _string_ >fieldname, < _string_ >value, < _boolean_ >fieldnameTruncated, < _boolean_ >valueTruncated) - Emitted for each new non-file field found.\n  ...\n  189      * **headers** - _object_ - These are the HTTP headers of the incoming request, which are used by individual parsers.\n  190  \n  191:     * **highWaterMark** - _integer_ - highWaterMark to use for this Busboy instance (Default: WritableStream default).\n  192  \n  193:     * **fileHwm** - _integer_ - highWaterMark to use for file streams (Default: ReadableStream default).\n  194  \n  195      * **defCharset** - _string_ - Default character set to use when one isn't defined (Default: 'utf8').\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\deps\\encoding\\encoding.js:\n   80  /**\n   81   * @constructor\n   82:  * @param {Buffer} bytes Array of bytes that provide the stream.\n   83   */\n   84: function ByteInputStream(bytes) {\n   85    /** @type {number} */\n   86    var pos = 0;\n   87  \n   88    /**\n   89:    * @this {ByteInputStream}\n   90:    * @return {number} Get the next byte from the stream.\n   91     */\n   92    this.get = function() {\n   ..\n  108    /**\n  109     * @param {Array.<number>} test Array of bytes to compare against.\n  110:    * @return {boolean} True if the start of the stream matches the test\n  111     *     bytes.\n  112     */\n  ...\n  129   * @param {Array.<number>} bytes The array to write bytes into.\n  130   */\n  131: function ByteOutputStream(bytes) {\n  132    /** @type {number} */\n  133    var pos = 0;\n  134  \n  135    /**\n  136:    * @param {...number} var_args The byte or bytes to emit into the stream.\n  137     * @return {number} The last byte emitted.\n  138     */\n  ...\n  151  /**\n  152   * @constructor\n  153:  * @param {string} string The source of code units for the stream.\n  154   */\n  155: function CodePointInputStream(string) {\n  156    /**\n  157     * @param {string} string Input string of UTF-16 code units.\n  ...\n  207  \n  208  \n  209:   /** @return {number} Get the next code point from the stream. */\n  210    this.get = function() {\n  211      if (pos >= cps.length) {\n  ...\n  219   * @constructor\n  220   */\n  221: function CodePointOutputStream() {\n  222    /** @type {string} */\n  223    var string = '';\n  ...\n  228    };\n  229  \n  230:   /** @param {number} c The code point to encode into the stream. */\n  231    this.emit = function(c) {\n  232      if (c <= 0xFFFF) {\n  ...\n  868  \n  869    /** @private @type {boolean} */\n  870:   this._streaming = false;\n  871    /** @private @type {boolean} */\n  872    this._BOMseen = false;\n  ...\n  887  }\n  888  \n  889: // TODO: Issue if input byte stream is offset by decoder\n  890: // TODO: BOM detection will not work if stream header spans multiple calls\n  891: // (last N bytes of previous stream may need to be retained?)\n  892  TextDecoder.prototype = {\n  893    /**\n  894     * @param {Buffer=} bytes The buffer of bytes to decode.\n  895:    * @param {{stream: boolean}=} options\n  896     */\n  897    decode: function decode(bytes, options) {\n  898      options = Object(options);\n  899  \n  900:     if (!this._streaming) {\n  901        this._decoder = this._encoding.getDecoder(this._options);\n  902        this._BOMseen = false;\n  903      }\n  904:     this._streaming = Boolean(options.stream);\n  905  \n  906:     var input_stream = new ByteInputStream(bytes);\n  907  \n  908:     var output_stream = new CodePointOutputStream();\n  909  \n  910      /** @type {number} */\n  911      var code_point;\n  912  \n  913:     while (input_stream.get() !== EOF_byte) {\n  914:       code_point = this._decoder.decode(input_stream);\n  915        if (code_point !== null && code_point !== EOF_code_point) {\n  916:         output_stream.emit(code_point);\n  917        }\n  918      }\n  919:     if (!this._streaming) {\n  920        do {\n  921:         code_point = this._decoder.decode(input_stream);\n  922          if (code_point !== null && code_point !== EOF_code_point) {\n  923:           output_stream.emit(code_point);\n  924          }\n  925        } while (code_point !== EOF_code_point &&\n  926:                input_stream.get() != EOF_byte);\n  927        this._decoder = null;\n  928      }\n  929  \n  930:     var result = output_stream.string();\n  931      if (!this._BOMseen && result.length) {\n  932        this._BOMseen = true;\n  ...\n  964      throw new TypeError('Unknown encoding: ' + opt_encoding);\n  965    /** @private @type {boolean} */\n  966:   this._streaming = false;\n  967    /** @private */\n  968    this._encoder = null;\n  ...\n  984    /**\n  985     * @param {string=} opt_string The string to encode.\n  986:    * @param {{stream: boolean}=} options\n  987     */\n  988    encode: function encode(opt_string, options) {\n  ...\n  990      options = Object(options);\n  991      // TODO: any options?\n  992:     if (!this._streaming) {\n  993        this._encoder = this._encoding.getEncoder(this._options);\n  994      }\n  995:     this._streaming = Boolean(options.stream);\n  996  \n  997      var bytes = [];\n  998:     var output_stream = new ByteOutputStream(bytes);\n  999:     var input_stream = new CodePointInputStream(opt_string);\n 1000:     while (input_stream.get() !== EOF_code_point) {\n 1001:       this._encoder.encode(output_stream, input_stream);\n 1002      }\n 1003:     if (!this._streaming) {\n 1004        /** @type {number} */\n 1005        var last_byte;\n 1006        do {\n 1007:         last_byte = this._encoder.encode(output_stream, input_stream);\n 1008        } while (last_byte !== EOF_byte);\n 1009        this._encoder = null;\n ....\n 1032  \n 1033    /**\n 1034:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 1035     * @return {?number} The next code point decoded, or null if not enough\n 1036:    *     data exists in the input stream to decode a complete code point.\n 1037     */\n 1038    this.decode = function(byte_pointer) {\n ....\n 1103    var fatal = options.fatal;\n 1104    /**\n 1105:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1106:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1107     * @return {number} The last byte emitted.\n 1108     */\n 1109:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1110      /** @type {number} */\n 1111      var code_point = code_point_pointer.get();\n ....\n 1118      }\n 1119      if (inRange(code_point, 0x0000, 0x007f)) {\n 1120:       return output_byte_stream.emit(code_point);\n 1121      }\n 1122      var count, offset;\n ....\n 1131        offset = 0xF0;\n 1132      }\n 1133:     var result = output_byte_stream.emit(\n 1134          div(code_point, Math.pow(64, count)) + offset);\n 1135      while (count > 0) {\n 1136        var temp = div(code_point, Math.pow(64, count - 1));\n 1137:       result = output_byte_stream.emit(0x80 + (temp % 64));\n 1138        count -= 1;\n 1139      }\n ....\n 1163    var fatal = options.fatal;\n 1164    /**\n 1165:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 1166     * @return {?number} The next code point decoded, or null if not enough\n 1167:    *     data exists in the input stream to decode a complete code point.\n 1168     */\n 1169    this.decode = function(byte_pointer) {\n ....\n 1192    var fatal = options.fatal;\n 1193    /**\n 1194:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1195:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1196     * @return {number} The last byte emitted.\n 1197     */\n 1198:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1199      var code_point = code_point_pointer.get();\n 1200      if (code_point === EOF_code_point) {\n ....\n 1203      code_point_pointer.offset(1);\n 1204      if (inRange(code_point, 0x0000, 0x007F)) {\n 1205:       return output_byte_stream.emit(code_point);\n 1206      }\n 1207      var pointer = indexPointerFor(code_point, index);\n ....\n 1209        encoderError(code_point);\n 1210      }\n 1211:     return output_byte_stream.emit(pointer + 0x80);\n 1212    };\n 1213  }\n ....\n 1248        /** @type {number} */ gbk_third = 0x00;\n 1249    /**\n 1250:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 1251     * @return {?number} The next code point decoded, or null if not enough\n 1252:    *     data exists in the input stream to decode a complete code point.\n 1253     */\n 1254    this.decode = function(byte_pointer) {\n ....\n 1337    var fatal = options.fatal;\n 1338    /**\n 1339:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1340:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1341     * @return {number} The last byte emitted.\n 1342     */\n 1343:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1344      var code_point = code_point_pointer.get();\n 1345      if (code_point === EOF_code_point) {\n ....\n 1348      code_point_pointer.offset(1);\n 1349      if (inRange(code_point, 0x0000, 0x007F)) {\n 1350:       return output_byte_stream.emit(code_point);\n 1351      }\n 1352      var pointer = indexPointerFor(code_point, indexes['gbk']);\n ....\n 1355        var trail = pointer % 190;\n 1356        var offset = trail < 0x3F ? 0x40 : 0x41;\n 1357:       return output_byte_stream.emit(lead, trail + offset);\n 1358      }\n 1359      if (pointer === null && !gb18030) {\n ....\n 1367      var byte3 = div(pointer, 10);\n 1368      var byte4 = pointer - byte3 * 10;\n 1369:     return output_byte_stream.emit(byte1 + 0x81,\n 1370                                     byte2 + 0x30,\n 1371                                     byte3 + 0x81,\n ....\n 1400        /** @type {number} */ hzgb2312_lead = 0x00;\n 1401    /**\n 1402:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 1403     * @return {?number} The next code point decoded, or null if not enough\n 1404:    *     data exists in the input stream to decode a complete code point.\n 1405     */\n 1406    this.decode = function(byte_pointer) {\n ....\n 1479    var hzgb2312 = false;\n 1480    /**\n 1481:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1482:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1483     * @return {number} The last byte emitted.\n 1484     */\n 1485:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1486      var code_point = code_point_pointer.get();\n 1487      if (code_point === EOF_code_point) {\n ....\n 1492        code_point_pointer.offset(-1);\n 1493        hzgb2312 = false;\n 1494:       return output_byte_stream.emit(0x7E, 0x7D);\n 1495      }\n 1496      if (code_point === 0x007E) {\n 1497:       return output_byte_stream.emit(0x7E, 0x7E);\n 1498      }\n 1499      if (inRange(code_point, 0x0000, 0x007F)) {\n 1500:       return output_byte_stream.emit(code_point);\n 1501      }\n 1502      if (!hzgb2312) {\n 1503        code_point_pointer.offset(-1);\n 1504        hzgb2312 = true;\n 1505:       return output_byte_stream.emit(0x7E, 0x7B);\n 1506      }\n 1507      var pointer = indexPointerFor(code_point, indexes['gbk']);\n ....\n 1514        return encoderError(code_point);\n 1515      }\n 1516:     return output_byte_stream.emit(lead, trail);\n 1517    };\n 1518  }\n ....\n 1543  \n 1544    /**\n 1545:    * @param {ByteInputStream} byte_pointer The byte steram to decode.\n 1546     * @return {?number} The next code point decoded, or null if not enough\n 1547:    *     data exists in the input stream to decode a complete code point.\n 1548     */\n 1549    this.decode = function(byte_pointer) {\n ....\n 1615    var fatal = options.fatal;\n 1616    /**\n 1617:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1618:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1619     * @return {number} The last byte emitted.\n 1620     */\n 1621:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1622      var code_point = code_point_pointer.get();\n 1623      if (code_point === EOF_code_point) {\n ....\n 1626      code_point_pointer.offset(1);\n 1627      if (inRange(code_point, 0x0000, 0x007F)) {\n 1628:       return output_byte_stream.emit(code_point);\n 1629      }\n 1630      var pointer = indexPointerFor(code_point, indexes['big5']);\n ....\n 1638      var trail = pointer % 157;\n 1639      var offset = trail < 0x3F ? 0x40 : 0x62;\n 1640:     return output_byte_stream.emit(lead, trail + offset);\n 1641    };\n 1642  }\n ....\n 1667        /** @type {number} */ eucjp_second = 0x00;\n 1668    /**\n 1669:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 1670     * @return {?number} The next code point decoded, or null if not enough\n 1671:    *     data exists in the input stream to decode a complete code point.\n 1672     */\n 1673    this.decode = function(byte_pointer) {\n ....\n 1743    var fatal = options.fatal;\n 1744    /**\n 1745:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1746:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1747     * @return {number} The last byte emitted.\n 1748     */\n 1749:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1750      var code_point = code_point_pointer.get();\n 1751      if (code_point === EOF_code_point) {\n ....\n 1754      code_point_pointer.offset(1);\n 1755      if (inRange(code_point, 0x0000, 0x007F)) {\n 1756:       return output_byte_stream.emit(code_point);\n 1757      }\n 1758      if (code_point === 0x00A5) {\n 1759:       return output_byte_stream.emit(0x5C);\n 1760      }\n 1761      if (code_point === 0x203E) {\n 1762:       return output_byte_stream.emit(0x7E);\n 1763      }\n 1764      if (inRange(code_point, 0xFF61, 0xFF9F)) {\n 1765:       return output_byte_stream.emit(0x8E, code_point - 0xFF61 + 0xA1);\n 1766      }\n 1767  \n ....\n 1772      var lead = div(pointer, 94) + 0xA1;\n 1773      var trail = pointer % 94 + 0xA1;\n 1774:     return output_byte_stream.emit(lead, trail);\n 1775    };\n 1776  }\n ....\n 1807        /** @type {number} */ iso2022jp_lead = 0x00;\n 1808    /**\n 1809:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 1810     * @return {?number} The next code point decoded, or null if not enough\n 1811:    *     data exists in the input stream to decode a complete code point.\n 1812     */\n 1813    this.decode = function(byte_pointer) {\n ....\n 1949    var /** @type {number} */ iso2022jp_state = state.ASCII;\n 1950    /**\n 1951:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 1952:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 1953     * @return {number} The last byte emitted.\n 1954     */\n 1955:   this.encode = function(output_byte_stream, code_point_pointer) {\n 1956      var code_point = code_point_pointer.get();\n 1957      if (code_point === EOF_code_point) {\n ....\n 1964        code_point_pointer.offset(-1);\n 1965        iso2022jp_state = state.ASCII;\n 1966:       return output_byte_stream.emit(0x1B, 0x28, 0x42);\n 1967      }\n 1968      if (inRange(code_point, 0x0000, 0x007F)) {\n 1969:       return output_byte_stream.emit(code_point);\n 1970      }\n 1971      if (code_point === 0x00A5) {\n 1972:       return output_byte_stream.emit(0x5C);\n 1973      }\n 1974      if (code_point === 0x203E) {\n 1975:       return output_byte_stream.emit(0x7E);\n 1976      }\n 1977      if (inRange(code_point, 0xFF61, 0xFF9F) &&\n ....\n 1979        code_point_pointer.offset(-1);\n 1980        iso2022jp_state = state.Katakana;\n 1981:       return output_byte_stream.emit(0x1B, 0x28, 0x49);\n 1982      }\n 1983      if (inRange(code_point, 0xFF61, 0xFF9F)) {\n 1984:       return output_byte_stream.emit(code_point - 0xFF61 - 0x21);\n 1985      }\n 1986      if (iso2022jp_state !== state.lead) {\n 1987        code_point_pointer.offset(-1);\n 1988        iso2022jp_state = state.lead;\n 1989:       return output_byte_stream.emit(0x1B, 0x24, 0x42);\n 1990      }\n 1991      var pointer = indexPointerFor(code_point, indexes['jis0208']);\n ....\n 1995      var lead = div(pointer, 94) + 0x21;\n 1996      var trail = pointer % 94 + 0x21;\n 1997:     return output_byte_stream.emit(lead, trail);\n 1998    };\n 1999  }\n ....\n 2018    var /** @type {number} */ shiftjis_lead = 0x00;\n 2019    /**\n 2020:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 2021     * @return {?number} The next code point decoded, or null if not enough\n 2022:    *     data exists in the input stream to decode a complete code point.\n 2023     */\n 2024    this.decode = function(byte_pointer) {\n ....\n 2069    var fatal = options.fatal;\n 2070    /**\n 2071:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 2072:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 2073     * @return {number} The last byte emitted.\n 2074     */\n 2075:   this.encode = function(output_byte_stream, code_point_pointer) {\n 2076      var code_point = code_point_pointer.get();\n 2077      if (code_point === EOF_code_point) {\n ....\n 2080      code_point_pointer.offset(1);\n 2081      if (inRange(code_point, 0x0000, 0x0080)) {\n 2082:       return output_byte_stream.emit(code_point);\n 2083      }\n 2084      if (code_point === 0x00A5) {\n 2085:       return output_byte_stream.emit(0x5C);\n 2086      }\n 2087      if (code_point === 0x203E) {\n 2088:       return output_byte_stream.emit(0x7E);\n 2089      }\n 2090      if (inRange(code_point, 0xFF61, 0xFF9F)) {\n 2091:       return output_byte_stream.emit(code_point - 0xFF61 + 0xA1);\n 2092      }\n 2093      var pointer = indexPointerFor(code_point, indexes['jis0208']);\n ....\n 2099      var trail = pointer % 188;\n 2100      var offset = trail < 0x3F ? 0x40 : 0x41;\n 2101:     return output_byte_stream.emit(lead + lead_offset, trail + offset);\n 2102    };\n 2103  }\n ....\n 2126    var /** @type {number} */ euckr_lead = 0x00;\n 2127    /**\n 2128:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 2129     * @return {?number} The next code point decoded, or null if not enough\n 2130:    *     data exists in the input stream to decode a complete code point.\n 2131     */\n 2132    this.decode = function(byte_pointer) {\n ....\n 2192    var fatal = options.fatal;\n 2193    /**\n 2194:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 2195:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 2196     * @return {number} The last byte emitted.\n 2197     */\n 2198:   this.encode = function(output_byte_stream, code_point_pointer) {\n 2199      var code_point = code_point_pointer.get();\n 2200      if (code_point === EOF_code_point) {\n ....\n 2203      code_point_pointer.offset(1);\n 2204      if (inRange(code_point, 0x0000, 0x007F)) {\n 2205:       return output_byte_stream.emit(code_point);\n 2206      }\n 2207      var pointer = indexPointerFor(code_point, indexes['euc-kr']);\n ....\n 2214        trail = pointer % (26 + 26 + 126);\n 2215        var offset = trail < 26 ? 0x41 : trail < 26 + 26 ? 0x47 : 0x4D;\n 2216:       return output_byte_stream.emit(lead, trail + offset);\n 2217      }\n 2218      pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);\n 2219      lead = div(pointer, 94) + 0xC7;\n 2220      trail = pointer % 94 + 0xA1;\n 2221:     return output_byte_stream.emit(lead, trail);\n 2222    };\n 2223  }\n ....\n 2253        /** @type {?number} */ utf16_lead_surrogate = null;\n 2254    /**\n 2255:    * @param {ByteInputStream} byte_pointer The byte stream to decode.\n 2256     * @return {?number} The next code point decoded, or null if not enough\n 2257:    *     data exists in the input stream to decode a complete code point.\n 2258     */\n 2259    this.decode = function(byte_pointer) {\n ....\n 2308    var fatal = options.fatal;\n 2309    /**\n 2310:    * @param {ByteOutputStream} output_byte_stream Output byte stream.\n 2311:    * @param {CodePointInputStream} code_point_pointer Input stream.\n 2312     * @return {number} The last byte emitted.\n 2313     */\n 2314:   this.encode = function(output_byte_stream, code_point_pointer) {\n 2315      /**\n 2316       * @param {number} code_unit\n ....\n 2321        var byte2 = code_unit & 0x00FF;\n 2322        if (utf16_be) {\n 2323:         return output_byte_stream.emit(byte1, byte2);\n 2324        }\n 2325:       return output_byte_stream.emit(byte2, byte1);\n 2326      }\n 2327      var code_point = code_point_pointer.get();\n ....\n 2369  /**\n 2370   * @param {string} label The encoding label.\n 2371:  * @param {ByteInputStream} input_stream The byte stream to test.\n 2372   */\n 2373: function detectEncoding(label, input_stream) {\n 2374:   if (input_stream.match([0xFF, 0xFE])) {\n 2375:     input_stream.offset(2);\n 2376      return 'utf-16le';\n 2377    }\n 2378:   if (input_stream.match([0xFE, 0xFF])) {\n 2379:     input_stream.offset(2);\n 2380      return 'utf-16be';\n 2381    }\n 2382:   if (input_stream.match([0xEF, 0xBB, 0xBF])) {\n 2383:     input_stream.offset(3);\n 2384      return 'utf-8';\n 2385    }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\lib\\main.js:\n    1  var fs = require('fs'),\n    2:     WritableStream = require('stream').Writable\n    3:                      || require('readable-stream').Writable,\n    4      inherits = require('util').inherits;\n    5  \n    .\n   10      return new Busboy(opts);\n   11    if (opts.highWaterMark !== undefined)\n   12:     WritableStream.call(this, { highWaterMark: opts.highWaterMark });\n   13    else\n   14:     WritableStream.call(this);\n   15  \n   16    this._done = false;\n   ..\n   23      throw new Error('Missing Content-Type');\n   24  }\n   25: inherits(Busboy, WritableStream);\n   26  \n   27  Busboy.prototype.emit = function(ev) {\n   ..\n   29      this._parser && this._parser.end();\n   30    else\n   31:     WritableStream.prototype.emit.apply(this, arguments);\n   32  };\n   33  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\lib\\types\\multipart.js:\n    6  //     -- this will require modifications to utils.parseParams\n    7  \n    8: var ReadableStream = require('stream').Readable || require('readable-stream'),\n    9      inherits = require('util').inherits;\n   10  \n   ..\n  113      }\n  114  \n  115:     // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let\n  116      // us emit 'end' early since we know the part has ended if we are already\n  117      // seeing the next part\n  ...\n  169        var onData,\n  170            onEnd;\n  171:       if (contype === 'application/octet-stream' || filename !== undefined) {\n  172          // file/binary field\n  173          if (nfiles === filesLimit) {\n  ...\n  187  \n  188          ++nends;\n  189:         var file = new FileStream(fileopts);\n  190          curFile = file;\n  191          file.on('end', function() {\n  ...\n  258  \n  259        /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become\n  260:          broken. Streams2/streams3 is a huge black box of confusion, but\n  261           somehow overriding the sync state seems to fix things again (and still\n  262           seems to work for previous node versions).\n  ...\n  302  }\n  303  \n  304: function FileStream(opts) {\n  305:   if (!(this instanceof FileStream))\n  306:     return new FileStream(opts);\n  307:   ReadableStream.call(this, opts);\n  308  \n  309    this.truncated = false;\n  310  }\n  311: inherits(FileStream, ReadableStream);\n  312  \n  313: FileStream.prototype._read = function(n) {};\n  314  \n  315  module.exports = Multipart;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\package.json:\n    6      \"email\": \"mscdex@mscdex.net\"\n    7    },\n    8:   \"description\": \"A very fast streaming multipart parser for node.js\",\n    9    \"main\": \"./lib/Dicer\",\n   10    \"dependencies\": {\n   11:     \"streamsearch\": \"0.1.2\",\n   12:     \"readable-stream\": \"1.1.x\"\n   13    },\n   14    \"scripts\": {\n   ..\n   24      \"multipart\",\n   25      \"form-data\",\n   26:     \"streaming\"\n   27    ],\n   28    \"licenses\": [\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\README.md:\n    3  ===========\n    4  \n    5: A very fast streaming multipart parser for node.js.\n    6  \n    7  Benchmarks can be found [here](https://github.com/mscdex/dicer/wiki/Benchmarks).\n    .\n   86  ===\n   87  \n   88: _Dicer_ is a _WritableStream_\n   89  \n   90  Dicer (special) events\n   ..\n   93  * **end**() - Emitted when all parts have been parsed.\n   94  \n   95: * **part**(< _PartStream_ >stream) - Emitted when a new part has been found.\n   96  \n   97: * **preamble**(< _PartStream_ >stream) - Emitted for preamble if you should happen to need it (can usually be ignored).\n   98  \n   99  * **trailer**(< _Buffer_ >data) - Emitted when trailing data was found after the terminating boundary (as with the preamble, this can usually be ignored too).\n  ...\n  115  \n  116  \n  117: _PartStream_ is a _ReadableStream_\n  118  \n  119: PartStream (special) events\n  120  ---------------------------\n  121  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\bench\\parted-multipart.js:\n    1  /**\n    2   * Parted (https://github.com/chjj/parted)\n    3:  * A streaming multipart state parser.\n    4   * Copyright (c) 2011, Christopher Jeffrey. (MIT Licensed)\n    5   */\n    .\n  277  \n  278      if (this.file) {\n  279:       this.data = stream(this.file, this.options.path);\n  280      } else {\n  281        this.decode = new StringDecoder('utf8');\n  ...\n  449  var isWindows = process.platform === 'win32';\n  450  \n  451: var stream = function(name, dir) {\n  452    var ext = path.extname(name) || ''\n  453      , name = path.basename(name, ext) || ''\n  ...\n  465    }\n  466  \n  467:   return fs.createWriteStream(name);\n  468  };\n  469  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\lib\\Dicer.js:\n    1: var WritableStream = require('stream').Writable\n    2:                      || require('readable-stream').Writable,\n    3      inherits = require('util').inherits;\n    4  \n    5: var StreamSearch = require('streamsearch');\n    6  \n    7: var PartStream = require('./PartStream'),\n    8      HeaderParser = require('./HeaderParser');\n    9  \n   ..\n   16    if (!(this instanceof Dicer))\n   17      return new Dicer(cfg);\n   18:   WritableStream.call(this, cfg);\n   19  \n   20    if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string'))\n   ..\n   53  \n   54  }\n   55: inherits(Dicer, WritableStream);\n   56  \n   57  Dicer.prototype.emit = function(ev) {\n   ..\n   78      }\n   79    } else\n   80:     WritableStream.prototype.emit.apply(this, arguments);\n   81  };\n   82  \n   ..\n   88    if (this._headerFirst && this._isPreamble) {\n   89      if (!this._part) {\n   90:       this._part = new PartStream(this._partOpts);\n   91        if (this._events.preamble)\n   92          this.emit('preamble', this._part);\n   ..\n  123  Dicer.prototype.setBoundary = function(boundary) {\n  124    var self = this;\n  125:   this._bparser = new StreamSearch('\\r\\n--' + boundary);\n  126    this._bparser.on('info', function(isMatch, data, start, end) {\n  127      self._oninfo(isMatch, data, start, end);\n  ...\n  133      this._ignoreData = true;\n  134      this._part.on('error', EMPTY_FN);\n  135:     // we must perform some kind of read on the stream even though we are\n  136:     // ignoring the data, otherwise node's Readable stream will not emit 'end'\n  137:     // after pushing null to the stream\n  138      this._part.resume();\n  139    }\n  ...\n  167      this._justMatched = false;\n  168    if (!this._part) {\n  169:     this._part = new PartStream(this._partOpts);\n  170      this._part._read = function(n) {\n  171        if (!self._pause)\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\lib\\HeaderParser.js:\n    2      inherits = require('util').inherits;\n    3  \n    4: var StreamSearch = require('streamsearch');\n    5  \n    6  var B_DCRLF = new Buffer('\\r\\n\\r\\n'),\n    .\n   25    this.header = {};\n   26    this.finished = false;\n   27:   this.ss = new StreamSearch(B_DCRLF);\n   28    this.ss.on('info', function(isMatch, data, start, end) {\n   29      if (data && !self.maxed) {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\lib\\PartStream.js:\n    1  var inherits = require('util').inherits,\n    2:     ReadableStream = require('stream').Readable || require('readable-stream');\n    3  \n    4: function PartStream(opts) {\n    5:   if (!(this instanceof PartStream))\n    6:     return new PartStream(opts);\n    7:   ReadableStream.call(this, opts);\n    8  }\n    9: inherits(PartStream, ReadableStream);\n   10  \n   11: PartStream.prototype._read = function(n) {};\n   12  \n   13: module.exports = PartStream;\n   14  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\node_modules\\streamsearch\\package.json:\n    1  {\n    2:   \"name\": \"streamsearch\",\n    3    \"version\": \"0.1.2\",\n    4    \"author\": {\n    .\n    6      \"email\": \"mscdex@mscdex.net\"\n    7    },\n    8:   \"description\": \"Streaming Boyer-Moore-Horspool searching for node.js\",\n    9    \"main\": \"./lib/sbmh\",\n   10    \"engines\": {\n   ..\n   12    },\n   13    \"keywords\": [\n   14:     \"stream\",\n   15      \"horspool\",\n   16      \"boyer-moore-horspool\",\n   ..\n   21      {\n   22        \"type\": \"MIT\",\n   23:       \"url\": \"http://github.com/mscdex/streamsearch/raw/master/LICENSE\"\n   24      }\n   25    ],\n   26    \"repository\": {\n   27      \"type\": \"git\",\n   28:     \"url\": \"http://github.com/mscdex/streamsearch.git\"\n   29    },\n   30:   \"readme\": \"Description\\n===========\\n\\nstreamsearch is a module for [node.js](http://nodejs.org/) that allows searching a stream using the Boyer-Moore-Horspool algorithm.\\n\\nThis module is based heavily on the Streaming Boyer-Moore-Horspool C++ implementation by Hongli Lai [here](https://github.com/FooBarWidget/boyer-moore-horspool).\\n\\n\\nRequirements\\n============\\n\\n* [node.js](http://nodejs.org/) -- v0.8.0 or newer\\n\\n\\nInstallation\\n============\\n\\n    npm install streamsearch\\n\\nExample\\n=======\\n\\n```javascript\\n  var StreamSearch = require('streamsearch'),\\n      inspect = require('util').inspect;\\n\\n  var needle = new Buffer([13, 10]), // CRLF\\n      s = new StreamSearch(needle),\\n      chunks = [\\n        new Buffer('foo'),\\n        new Buffer(' bar'),\\n        new Buffer('\\\\r'),\\n        new Buffer('\\\\n'),\\n        new Buffer('baz, hello\\\\r'),\\n        new Buffer('\\\\n world.'),\\n        new Buffer('\\\\r\\\\n Node.JS rules!!\\\\r\\\\n\\\\r\\\\n')\\n      ];\\n  s.on('info', function(isMatch, data, start, end) {\\n    if (data)\\n      console.log('data: ' + inspect(data.toString('ascii', start, end)));\\n    if (isMatch)\\n      console.log('match!');\\n  });\\n  for (var i = 0, len = chunks.length; i < len; ++i)\\n    s.push(chunks[i]);\\n\\n  // output:\\n  //\\n  // data: 'foo'\\n  // data: ' bar'\\n  // match!\\n  // data: 'baz, hello'\\n  // match!\\n  // data: ' world.'\\n  // match!\\n  // data: ' Node.JS rules!!'\\n  // match!\\n  // data: ''\\n  // match!\\n```\\n\\n\\nAPI\\n===\\n\\nEvents\\n------\\n\\n* **info**(< _boolean_ >isMatch[, < _Buffer_ >chunk, < _integer_ >start, < _integer_ >end]) - A match _may_ or _may not_ have been made. In either case, a preceding `chunk` of data _may_ be available that did not match the needle. Data (if available) is in `chunk` between `start` (inclusive) and `end` (exclusive).\\n\\n\\nProperties\\n----------\\n\\n* **maxMatches** - < _integer_ > - The maximum number of matches. Defaults to Infinity.\\n\\n* **matches** - < _integer_ > - The current match count.\\n\\n\\nFunctions\\n---------\\n\\n* **(constructor)**(< _mixed_ >needle) - Creates and returns a new instance for searching for a _Buffer_ or _string_ `needle`.\\n\\n* **push**(< _Buffer_ >chunk) - _integer_ - Processes `chunk`. The return value is the last processed index in `chunk` + 1.\\n\\n* **reset**() - _(void)_ - Resets internal state. Useful for when you wish to start searching a new/different stream for example.\\n\",\n   31    \"readmeFilename\": \"README.md\",\n   32:   \"_id\": \"streamsearch@0.1.2\",\n   33    \"dist\": {\n   34      \"shasum\": \"808b9d0e56fc273d809ba57338e929919a1a9f1a\",\n   35:     \"tarball\": \"http://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz\"\n   36    },\n   37:   \"_from\": \"streamsearch@0.1.2\",\n   38:   \"_resolved\": \"https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz\",\n   39    \"scripts\": {},\n   40    \"_npmVersion\": \"1.2.18\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\node_modules\\streamsearch\\README.md:\n    2  ===========\n    3  \n    4: streamsearch is a module for [node.js](http://nodejs.org/) that allows searching a stream using the Boyer-Moore-Horspool algorithm.\n    5  \n    6: This module is based heavily on the Streaming Boyer-Moore-Horspool C++ implementation by Hongli Lai [here](https://github.com/FooBarWidget/boyer-moore-horspool).\n    7  \n    8  \n    .\n   16  ============\n   17  \n   18:     npm install streamsearch\n   19  \n   20  Example\n   ..\n   22  \n   23  ```javascript\n   24:   var StreamSearch = require('streamsearch'),\n   25        inspect = require('util').inspect;\n   26  \n   27    var needle = new Buffer([13, 10]), // CRLF\n   28:       s = new StreamSearch(needle),\n   29        chunks = [\n   30          new Buffer('foo'),\n   ..\n   85  * **push**(< _Buffer_ >chunk) - _integer_ - Processes `chunk`. The return value is the last processed index in `chunk` + 1.\n   86  \n   87: * **reset**() - _(void)_ - Resets internal state. Useful for when you wish to start searching a new/different stream for example.\n   88  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\node_modules\\streamsearch\\lib\\sbmh.js:\n    1  /*\n    2:   Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n    3    by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n    4  */\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many\\original:\n   23  ------WebKitFormBoundaryWLHCs9qmcJJoyjKR\n   24  Content-Disposition: form-data; name=\"media\"; filename=\"\"\n   25: Content-Type: application/octet-stream\n   26  \n   27  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many\\part6.header:\n    1  {\"content-disposition\": [\"form-data; name=\\\"media\\\"; filename=\\\"\\\"\"],\n    2:  \"content-type\": [\"application/octet-stream\"]}\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many-noend\\original:\n   27  ------WebKitFormBoundaryWLHCs9qmcJJoyjKR\n   28  Content-Disposition: form-data; name=\"media\"; filename=\"\"\n   29: Content-Type: application/octet-stream\n   30  \n   31  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many-noend\\part7.header:\n    1  {\"content-disposition\": [\"form-data; name=\\\"media\\\"; filename=\\\"\\\"\"],\n    2:  \"content-type\": [\"application/octet-stream\"]}\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many-wrongboundary\\original:\n   23  ------WebKitFormBoundaryWLHCs9qmcJJoyjKR\n   24  Content-Disposition: form-data; name=\"media\"; filename=\"\"\n   25: Content-Type: application/octet-stream\n   26  \n   27  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many-wrongboundary\\preamble:\n   24  ------WebKitFormBoundaryWLHCs9qmcJJoyjKR\n   25  Content-Disposition: form-data; name=\"media\"; filename=\"\"\n   26: Content-Type: application/octet-stream\n   27  \n   28  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\duplex.js:\n    1: module.exports = require(\"./lib/_stream_duplex.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\float.patch:\n    1: diff --git a/lib/_stream_duplex.js b/lib/_stream_duplex.js\n    2  index c5a741c..a2e0d8e 100644\n    3: --- a/lib/_stream_duplex.js\n    4: +++ b/lib/_stream_duplex.js\n    5  @@ -26,8 +26,8 @@\n    6   \n    7   module.exports = Duplex;\n    8   var util = require('util');\n    9: -var Readable = require('_stream_readable');\n   10: -var Writable = require('_stream_writable');\n   11: +var Readable = require('./_stream_readable');\n   12: +var Writable = require('./_stream_writable');\n   13   \n   14   util.inherits(Duplex, Readable);\n   15   \n   16: diff --git a/lib/_stream_passthrough.js b/lib/_stream_passthrough.js\n   17  index a5e9864..330c247 100644\n   18: --- a/lib/_stream_passthrough.js\n   19: +++ b/lib/_stream_passthrough.js\n   20  @@ -25,7 +25,7 @@\n   21   \n   22   module.exports = PassThrough;\n   23   \n   24: -var Transform = require('_stream_transform');\n   25: +var Transform = require('./_stream_transform');\n   26   var util = require('util');\n   27   util.inherits(PassThrough, Transform);\n   28   \n   29: diff --git a/lib/_stream_readable.js b/lib/_stream_readable.js\n   30  index 0c3fe3e..90a8298 100644\n   31: --- a/lib/_stream_readable.js\n   32: +++ b/lib/_stream_readable.js\n   33  @@ -23,10 +23,34 @@ module.exports = Readable;\n   34   Readable.ReadableState = ReadableState;\n   ..\n   46  +};\n   47  +\n   48:  var Stream = require('stream');\n   49   var util = require('util');\n   50  +if (!util.isUndefined) {\n   ..\n   55  +}\n   56   var StringDecoder;\n   57: -var debug = util.debuglog('stream');\n   58  +var debug;\n   59  +if (util.debuglog)\n   60: +  debug = util.debuglog('stream');\n   61  +else try {\n   62: +  debug = require('debuglog')('stream');\n   63  +} catch (er) {\n   64  +  debug = function() {};\n   65  +}\n   66   \n   67:  util.inherits(Readable, Stream);\n   68   \n   69  @@ -380,7 +404,7 @@ function chunkInvalid(state, chunk) {\n   70   \n   71   \n   72:  function onEofChunk(stream, state) {\n   73  -  if (state.decoder && !state.ended) {\n   74  +  if (state.decoder && !state.ended && state.decoder.end) {\n   ..\n   76       if (chunk && chunk.length) {\n   77         state.buffer.push(chunk);\n   78: diff --git a/lib/_stream_transform.js b/lib/_stream_transform.js\n   79  index b1f9fcc..b0caf57 100644\n   80: --- a/lib/_stream_transform.js\n   81: +++ b/lib/_stream_transform.js\n   82  @@ -64,8 +64,14 @@\n   83   \n   84   module.exports = Transform;\n   85   \n   86: -var Duplex = require('_stream_duplex');\n   87: +var Duplex = require('./_stream_duplex');\n   88   var util = require('util');\n   89  +if (!util.isUndefined) {\n   ..\n   96   \n   97   \n   98: diff --git a/lib/_stream_writable.js b/lib/_stream_writable.js\n   99  index ba2e920..f49288b 100644\n  100: --- a/lib/_stream_writable.js\n  101: +++ b/lib/_stream_writable.js\n  102  @@ -27,6 +27,12 @@ module.exports = Writable;\n  103   Writable.WritableState = WritableState;\n  ...\n  110  +  }\n  111  +}\n  112:  var Stream = require('stream');\n  113   \n  114:  util.inherits(Writable, Stream);\n  115: @@ -119,7 +125,7 @@ function WritableState(options, stream) {\n  116   function Writable(options) {\n  117     // Writable ctor is applied to Duplexes, though they're not\n  118     // instanceof Writable, they're instanceof Readable.\n  119: -  if (!(this instanceof Writable) && !(this instanceof Stream.Duplex))\n  120: +  if (!(this instanceof Writable) && !(this instanceof require('./_stream_duplex')))\n  121       return new Writable(options);\n  122   \n  123     this._writableState = new WritableState(options, this);\n  124: diff --git a/test/simple/test-stream-big-push.js b/test/simple/test-stream-big-push.js\n  125  index e3787e4..8cd2127 100644\n  126: --- a/test/simple/test-stream-big-push.js\n  127: +++ b/test/simple/test-stream-big-push.js\n  128  @@ -21,7 +21,7 @@\n  129   \n  130   var common = require('../common');\n  131   var assert = require('assert');\n  132: -var stream = require('stream');\n  133: +var stream = require('../../');\n  134   var str = 'asdfasdfasdfasdfasdf';\n  135   \n  136:  var r = new stream.Readable({\n  137: diff --git a/test/simple/test-stream-end-paused.js b/test/simple/test-stream-end-paused.js\n  138  index bb73777..d40efc7 100644\n  139: --- a/test/simple/test-stream-end-paused.js\n  140: +++ b/test/simple/test-stream-end-paused.js\n  141  @@ -25,7 +25,7 @@ var gotEnd = false;\n  142   \n  143:  // Make sure we don't miss the end event for paused 0-length streams\n  144   \n  145: -var Readable = require('stream').Readable;\n  146  +var Readable = require('../../').Readable;\n  147:  var stream = new Readable();\n  148   var calledRead = false;\n  149:  stream._read = function() {\n  150: diff --git a/test/simple/test-stream-pipe-after-end.js b/test/simple/test-stream-pipe-after-end.js\n  151  index b46ee90..0be8366 100644\n  152: --- a/test/simple/test-stream-pipe-after-end.js\n  153: +++ b/test/simple/test-stream-pipe-after-end.js\n  154  @@ -22,8 +22,8 @@\n  155   var common = require('../common');\n  156   var assert = require('assert');\n  157   \n  158: -var Readable = require('_stream_readable');\n  159: -var Writable = require('_stream_writable');\n  160: +var Readable = require('../../lib/_stream_readable');\n  161: +var Writable = require('../../lib/_stream_writable');\n  162   var util = require('util');\n  163   \n  164   util.inherits(TestReadable, Readable);\n  165: diff --git a/test/simple/test-stream-pipe-cleanup.js b/test/simple/test-stream-pipe-cleanup.js\n  166  deleted file mode 100644\n  167  index f689358..0000000\n  168: --- a/test/simple/test-stream-pipe-cleanup.js\n  169  +++ /dev/null\n  170  @@ -1,122 +0,0 @@\n  ...\n  190  -// USE OR OTHER DEALINGS IN THE SOFTWARE.\n  191  -\n  192: -// This test asserts that Stream.prototype.pipe does not leave listeners\n  193  -// hanging on the source or dest.\n  194  -\n  195  -var common = require('../common');\n  196: -var stream = require('stream');\n  197  -var assert = require('assert');\n  198  -var util = require('util');\n  ...\n  201  -  this.writable = true;\n  202  -  this.endCalls = 0;\n  203: -  stream.Stream.call(this);\n  204  -}\n  205: -util.inherits(Writable, stream.Stream);\n  206  -Writable.prototype.end = function() {\n  207  -  this.endCalls++;\n  ...\n  214  -function Readable() {\n  215  -  this.readable = true;\n  216: -  stream.Stream.call(this);\n  217  -}\n  218: -util.inherits(Readable, stream.Stream);\n  219  -\n  220  -function Duplex() {\n  ...\n  291  -assert.equal(w.listeners('end').length, 0);\n  292  -assert.equal(w.listeners('close').length, 0);\n  293: diff --git a/test/simple/test-stream-pipe-error-handling.js b/test/simple/test-stream-pipe-error-handling.js\n  294  index c5d724b..c7d6b7d 100644\n  295: --- a/test/simple/test-stream-pipe-error-handling.js\n  296: +++ b/test/simple/test-stream-pipe-error-handling.js\n  297  @@ -21,7 +21,7 @@\n  298   \n  299   var common = require('../common');\n  300   var assert = require('assert');\n  301: -var Stream = require('stream').Stream;\n  302: +var Stream = require('../../').Stream;\n  303   \n  304   (function testErrorListenerCatches() {\n  305:    var source = new Stream();\n  306: diff --git a/test/simple/test-stream-pipe-event.js b/test/simple/test-stream-pipe-event.js\n  307  index cb9d5fe..56f8d61 100644\n  308: --- a/test/simple/test-stream-pipe-event.js\n  309: +++ b/test/simple/test-stream-pipe-event.js\n  310  @@ -20,7 +20,7 @@\n  311   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  312   \n  313   var common = require('../common');\n  314: -var stream = require('stream');\n  315: +var stream = require('../../');\n  316   var assert = require('assert');\n  317   var util = require('util');\n  318   \n  319: diff --git a/test/simple/test-stream-push-order.js b/test/simple/test-stream-push-order.js\n  320  index f2e6ec2..a5c9bf9 100644\n  321: --- a/test/simple/test-stream-push-order.js\n  322: +++ b/test/simple/test-stream-push-order.js\n  323  @@ -20,7 +20,7 @@\n  324   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  325   \n  326   var common = require('../common.js');\n  327: -var Readable = require('stream').Readable;\n  328  +var Readable = require('../../').Readable;\n  329   var assert = require('assert');\n  330   \n  331   var s = new Readable({\n  332: diff --git a/test/simple/test-stream-push-strings.js b/test/simple/test-stream-push-strings.js\n  333  index 06f43dc..1701a9a 100644\n  334: --- a/test/simple/test-stream-push-strings.js\n  335: +++ b/test/simple/test-stream-push-strings.js\n  336  @@ -22,7 +22,7 @@\n  337   var common = require('../common');\n  338   var assert = require('assert');\n  339   \n  340: -var Readable = require('stream').Readable;\n  341  +var Readable = require('../../').Readable;\n  342   var util = require('util');\n  343   \n  344:  util.inherits(MyStream, Readable);\n  345: diff --git a/test/simple/test-stream-readable-event.js b/test/simple/test-stream-readable-event.js\n  346  index ba6a577..a8e6f7b 100644\n  347: --- a/test/simple/test-stream-readable-event.js\n  348: +++ b/test/simple/test-stream-readable-event.js\n  349  @@ -22,7 +22,7 @@\n  350   var common = require('../common');\n  351   var assert = require('assert');\n  352   \n  353: -var Readable = require('stream').Readable;\n  354  +var Readable = require('../../').Readable;\n  355   \n  356   (function first() {\n  357     // First test, not reading when the readable is added.\n  358: diff --git a/test/simple/test-stream-readable-flow-recursion.js b/test/simple/test-stream-readable-flow-recursion.js\n  359  index 2891ad6..11689ba 100644\n  360: --- a/test/simple/test-stream-readable-flow-recursion.js\n  361: +++ b/test/simple/test-stream-readable-flow-recursion.js\n  362  @@ -27,7 +27,7 @@ var assert = require('assert');\n  363   // more data continuously, but without triggering a nextTick\n  364   // warning or RangeError.\n  365   \n  366: -var Readable = require('stream').Readable;\n  367  +var Readable = require('../../').Readable;\n  368   \n  369   // throw an error if we trigger a nextTick warning.\n  370   process.throwDeprecation = true;\n  371: diff --git a/test/simple/test-stream-unshift-empty-chunk.js b/test/simple/test-stream-unshift-empty-chunk.js\n  372  index 0c96476..7827538 100644\n  373: --- a/test/simple/test-stream-unshift-empty-chunk.js\n  374: +++ b/test/simple/test-stream-unshift-empty-chunk.js\n  375  @@ -24,7 +24,7 @@ var assert = require('assert');\n  376   \n  377:  // This test verifies that stream.unshift(Buffer(0)) or \n  378:  // stream.unshift('') does not set state.reading=false.\n  379: -var Readable = require('stream').Readable;\n  380  +var Readable = require('../../').Readable;\n  381   \n  382   var r = new Readable();\n  383   var nChunks = 10;\n  384: diff --git a/test/simple/test-stream-unshift-read-race.js b/test/simple/test-stream-unshift-read-race.js\n  385  index 83fd9fa..17c18aa 100644\n  386: --- a/test/simple/test-stream-unshift-read-race.js\n  387: +++ b/test/simple/test-stream-unshift-read-race.js\n  388  @@ -29,7 +29,7 @@ var assert = require('assert');\n  389   // 3. push() after the EOF signaling null is an error.\n  390   // 4. _read() is not called after pushing the EOF null chunk.\n  391   \n  392: -var stream = require('stream');\n  393: +var stream = require('../../');\n  394   var hwm = 10;\n  395:  var r = stream.Readable({ highWaterMark: hwm });\n  396   var chunks = 10;\n  397  @@ -51,7 +51,14 @@ r._read = function(n) {\n  ...\n  411       if (fast) {\n  412         pos += n;\n  413: diff --git a/test/simple/test-stream-writev.js b/test/simple/test-stream-writev.js\n  414  index 5b49e6e..b5321f3 100644\n  415: --- a/test/simple/test-stream-writev.js\n  416: +++ b/test/simple/test-stream-writev.js\n  417  @@ -22,7 +22,7 @@\n  418   var common = require('../common');\n  419   var assert = require('assert');\n  420   \n  421: -var stream = require('stream');\n  422: +var stream = require('../../');\n  423   \n  424   var queue = [];\n  425   for (var decode = 0; decode < 2; decode++) {\n  426: diff --git a/test/simple/test-stream2-basic.js b/test/simple/test-stream2-basic.js\n  427  index 3814bf0..248c1be 100644\n  428: --- a/test/simple/test-stream2-basic.js\n  429: +++ b/test/simple/test-stream2-basic.js\n  430  @@ -21,7 +21,7 @@\n  431   \n  432   \n  433   var common = require('../common.js');\n  434: -var R = require('_stream_readable');\n  435: +var R = require('../../lib/_stream_readable');\n  436   var assert = require('assert');\n  437   \n  438   var util = require('util');\n  439: diff --git a/test/simple/test-stream2-compatibility.js b/test/simple/test-stream2-compatibility.js\n  440  index 6cdd4e9..f0fa84b 100644\n  441: --- a/test/simple/test-stream2-compatibility.js\n  442: +++ b/test/simple/test-stream2-compatibility.js\n  443  @@ -21,7 +21,7 @@\n  444   \n  445   \n  446   var common = require('../common.js');\n  447: -var R = require('_stream_readable');\n  448: +var R = require('../../lib/_stream_readable');\n  449   var assert = require('assert');\n  450   \n  451   var util = require('util');\n  452: diff --git a/test/simple/test-stream2-finish-pipe.js b/test/simple/test-stream2-finish-pipe.js\n  453  index 39b274f..006a19b 100644\n  454: --- a/test/simple/test-stream2-finish-pipe.js\n  455: +++ b/test/simple/test-stream2-finish-pipe.js\n  456  @@ -20,7 +20,7 @@\n  457   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  458   \n  459   var common = require('../common.js');\n  460: -var stream = require('stream');\n  461: +var stream = require('../../');\n  462   var Buffer = require('buffer').Buffer;\n  463   \n  464:  var r = new stream.Readable();\n  465: diff --git a/test/simple/test-stream2-fs.js b/test/simple/test-stream2-fs.js\n  466  deleted file mode 100644\n  467  index e162406..0000000\n  468: --- a/test/simple/test-stream2-fs.js\n  469  +++ /dev/null\n  470  @@ -1,72 +0,0 @@\n  ...\n  492  -\n  493  -var common = require('../common.js');\n  494: -var R = require('_stream_readable');\n  495  -var assert = require('assert');\n  496  -\n  497  -var fs = require('fs');\n  498: -var FSReadable = fs.ReadStream;\n  499  -\n  500  -var path = require('path');\n  ...\n  506  -\n  507  -var util = require('util');\n  508: -var Stream = require('stream');\n  509  -\n  510: -util.inherits(TestWriter, Stream);\n  511  -\n  512  -function TestWriter() {\n  513: -  Stream.apply(this);\n  514  -  this.buffer = [];\n  515  -  this.length = 0;\n  ...\n  541  -\n  542  -r.pipe(w);\n  543: diff --git a/test/simple/test-stream2-httpclient-response-end.js b/test/simple/test-stream2-httpclient-response-end.js\n  544  deleted file mode 100644\n  545  index 15cffc2..0000000\n  546: --- a/test/simple/test-stream2-httpclient-response-end.js\n  547  +++ /dev/null\n  548  @@ -1,52 +0,0 @@\n  ...\n  599  -});\n  600  -\n  601: diff --git a/test/simple/test-stream2-large-read-stall.js b/test/simple/test-stream2-large-read-stall.js\n  602  index 2fbfbca..667985b 100644\n  603: --- a/test/simple/test-stream2-large-read-stall.js\n  604: +++ b/test/simple/test-stream2-large-read-stall.js\n  605  @@ -30,7 +30,7 @@ var PUSHSIZE = 20;\n  606   var PUSHCOUNT = 1000;\n  607   var HWM = 50;\n  608   \n  609: -var Readable = require('stream').Readable;\n  610  +var Readable = require('../../').Readable;\n  611   var r = new Readable({\n  ...\n  658       setTimeout(push);\n  659   }\n  660: diff --git a/test/simple/test-stream2-objects.js b/test/simple/test-stream2-objects.js\n  661  index 3e6931d..ff47d89 100644\n  662: --- a/test/simple/test-stream2-objects.js\n  663: +++ b/test/simple/test-stream2-objects.js\n  664  @@ -21,8 +21,8 @@\n  665   \n  666   \n  667   var common = require('../common.js');\n  668: -var Readable = require('_stream_readable');\n  669: -var Writable = require('_stream_writable');\n  670: +var Readable = require('../../lib/_stream_readable');\n  671: +var Writable = require('../../lib/_stream_writable');\n  672   var assert = require('assert');\n  673   \n  674   // tiny node-tap lookalike.\n  675: diff --git a/test/simple/test-stream2-pipe-error-handling.js b/test/simple/test-stream2-pipe-error-handling.js\n  676  index cf7531c..e3f3e4e 100644\n  677: --- a/test/simple/test-stream2-pipe-error-handling.js\n  678: +++ b/test/simple/test-stream2-pipe-error-handling.js\n  679  @@ -21,7 +21,7 @@\n  680   \n  681   var common = require('../common');\n  682   var assert = require('assert');\n  683: -var stream = require('stream');\n  684: +var stream = require('../../');\n  685   \n  686   (function testErrorListenerCatches() {\n  687     var count = 1000;\n  688: diff --git a/test/simple/test-stream2-pipe-error-once-listener.js b/test/simple/test-stream2-pipe-error-once-listener.js\n  689  index 5e8e3cb..53b2616 100755\n  690: --- a/test/simple/test-stream2-pipe-error-once-listener.js\n  691: +++ b/test/simple/test-stream2-pipe-error-once-listener.js\n  692  @@ -24,7 +24,7 @@ var common = require('../common.js');\n  693   var assert = require('assert');\n  694   \n  695   var util = require('util');\n  696: -var stream = require('stream');\n  697: +var stream = require('../../');\n  698   \n  699   \n  700   var Read = function() {\n  701: diff --git a/test/simple/test-stream2-push.js b/test/simple/test-stream2-push.js\n  702  index b63edc3..eb2b0e9 100644\n  703: --- a/test/simple/test-stream2-push.js\n  704: +++ b/test/simple/test-stream2-push.js\n  705  @@ -20,7 +20,7 @@\n  706   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  707   \n  708   var common = require('../common.js');\n  709: -var stream = require('stream');\n  710: +var stream = require('../../');\n  711:  var Readable = stream.Readable;\n  712:  var Writable = stream.Writable;\n  713   var assert = require('assert');\n  714: diff --git a/test/simple/test-stream2-read-sync-stack.js b/test/simple/test-stream2-read-sync-stack.js\n  715  index e8a7305..9740a47 100644\n  716: --- a/test/simple/test-stream2-read-sync-stack.js\n  717: +++ b/test/simple/test-stream2-read-sync-stack.js\n  718  @@ -21,7 +21,7 @@\n  719   \n  720   var common = require('../common');\n  721   var assert = require('assert');\n  722: -var Readable = require('stream').Readable;\n  723  +var Readable = require('../../').Readable;\n  724   var r = new Readable();\n  725   var N = 256 * 1024;\n  726   \n  727: diff --git a/test/simple/test-stream2-readable-empty-buffer-no-eof.js b/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  728  index cd30178..4b1659d 100644\n  729: --- a/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  730: +++ b/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  731  @@ -22,10 +22,9 @@\n  732   var common = require('../common');\n  733   var assert = require('assert');\n  734   \n  735: -var Readable = require('stream').Readable;\n  736  +var Readable = require('../../').Readable;\n  737   \n  ...\n  773  -  });\n  774  -}\n  775: diff --git a/test/simple/test-stream2-readable-from-list.js b/test/simple/test-stream2-readable-from-list.js\n  776  index 7c96ffe..04a96f5 100644\n  777: --- a/test/simple/test-stream2-readable-from-list.js\n  778: +++ b/test/simple/test-stream2-readable-from-list.js\n  779  @@ -21,7 +21,7 @@\n  780   \n  781   var assert = require('assert');\n  782   var common = require('../common.js');\n  783: -var fromList = require('_stream_readable')._fromList;\n  784: +var fromList = require('../../lib/_stream_readable')._fromList;\n  785   \n  786   // tiny node-tap lookalike.\n  787   var tests = [];\n  788: diff --git a/test/simple/test-stream2-readable-legacy-drain.js b/test/simple/test-stream2-readable-legacy-drain.js\n  789  index 675da8e..51fd3d5 100644\n  790: --- a/test/simple/test-stream2-readable-legacy-drain.js\n  791: +++ b/test/simple/test-stream2-readable-legacy-drain.js\n  792  @@ -22,7 +22,7 @@\n  793   var common = require('../common');\n  794   var assert = require('assert');\n  795   \n  796: -var Stream = require('stream');\n  797: +var Stream = require('../../');\n  798:  var Readable = Stream.Readable;\n  799   \n  800   var r = new Readable();\n  801: diff --git a/test/simple/test-stream2-readable-non-empty-end.js b/test/simple/test-stream2-readable-non-empty-end.js\n  802  index 7314ae7..c971898 100644\n  803: --- a/test/simple/test-stream2-readable-non-empty-end.js\n  804: +++ b/test/simple/test-stream2-readable-non-empty-end.js\n  805  @@ -21,7 +21,7 @@\n  806   \n  807   var assert = require('assert');\n  808   var common = require('../common.js');\n  809: -var Readable = require('_stream_readable');\n  810: +var Readable = require('../../lib/_stream_readable');\n  811   \n  812   var len = 0;\n  813   var chunks = new Array(10);\n  814: diff --git a/test/simple/test-stream2-readable-wrap-empty.js b/test/simple/test-stream2-readable-wrap-empty.js\n  815  index 2e5cf25..fd8a3dc 100644\n  816: --- a/test/simple/test-stream2-readable-wrap-empty.js\n  817: +++ b/test/simple/test-stream2-readable-wrap-empty.js\n  818  @@ -22,7 +22,7 @@\n  819   var common = require('../common');\n  820   var assert = require('assert');\n  821   \n  822: -var Readable = require('_stream_readable');\n  823: +var Readable = require('../../lib/_stream_readable');\n  824   var EE = require('events').EventEmitter;\n  825   \n  826:  var oldStream = new EE();\n  827: diff --git a/test/simple/test-stream2-readable-wrap.js b/test/simple/test-stream2-readable-wrap.js\n  828  index 90eea01..6b177f7 100644\n  829: --- a/test/simple/test-stream2-readable-wrap.js\n  830: +++ b/test/simple/test-stream2-readable-wrap.js\n  831  @@ -22,8 +22,8 @@\n  832   var common = require('../common');\n  833   var assert = require('assert');\n  834   \n  835: -var Readable = require('_stream_readable');\n  836: -var Writable = require('_stream_writable');\n  837: +var Readable = require('../../lib/_stream_readable');\n  838: +var Writable = require('../../lib/_stream_writable');\n  839   var EE = require('events').EventEmitter;\n  840   \n  841   var testRuns = 0, completedRuns = 0;\n  842: diff --git a/test/simple/test-stream2-set-encoding.js b/test/simple/test-stream2-set-encoding.js\n  843  index 5d2c32a..685531b 100644\n  844: --- a/test/simple/test-stream2-set-encoding.js\n  845: +++ b/test/simple/test-stream2-set-encoding.js\n  846  @@ -22,7 +22,7 @@\n  847   \n  848   var common = require('../common.js');\n  849   var assert = require('assert');\n  850: -var R = require('_stream_readable');\n  851: +var R = require('../../lib/_stream_readable');\n  852   var util = require('util');\n  853   \n  854   // tiny node-tap lookalike.\n  855: diff --git a/test/simple/test-stream2-transform.js b/test/simple/test-stream2-transform.js\n  856  index 9c9ddd8..a0cacc6 100644\n  857: --- a/test/simple/test-stream2-transform.js\n  858: +++ b/test/simple/test-stream2-transform.js\n  859  @@ -21,8 +21,8 @@\n  860   \n  861   var assert = require('assert');\n  862   var common = require('../common.js');\n  863: -var PassThrough = require('_stream_passthrough');\n  864: -var Transform = require('_stream_transform');\n  865  +var PassThrough = require('../../').PassThrough;\n  866  +var Transform = require('../../').Transform;\n  ...\n  868   // tiny node-tap lookalike.\n  869   var tests = [];\n  870: diff --git a/test/simple/test-stream2-unpipe-drain.js b/test/simple/test-stream2-unpipe-drain.js\n  871  index d66dc3c..365b327 100644\n  872: --- a/test/simple/test-stream2-unpipe-drain.js\n  873: +++ b/test/simple/test-stream2-unpipe-drain.js\n  874  @@ -22,7 +22,7 @@\n  875   \n  876   var common = require('../common.js');\n  877   var assert = require('assert');\n  878: -var stream = require('stream');\n  879: +var stream = require('../../');\n  880   var crypto = require('crypto');\n  881   \n  882   var util = require('util');\n  883: diff --git a/test/simple/test-stream2-unpipe-leak.js b/test/simple/test-stream2-unpipe-leak.js\n  884  index 99f8746..17c92ae 100644\n  885: --- a/test/simple/test-stream2-unpipe-leak.js\n  886: +++ b/test/simple/test-stream2-unpipe-leak.js\n  887  @@ -22,7 +22,7 @@\n  888   \n  889   var common = require('../common.js');\n  890   var assert = require('assert');\n  891: -var stream = require('stream');\n  892: +var stream = require('../../');\n  893   \n  894   var chunk = new Buffer('hallo');\n  895   \n  896: diff --git a/test/simple/test-stream2-writable.js b/test/simple/test-stream2-writable.js\n  897  index 704100c..209c3a6 100644\n  898: --- a/test/simple/test-stream2-writable.js\n  899: +++ b/test/simple/test-stream2-writable.js\n  900  @@ -20,8 +20,8 @@\n  901   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  902   \n  903   var common = require('../common.js');\n  904: -var W = require('_stream_writable');\n  905: -var D = require('_stream_duplex');\n  906  +var W = require('../../').Writable;\n  907  +var D = require('../../').Duplex;\n  ...\n  909   \n  910   var util = require('util');\n  911: diff --git a/test/simple/test-stream3-pause-then-read.js b/test/simple/test-stream3-pause-then-read.js\n  912  index b91bde3..2f72c15 100644\n  913: --- a/test/simple/test-stream3-pause-then-read.js\n  914: +++ b/test/simple/test-stream3-pause-then-read.js\n  915  @@ -22,7 +22,7 @@\n  916   var common = require('../common');\n  917   var assert = require('assert');\n  918   \n  919: -var stream = require('stream');\n  920: +var stream = require('../../');\n  921:  var Readable = stream.Readable;\n  922:  var Writable = stream.Writable;\n  923   \n  924  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\package.json:\n    1  {\n    2:   \"name\": \"readable-stream\",\n    3    \"version\": \"1.1.13\",\n    4:   \"description\": \"Streams3, a user-land copy of the stream library from Node.js v0.11.x\",\n    5    \"main\": \"readable.js\",\n    6    \"dependencies\": {\n    .\n   18    \"repository\": {\n   19      \"type\": \"git\",\n   20:     \"url\": \"git://github.com/isaacs/readable-stream\"\n   21    },\n   22    \"keywords\": [\n   23      \"readable\",\n   24:     \"stream\",\n   25      \"pipe\"\n   26    ],\n   ..\n   36    \"gitHead\": \"3b672fd7ae92acf5b4ffdbabf74b372a0a56b051\",\n   37    \"bugs\": {\n   38:     \"url\": \"https://github.com/isaacs/readable-stream/issues\"\n   39    },\n   40:   \"homepage\": \"https://github.com/isaacs/readable-stream\",\n   41:   \"_id\": \"readable-stream@1.1.13\",\n   42    \"_shasum\": \"f6eef764f514c89e2b9e23146a75ba106756d23e\",\n   43:   \"_from\": \"readable-stream@1.1.x\",\n   44    \"_npmVersion\": \"1.4.23\",\n   45    \"_npmUser\": {\n   ..\n   63    \"dist\": {\n   64      \"shasum\": \"f6eef764f514c89e2b9e23146a75ba106756d23e\",\n   65:     \"tarball\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-1.1.13.tgz\"\n   66    },\n   67    \"directories\": {},\n   68:   \"_resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.13.tgz\",\n   69    \"readme\": \"ERROR: No README data found!\"\n   70  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\passthrough.js:\n    1: module.exports = require(\"./lib/_stream_passthrough.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\readable.js:\n    1: exports = module.exports = require('./lib/_stream_readable.js');\n    2: exports.Stream = require('stream');\n    3  exports.Readable = exports;\n    4: exports.Writable = require('./lib/_stream_writable.js');\n    5: exports.Duplex = require('./lib/_stream_duplex.js');\n    6: exports.Transform = require('./lib/_stream_transform.js');\n    7: exports.PassThrough = require('./lib/_stream_passthrough.js');\n    8  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\README.md:\n    1: # readable-stream\n    2  \n    3: ***Node-core streams for userland***\n    4  \n    5: [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/)\n    6: [![NPM](https://nodei.co/npm-dl/readable-stream.png&months=6&height=3)](https://nodei.co/npm/readable-stream/)\n    7  \n    8: This package is a mirror of the Streams2 and Streams3 implementations in Node-core.\n    9  \n   10: If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core.\n   11  \n   12: **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12.\n   13  \n   14: **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`\n   15  \n   16  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\transform.js:\n    1: module.exports = require(\"./lib/_stream_transform.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\writable.js:\n    1: module.exports = require(\"./lib/_stream_writable.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\lib\\_stream_duplex.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a duplex stream is just a stream that is both readable and writable.\n   23  // Since JS doesn't have multiple prototypal inheritance, this class\n   24  // prototypally inherits from Readable, and then parasitically from\n   ..\n   41  /*</replacement>*/\n   42  \n   43: var Readable = require('./_stream_readable');\n   44: var Writable = require('./_stream_writable');\n   45  \n   46  util.inherits(Duplex, Readable);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\lib\\_stream_passthrough.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a passthrough stream.\n   23: // basically just the most minimal sort of Transform stream.\n   24  // Every written chunk gets output as-is.\n   25  \n   26  module.exports = PassThrough;\n   27  \n   28: var Transform = require('./_stream_transform');\n   29  \n   30  /*<replacement>*/\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\lib\\_stream_readable.js:\n   41  /*</replacement>*/\n   42  \n   43: var Stream = require('stream');\n   44  \n   45  /*<replacement>*/\n   ..\n   54  var debug = require('util');\n   55  if (debug && debug.debuglog) {\n   56:   debug = debug.debuglog('stream');\n   57  } else {\n   58    debug = function () {};\n   ..\n   61  \n   62  \n   63: util.inherits(Readable, Stream);\n   64  \n   65: function ReadableState(options, stream) {\n   66:   var Duplex = require('./_stream_duplex');\n   67  \n   68    options = options || {};\n   ..\n   99  \n  100  \n  101:   // object stream flag. Used to make read(n) ignore n and to\n  102    // make all the buffer merging and length checks go away\n  103    this.objectMode = !!options.objectMode;\n  104  \n  105:   if (stream instanceof Duplex)\n  106      this.objectMode = this.objectMode || !!options.readableObjectMode;\n  107  \n  ...\n  132  \n  133  function Readable(options) {\n  134:   var Duplex = require('./_stream_duplex');\n  135  \n  136    if (!(this instanceof Readable))\n  ...\n  142    this.readable = true;\n  143  \n  144:   Stream.call(this);\n  145  }\n  146  \n  ...\n  169  };\n  170  \n  171: function readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  172    var er = chunkInvalid(state, chunk);\n  173    if (er) {\n  174:     stream.emit('error', er);\n  175    } else if (util.isNullOrUndefined(chunk)) {\n  176      state.reading = false;\n  177      if (!state.ended)\n  178:       onEofChunk(stream, state);\n  179    } else if (state.objectMode || chunk && chunk.length > 0) {\n  180      if (state.ended && !addToFront) {\n  181:       var e = new Error('stream.push() after EOF');\n  182:       stream.emit('error', e);\n  183      } else if (state.endEmitted && addToFront) {\n  184:       var e = new Error('stream.unshift() after end event');\n  185:       stream.emit('error', e);\n  186      } else {\n  187        if (state.decoder && !addToFront && !encoding)\n  ...\n  193        // if we want the data now, just emit it.\n  194        if (state.flowing && state.length === 0 && !state.sync) {\n  195:         stream.emit('data', chunk);\n  196:         stream.read(0);\n  197        } else {\n  198          // update the buffer info.\n  ...\n  204  \n  205          if (state.needReadable)\n  206:           emitReadable(stream);\n  207        }\n  208  \n  209:       maybeReadMore(stream, state);\n  210      }\n  211    } else if (!addToFront) {\n  ...\n  326    // All the actual chunk generation logic needs to be\n  327    // *below* the call to _read.  The reason is that in certain\n  328:   // synthetic stream cases, such as passthrough streams, _read\n  329    // may be a completely synchronous operation which may change\n  330    // the state of the read buffer, providing enough data when\n  ...\n  338    // Note that this may be asynchronous, or synchronous.  Yes, it is\n  339    // deeply ugly to write APIs this way, but that still doesn't mean\n  340:   // that the Readable class should behave improperly, as streams are\n  341    // designed to be sync/async agnostic.\n  342    // Take note if the _read call is sync or async (ie, if the read call\n  ...\n  420  \n  421  \n  422: function onEofChunk(stream, state) {\n  423    if (state.decoder && !state.ended) {\n  424      var chunk = state.decoder.end();\n  ...\n  431  \n  432    // emit 'readable' now to make sure it gets picked up.\n  433:   emitReadable(stream);\n  434  }\n  435  \n  ...\n  437  // another read() call => stack overflow.  This way, it might trigger\n  438  // a nextTick recursion warning, but that's not so bad.\n  439: function emitReadable(stream) {\n  440:   var state = stream._readableState;\n  441    state.needReadable = false;\n  442    if (!state.emittedReadable) {\n  ...\n  445      if (state.sync)\n  446        process.nextTick(function() {\n  447:         emitReadable_(stream);\n  448        });\n  449      else\n  450:       emitReadable_(stream);\n  451    }\n  452  }\n  453  \n  454: function emitReadable_(stream) {\n  455    debug('emit readable');\n  456:   stream.emit('readable');\n  457:   flow(stream);\n  458  }\n  459  \n  ...\n  465  // However, if we're not ended, or reading, and the length < hwm,\n  466  // then go ahead and try to read some more preemptively.\n  467: function maybeReadMore(stream, state) {\n  468    if (!state.readingMore) {\n  469      state.readingMore = true;\n  470      process.nextTick(function() {\n  471:       maybeReadMore_(stream, state);\n  472      });\n  473    }\n  474  }\n  475  \n  476: function maybeReadMore_(stream, state) {\n  477    var len = state.length;\n  478    while (!state.reading && !state.flowing && !state.ended &&\n  479           state.length < state.highWaterMark) {\n  480      debug('maybeReadMore read 0');\n  481:     stream.read(0);\n  482      if (len === state.length)\n  483        // didn't get any data, stop spinning.\n  ...\n  491  // abstract method.  to be overridden in specific implementation classes.\n  492  // call cb(er, data) where data is <= n in length.\n  493: // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n  494  // arbitrary, and perhaps not very meaningful.\n  495  Readable.prototype._read = function(n) {\n  ...\n  701  // Ensure readable listeners eventually get something\n  702  Readable.prototype.on = function(ev, fn) {\n  703:   var res = Stream.prototype.on.call(this, ev, fn);\n  704  \n  705    // If listening to data, and it has not explicitly been paused,\n  ...\n  731  Readable.prototype.addListener = Readable.prototype.on;\n  732  \n  733: // pause() and resume() are remnants of the legacy readable stream API\n  734  // If the user uses them, then switch into old mode.\n  735  Readable.prototype.resume = function() {\n  ...\n  747  };\n  748  \n  749: function resume(stream, state) {\n  750    if (!state.resumeScheduled) {\n  751      state.resumeScheduled = true;\n  752      process.nextTick(function() {\n  753:       resume_(stream, state);\n  754      });\n  755    }\n  756  }\n  757  \n  758: function resume_(stream, state) {\n  759    state.resumeScheduled = false;\n  760:   stream.emit('resume');\n  761:   flow(stream);\n  762    if (state.flowing && !state.reading)\n  763:     stream.read(0);\n  764  }\n  765  \n  ...\n  774  };\n  775  \n  776: function flow(stream) {\n  777:   var state = stream._readableState;\n  778    debug('flow', state.flowing);\n  779    if (state.flowing) {\n  780      do {\n  781:       var chunk = stream.read();\n  782      } while (null !== chunk && state.flowing);\n  783    }\n  784  }\n  785  \n  786: // wrap an old-style stream as the async data source.\n  787: // This is *not* part of the readable stream interface.\n  788  // It is an ugly unfortunate mess of history.\n  789: Readable.prototype.wrap = function(stream) {\n  790    var state = this._readableState;\n  791    var paused = false;\n  792  \n  793    var self = this;\n  794:   stream.on('end', function() {\n  795      debug('wrapped end');\n  796      if (state.decoder && !state.ended) {\n  ...\n  803    });\n  804  \n  805:   stream.on('data', function(chunk) {\n  806      debug('wrapped data');\n  807      if (state.decoder)\n  ...\n  813      if (!ret) {\n  814        paused = true;\n  815:       stream.pause();\n  816      }\n  817    });\n  ...\n  819    // proxy all the other methods.\n  820    // important when wrapping filters and duplexes.\n  821:   for (var i in stream) {\n  822:     if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n  823        this[i] = function(method) { return function() {\n  824:         return stream[method].apply(stream, arguments);\n  825        }}(i);\n  826      }\n  ...\n  830    var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  831    forEach(events, function(ev) {\n  832:     stream.on(ev, self.emit.bind(self, ev));\n  833    });\n  834  \n  835    // when we try to consume some more bytes, simply unpause the\n  836:   // underlying stream.\n  837    self._read = function(n) {\n  838      debug('wrapped _read', n);\n  839      if (paused) {\n  840        paused = false;\n  841:       stream.resume();\n  842      }\n  843    };\n  ...\n  917  }\n  918  \n  919: function endReadable(stream) {\n  920:   var state = stream._readableState;\n  921  \n  922    // If we get here before consuming all the bytes, then that is a\n  923    // bug in node.  Should never happen.\n  924    if (state.length > 0)\n  925:     throw new Error('endReadable called on non-empty stream');\n  926  \n  927    if (!state.endEmitted) {\n  ...\n  931        if (!state.endEmitted && state.length === 0) {\n  932          state.endEmitted = true;\n  933:         stream.readable = false;\n  934:         stream.emit('end');\n  935        }\n  936      });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\lib\\_stream_transform.js:\n   21  \n   22  \n   23: // a transform stream is a readable/writable stream where you do\n   24  // something with the data.  Sometimes it's called a \"filter\",\n   25  // but that's not a great name for it, since that implies a thing where\n   ..\n   29  // While the output is causally related to the input, it's not a\n   30  // necessarily symmetric or synchronous transformation.  For example,\n   31: // a zlib stream might take multiple plain-text writes(), and then\n   32  // emit a single compressed chunk some time in the future.\n   33  //\n   34  // Here's how this works:\n   35  //\n   36: // The Transform stream has all the aspects of the readable and writable\n   37: // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n   38  // internally, and returns false if there's a lot of pending writes\n   39  // buffered up.  When you call read(), that calls _read(n) until\n   40  // there's enough pending readable data buffered up.\n   41  //\n   42: // In a transform stream, the written data is placed in a buffer.  When\n   43  // _read(n) is called, it transforms the queued up data, calling the\n   44  // buffered _write cb's as it consumes chunks.  If consuming a single\n   ..\n   50  // since _read has to be called to start processing a new chunk.  However,\n   51  // a pathological inflate type of transform can cause excessive buffering\n   52: // here.  For example, imagine a stream where every byte of input is\n   53  // interpreted as an integer from 0-255, and then results in that many\n   54  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n   ..\n   65  module.exports = Transform;\n   66  \n   67: var Duplex = require('./_stream_duplex');\n   68  \n   69  /*<replacement>*/\n   ..\n   75  \n   76  \n   77: function TransformState(options, stream) {\n   78    this.afterTransform = function(er, data) {\n   79:     return afterTransform(stream, er, data);\n   80    };\n   81  \n   ..\n   86  }\n   87  \n   88: function afterTransform(stream, er, data) {\n   89:   var ts = stream._transformState;\n   90    ts.transforming = false;\n   91  \n   ..\n   93  \n   94    if (!cb)\n   95:     return stream.emit('error', new Error('no writecb in Transform class'));\n   96  \n   97    ts.writechunk = null;\n   ..\n   99  \n  100    if (!util.isNullOrUndefined(data))\n  101:     stream.push(data);\n  102  \n  103    if (cb)\n  104      cb(er);\n  105  \n  106:   var rs = stream._readableState;\n  107    rs.reading = false;\n  108    if (rs.needReadable || rs.length < rs.highWaterMark) {\n  109:     stream._read(rs.highWaterMark);\n  110    }\n  111  }\n  ...\n  121  \n  122    // when the writable side finishes, then flush out anything remaining.\n  123:   var stream = this;\n  124  \n  125    // start out asking for a readable event once data is transformed.\n  ...\n  134      if (util.isFunction(this._flush))\n  135        this._flush(function(er) {\n  136:         done(stream, er);\n  137        });\n  138      else\n  139:       done(stream);\n  140    });\n  141  }\n  ...\n  191  \n  192  \n  193: function done(stream, er) {\n  194    if (er)\n  195:     return stream.emit('error', er);\n  196  \n  197    // if there's nothing in the write buffer, then that means\n  198    // that nothing more will ever be provided\n  199:   var ws = stream._writableState;\n  200:   var ts = stream._transformState;\n  201  \n  202    if (ws.length)\n  ...\n  206      throw new Error('calling transform done when still transforming');\n  207  \n  208:   return stream.push(null);\n  209  }\n  210  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\lib\\_stream_writable.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // A bit simpler than readable streams.\n   23  // Implement an async ._write(chunk, cb), and it'll handle all\n   24  // the drain event emission and buffering.\n   ..\n   38  /*</replacement>*/\n   39  \n   40: var Stream = require('stream');\n   41  \n   42: util.inherits(Writable, Stream);\n   43  \n   44  function WriteReq(chunk, encoding, cb) {\n   ..\n   48  }\n   49  \n   50: function WritableState(options, stream) {\n   51:   var Duplex = require('./_stream_duplex');\n   52  \n   53    options = options || {};\n   ..\n   60    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n   61  \n   62:   // object stream flag to indicate whether or not this stream\n   63    // contains buffers or objects.\n   64    this.objectMode = !!options.objectMode;\n   65  \n   66:   if (stream instanceof Duplex)\n   67      this.objectMode = this.objectMode || !!options.writableObjectMode;\n   68  \n   ..\n   79  \n   80    // should we decode strings into buffers before passing to _write?\n   81:   // this is here so that some node-core streams can optimize string\n   82    // handling at a lower level.\n   83    var noDecode = options.decodeStrings === false;\n   ..\n  113    // the callback that's passed to _write(chunk,cb)\n  114    this.onwrite = function(er) {\n  115:     onwrite(stream, er);\n  116    };\n  117  \n  ...\n  129  \n  130    // emit prefinish if the only thing we're waiting for is _write cbs\n  131:   // This is relevant for synchronous Transform streams\n  132    this.prefinished = false;\n  133  \n  ...\n  137  \n  138  function Writable(options) {\n  139:   var Duplex = require('./_stream_duplex');\n  140  \n  141    // Writable ctor is applied to Duplexes, though they're not\n  ...\n  149    this.writable = true;\n  150  \n  151:   Stream.call(this);\n  152  }\n  153  \n  154: // Otherwise people can pipe Writable streams, which is just wrong.\n  155  Writable.prototype.pipe = function() {\n  156    this.emit('error', new Error('Cannot pipe. Not readable.'));\n  ...\n  158  \n  159  \n  160: function writeAfterEnd(stream, state, cb) {\n  161    var er = new Error('write after end');\n  162    // TODO: defer error events consistently everywhere, not just the cb\n  163:   stream.emit('error', er);\n  164    process.nextTick(function() {\n  165      cb(er);\n  ...\n  169  // If we get something that is not a buffer, string, null, or undefined,\n  170  // and we're not in objectMode, then that's an error.\n  171: // Otherwise stream chunks are all considered to be of length=1, and the\n  172  // watermarks determine how many objects to keep in the buffer, rather than\n  173  // how many bytes or characters.\n  174: function validChunk(stream, state, chunk, cb) {\n  175    var valid = true;\n  176    if (!util.isBuffer(chunk) &&\n  ...\n  179        !state.objectMode) {\n  180      var er = new TypeError('Invalid non-string/buffer chunk');\n  181:     stream.emit('error', er);\n  182      process.nextTick(function() {\n  183        cb(er);\n  ...\n  248  // in the queue, and wait our turn.  Otherwise, call _write\n  249  // If we return false, then we need a drain event, so set that flag.\n  250: function writeOrBuffer(stream, state, chunk, encoding, cb) {\n  251    chunk = decodeChunk(state, chunk, encoding);\n  252    if (util.isBuffer(chunk))\n  ...\n  264      state.buffer.push(new WriteReq(chunk, encoding, cb));\n  265    else\n  266:     doWrite(stream, state, false, len, chunk, encoding, cb);\n  267  \n  268    return ret;\n  269  }\n  270  \n  271: function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  272    state.writelen = len;\n  273    state.writecb = cb;\n  ...\n  275    state.sync = true;\n  276    if (writev)\n  277:     stream._writev(chunk, state.onwrite);\n  278    else\n  279:     stream._write(chunk, encoding, state.onwrite);\n  280    state.sync = false;\n  281  }\n  282  \n  283: function onwriteError(stream, state, sync, er, cb) {\n  284    if (sync)\n  285      process.nextTick(function() {\n  ...\n  292    }\n  293  \n  294:   stream._writableState.errorEmitted = true;\n  295:   stream.emit('error', er);\n  296  }\n  297  \n  ...\n  303  }\n  304  \n  305: function onwrite(stream, er) {\n  306:   var state = stream._writableState;\n  307    var sync = state.sync;\n  308    var cb = state.writecb;\n  ...\n  311  \n  312    if (er)\n  313:     onwriteError(stream, state, sync, er, cb);\n  314    else {\n  315      // Check if we're actually ready to finish, but don't emit yet\n  316:     var finished = needFinish(stream, state);\n  317  \n  318      if (!finished &&\n  ...\n  320          !state.bufferProcessing &&\n  321          state.buffer.length) {\n  322:       clearBuffer(stream, state);\n  323      }\n  324  \n  325      if (sync) {\n  326        process.nextTick(function() {\n  327:         afterWrite(stream, state, finished, cb);\n  328        });\n  329      } else {\n  330:       afterWrite(stream, state, finished, cb);\n  331      }\n  332    }\n  333  }\n  334  \n  335: function afterWrite(stream, state, finished, cb) {\n  336    if (!finished)\n  337:     onwriteDrain(stream, state);\n  338    state.pendingcb--;\n  339    cb();\n  340:   finishMaybe(stream, state);\n  341  }\n  342  \n  ...\n  344  // emit 'drain' before the write() consumer gets the 'false' return\n  345  // value, and has a chance to attach a 'drain' listener.\n  346: function onwriteDrain(stream, state) {\n  347    if (state.length === 0 && state.needDrain) {\n  348      state.needDrain = false;\n  349:     stream.emit('drain');\n  350    }\n  351  }\n  ...\n  353  \n  354  // if there's something in the buffer waiting, then process it\n  355: function clearBuffer(stream, state) {\n  356    state.bufferProcessing = true;\n  357  \n  358:   if (stream._writev && state.buffer.length > 1) {\n  359      // Fast case, write everything using _writev()\n  360      var cbs = [];\n  ...\n  365      // TODO(isaacs) clean this up\n  366      state.pendingcb++;\n  367:     doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n  368        for (var i = 0; i < cbs.length; i++) {\n  369          state.pendingcb--;\n  ...\n  383        var len = state.objectMode ? 1 : chunk.length;\n  384  \n  385:       doWrite(stream, state, false, len, chunk, encoding, cb);\n  386  \n  387        // if we didn't call the onwrite immediately, then\n  ...\n  438  \n  439  \n  440: function needFinish(stream, state) {\n  441    return (state.ending &&\n  442            state.length === 0 &&\n  ...\n  445  }\n  446  \n  447: function prefinish(stream, state) {\n  448    if (!state.prefinished) {\n  449      state.prefinished = true;\n  450:     stream.emit('prefinish');\n  451    }\n  452  }\n  453  \n  454: function finishMaybe(stream, state) {\n  455:   var need = needFinish(stream, state);\n  456    if (need) {\n  457      if (state.pendingcb === 0) {\n  458:       prefinish(stream, state);\n  459        state.finished = true;\n  460:       stream.emit('finish');\n  461      } else\n  462:       prefinish(stream, state);\n  463    }\n  464    return need;\n  465  }\n  466  \n  467: function endWritable(stream, state, cb) {\n  468    state.ending = true;\n  469:   finishMaybe(stream, state);\n  470    if (cb) {\n  471      if (state.finished)\n  472        process.nextTick(cb);\n  473      else\n  474:       stream.once('finish', cb);\n  475    }\n  476    state.ended = true;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\node_modules\\readable-stream\\node_modules\\core-util-is\\float.patch:\n  554  -\n  555  -\n  556: -exports.pump = exports.deprecate(function(readStream, writeStream, callback) {\n  557  -  var callbackCalled = false;\n  558  -\n  ...\n  564  -  }\n  565  -\n  566: -  readStream.addListener('data', function(chunk) {\n  567: -    if (writeStream.write(chunk) === false) readStream.pause();\n  568  -  });\n  569  -\n  570: -  writeStream.addListener('drain', function() {\n  571: -    readStream.resume();\n  572  -  });\n  573  -\n  574: -  readStream.addListener('end', function() {\n  575: -    writeStream.end();\n  576  -  });\n  577  -\n  578: -  readStream.addListener('close', function() {\n  579  -    call();\n  580  -  });\n  581  -\n  582: -  readStream.addListener('error', function(err) {\n  583: -    writeStream.end();\n  584  -    call(err);\n  585  -  });\n  586  -\n  587: -  writeStream.addListener('error', function(err) {\n  588: -    readStream.destroy();\n  589  -    call(err);\n  590  -  });\n  591: -}, 'util.pump(): Use readableStream.pipe() instead');\n  592  -\n  593  -\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-busboy\\node_modules\\busboy\\test\\test-types-multipart.js:\n   21         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n   22         'Content-Disposition: form-data; name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n   23:        'Content-Type: application/octet-stream',\n   24         '',\nn   26         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n   27         'Content-Disposition: form-data; name=\"upload_file_1\"; filename=\"1k_b.dat\"',\n   28:        'Content-Type: application/octet-stream',\n   29         '',\nn   ..\n   36        ['field', 'file_name_0', 'super alpha file', false, false],\n   37        ['field', 'file_name_1', 'super beta file', false, false],\n   38:       ['file', 'upload_file_0', 1023, 0, '1k_a.dat', '7bit', 'application/octet-stream'],\n   39:       ['file', 'upload_file_1', 1023, 0, '1k_b.dat', '7bit', 'application/octet-stream']\n   40      ],\n   41      what: 'Fields and files'\n   ..\n   79         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n   80         'Content-Disposition: form-data; name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n   81:        'Content-Type: application/octet-stream',\n   82         '',\n   83         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n   ..\n   92      expected: [\n   93        ['field', 'file_name_0', 'super', false, true],\n   94:       ['file', 'upload_file_0', 13, 2, '1k_a.dat', '7bit', 'application/octet-stream']\n   95      ],\n   96      what: 'Fields and files (limits)'\n   ..\n  103         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  104         'Content-Disposition: form-data; name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n  105:        'Content-Type: application/octet-stream',\n  106         '',\n  107         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  ...\n  129         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  130         'Content-Disposition: form-data; name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n  131:        'Content-Type: application/octet-stream',\n  132         '',\nn  134         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  135         'Content-Disposition: form-data; name=\"upload_file_1\"; filename=\"1k_b.dat\"',\n  136:        'Content-Type: application/octet-stream',\n  137         '',\nn  ...\n  151        ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  152         'Content-Disposition: form-data; name=\"upload_file_0\"; filename=\"/tmp/1k_a.dat\"',\n  153:        'Content-Type: application/octet-stream',\n  154         '',\n  155         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  156         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  157         'Content-Disposition: form-data; name=\"upload_file_1\"; filename=\"C:\\\\files\\\\1k_b.dat\"',\n  158:        'Content-Type: application/octet-stream',\n  159         '',\n  160         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  161         '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  162         'Content-Disposition: form-data; name=\"upload_file_2\"; filename=\"relative/1k_c.dat\"',\n  163:        'Content-Type: application/octet-stream',\n  164         '',\n  165         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  ...\n  169      boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n  170      expected: [\n  171:       ['file', 'upload_file_0', 26, 0, '1k_a.dat', '7bit', 'application/octet-stream'],\n  172:       ['file', 'upload_file_1', 26, 0, '1k_b.dat', '7bit', 'application/octet-stream'],\n  173:       ['file', 'upload_file_2', 26, 0, '1k_c.dat', '7bit', 'application/octet-stream']\n  174      ],\n  175      what: 'Files with filenames containing paths'\n  ...\n  217    }\n  218    if (v.events === undefined || v.events.indexOf('file') > -1) {\n  219:     busboy.on('file', function(fieldname, stream, filename, encoding, mimeType) {\n  220        var nb = 0,\n  221            info = ['file',\n  ...\n  227                    mimeType];\n  228        results.push(info);\n  229:       stream.on('data', function(d) {\n  230          nb += d.length;\n  231        }).on('limit', function() {\n  ...\n  233        }).on('end', function() {\n  234          info[2] = nb;\n  235:         if (stream.truncated)\n  236            ++info[3];\n  237        });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\CHANGELOG.md:\n   99   * fix assertion crash when client aborts an invalid request\n  100   * (>=v0.10 only) unpipe the request when an error occurs to save resources.\n  101:  * update readable-stream to ~1.1.9\n  102   * fix assertion crash when EMFILE occurrs\n  103   * (no more assertions - only 'error' events)\n  ...\n  170  * Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\n  171  * Documentation improvements (Sven Lito, Andre Azevedo)\n  172: * Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\n  173  * Use os.tmpDir() to get tmp directory (Andrew Kelley)\n  174  * Improve package.json (Andrew Kelley, Sven Lito)\n  ...\n  184  ### v1.0.10\n  185  \n  186: * Make parts to be proper Streams (Matt Robenolt)\n  187  \n  188  ### v1.0.9\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\index.js:\n    1  exports.Form = Form;\n    2  \n    3: var stream = require('readable-stream')\n    4    , util = require('util')\n    5    , fs = require('fs')\n    .\n    8    , os = require('os')\n    9    , StringDecoder = require('string_decoder').StringDecoder\n   10:   , StreamCounter = require('stream-counter')\n   11  \n   12  var START = 0\n   ..\n   37  var LAST_BOUNDARY_SUFFIX_LEN = 4; // --\\r\\n\n   38  \n   39: util.inherits(Form, stream.Writable);\n   40  function Form(options) {\n   41    var self = this;\n   42:   stream.Writable.call(self);\n   43  \n   44    options = options || {};\n   ..\n  462  Form.prototype.onParsePartData = function(b) {\n  463    if (this.partTransferEncoding === 'base64') {\n  464:     this.backpressure = ! this.destStream.write(b.toString('ascii'), 'base64');\n  465    } else {\n  466:     this.backpressure = ! this.destStream.write(b);\n  467    }\n  468  }\n  469  \n  470  Form.prototype.onParsePartEnd = function() {\n  471:   if (this.destStream) {\n  472      flushWriteCbs(this);\n  473:     var s = this.destStream;\n  474      process.nextTick(function() {\n  475        s.end();\n  ...\n  498    }\n  499  \n  500:   self.destStream = new stream.PassThrough();\n  501:   self.destStream.on('drain', function() {\n  502      flushWriteCbs(self);\n  503    });\n  504:   self.destStream.headers = self.partHeaders;\n  505:   self.destStream.name = self.partName;\n  506:   self.destStream.filename = self.partFilename;\n  507:   self.destStream.byteOffset = self.bytesReceived + offset;\n  508:   var partContentLength = self.destStream.headers['content-length'];\n  509:   self.destStream.byteCount = partContentLength ? parseInt(partContentLength, 10) :\n  510:     self.bytesExpected ? (self.bytesExpected - self.destStream.byteOffset -\n  511        self.boundary.length - LAST_BOUNDARY_SUFFIX_LEN) :\n  512      undefined;\n  513  \n  514:   self.emit('part', self.destStream);\n  515:   if (self.destStream.filename == null && self.autoFields) {\n  516:     handleField(self, self.destStream);\n  517:   } else if (self.destStream.filename != null && self.autoFiles) {\n  518:     handleFile(self, self.destStream);\n  519    } else {\n  520      beginFlush(self);\n  521:     self.destStream.on('end', function(){\n  522        endFlush(self);\n  523      });\n  ...\n  570  }\n  571  \n  572: function handleFile(self, fileStream) {\n  573    if (self.error) return;\n  574    var file = {\n  575:     fieldName: fileStream.name,\n  576:     originalFilename: fileStream.filename,\n  577:     path: uploadPath(self.uploadDir, fileStream.filename),\n  578:     headers: fileStream.headers,\n  579    };\n  580:   beginFlush(self); // flush to write stream\n  581:   file.ws = fs.createWriteStream(file.path);\n  582    self.openedFiles.push(file);\n  583:   fileStream.pipe(file.ws);\n  584:   var counter = new StreamCounter();\n  585    var seenBytes = 0;\n  586:   fileStream.pipe(counter);\n  587:   var hashWorkaroundStream\n  588      , hash = null;\n  589    if (self.hash) {\n  590:     // workaround stream because https://github.com/joyent/node/issues/5216\n  591:     hashWorkaroundStream = stream.Writable();\n  592      hash = crypto.createHash(self.hash);\n  593:     hashWorkaroundStream._write = function(buffer, encoding, callback) {\n  594        hash.update(buffer);\n  595        callback();\n  596      };\n  597:     fileStream.pipe(hashWorkaroundStream);\n  598    }\n  599    counter.on('progress', function() {\n  ...\n  602      self.totalFileSize += deltaBytes;\n  603      if (self.totalFileSize > self.maxFilesSize) {\n  604:       if (hashWorkaroundStream) fileStream.unpipe(hashWorkaroundStream);\n  605:       fileStream.unpipe(counter);\n  606:       fileStream.unpipe(file.ws);\n  607        self.handleError(new Error(\"maxFilesSize \" + self.maxFilesSize + \" exceeded\"));\n  608      }\n  ...\n  614      if (hash) file.hash = hash.digest('hex');\n  615      file.size = counter.bytes;\n  616:     self.emit('file', fileStream.name, file);\n  617      endFlush(self);\n  618    });\n  619:   beginFlush(self); // flush from file stream\n  620:   fileStream.on('end', function(){\n  621      endFlush(self);\n  622    });\n  623  }\n  624  \n  625: function handleField(self, fieldStream) {\n  626    var value = '';\n  627    var decoder = new StringDecoder(self.encoding);\n  628  \n  629    beginFlush(self);\n  630:   fieldStream.on('readable', function() {\n  631:     var buffer = fieldStream.read();\n  632      if (!buffer) return;\n  633  \n  ...\n  640    });\n  641  \n  642:   fieldStream.on('end', function() {\n  643:     self.emit('field', fieldStream.name, value);\n  644      endFlush(self);\n  645    });\n  ...\n  651    self.partFilename = null;\n  652    self.partTransferEncoding = 'binary';\n  653:   self.destStream = null;\n  654  \n  655    self.headerFieldDecoder = new StringDecoder(self.encoding);\n  ...\n  679        self.onParsePartEnd();\n  680      } else if (self.state !== END) {\n  681:       self.handleError(new Error('stream ended unexpectedly'));\n  682      }\n  683      self.finished = true;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\package.json:\n    2    \"name\": \"multiparty\",\n    3    \"version\": \"3.3.2\",\n    4:   \"description\": \"multipart/form-data parser which supports streaming\",\n    5    \"repository\": {\n    6      \"type\": \"git\",\n    .\n   11      \"upload\",\n   12      \"formidable\",\n   13:     \"stream\",\n   14      \"s3\"\n   15    ],\n   ..\n   29    \"license\": \"MIT\",\n   30    \"dependencies\": {\n   31:     \"readable-stream\": \"~1.1.9\",\n   32:     \"stream-counter\": \"~0.2.0\"\n   33    },\n   34    \"gitHead\": \"96e1b70c7a9844689f85ba56e1c4437240ae58ea\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\README.md:\n    9  ### Why the fork?\n   10  \n   11:  * This module uses the Node.js v0.10 streams properly, *even in Node.js v0.8*\n   12   * It will not create a temp file for you unless you want it to.\n   13   * Counts bytes and does math to help you figure out the `Content-Length` of\n   14     each part.\n   15:  * You can easily stream uploads to s3 with\n   16     [knox](https://github.com/LearnBoost/knox), for [example](examples/s3.js).\n   17   * Less bugs. This code is simpler, has all deprecated functionality removed,\n   18:    has cleaner tests, and does not try to do anything beyond multipart stream\n   19     parsing.\n   20  \n   ..\n  188  \n  189  Emitted when a part is encountered in the request. `part` is a\n  190: `ReadableStream`. It also has the following properties:\n  191  \n  192   * `headers` - the headers for this part. For example, you may be interested\n  ...\n  217  **By default multiparty will not touch your hard drive.** But if you add this\n  218  listener, multiparty automatically sets `form.autoFiles` to `true` and will\n  219: stream uploads to disk for you. \n  220  \n  221  **The max bytes accepted per request can be specified with `maxFilesSize`.**\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\duplex.js:\n    1: module.exports = require(\"./lib/_stream_duplex.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\float.patch:\n    1: diff --git a/lib/_stream_duplex.js b/lib/_stream_duplex.js\n    2  index c5a741c..a2e0d8e 100644\n    3: --- a/lib/_stream_duplex.js\n    4: +++ b/lib/_stream_duplex.js\n    5  @@ -26,8 +26,8 @@\n    6   \n    7   module.exports = Duplex;\n    8   var util = require('util');\n    9: -var Readable = require('_stream_readable');\n   10: -var Writable = require('_stream_writable');\n   11: +var Readable = require('./_stream_readable');\n   12: +var Writable = require('./_stream_writable');\n   13   \n   14   util.inherits(Duplex, Readable);\n   15   \n   16: diff --git a/lib/_stream_passthrough.js b/lib/_stream_passthrough.js\n   17  index a5e9864..330c247 100644\n   18: --- a/lib/_stream_passthrough.js\n   19: +++ b/lib/_stream_passthrough.js\n   20  @@ -25,7 +25,7 @@\n   21   \n   22   module.exports = PassThrough;\n   23   \n   24: -var Transform = require('_stream_transform');\n   25: +var Transform = require('./_stream_transform');\n   26   var util = require('util');\n   27   util.inherits(PassThrough, Transform);\n   28   \n   29: diff --git a/lib/_stream_readable.js b/lib/_stream_readable.js\n   30  index 0c3fe3e..90a8298 100644\n   31: --- a/lib/_stream_readable.js\n   32: +++ b/lib/_stream_readable.js\n   33  @@ -23,10 +23,34 @@ module.exports = Readable;\n   34   Readable.ReadableState = ReadableState;\n   ..\n   46  +};\n   47  +\n   48:  var Stream = require('stream');\n   49   var util = require('util');\n   50  +if (!util.isUndefined) {\n   ..\n   55  +}\n   56   var StringDecoder;\n   57: -var debug = util.debuglog('stream');\n   58  +var debug;\n   59  +if (util.debuglog)\n   60: +  debug = util.debuglog('stream');\n   61  +else try {\n   62: +  debug = require('debuglog')('stream');\n   63  +} catch (er) {\n   64  +  debug = function() {};\n   65  +}\n   66   \n   67:  util.inherits(Readable, Stream);\n   68   \n   69  @@ -380,7 +404,7 @@ function chunkInvalid(state, chunk) {\n   70   \n   71   \n   72:  function onEofChunk(stream, state) {\n   73  -  if (state.decoder && !state.ended) {\n   74  +  if (state.decoder && !state.ended && state.decoder.end) {\n   ..\n   76       if (chunk && chunk.length) {\n   77         state.buffer.push(chunk);\n   78: diff --git a/lib/_stream_transform.js b/lib/_stream_transform.js\n   79  index b1f9fcc..b0caf57 100644\n   80: --- a/lib/_stream_transform.js\n   81: +++ b/lib/_stream_transform.js\n   82  @@ -64,8 +64,14 @@\n   83   \n   84   module.exports = Transform;\n   85   \n   86: -var Duplex = require('_stream_duplex');\n   87: +var Duplex = require('./_stream_duplex');\n   88   var util = require('util');\n   89  +if (!util.isUndefined) {\n   ..\n   96   \n   97   \n   98: diff --git a/lib/_stream_writable.js b/lib/_stream_writable.js\n   99  index ba2e920..f49288b 100644\n  100: --- a/lib/_stream_writable.js\n  101: +++ b/lib/_stream_writable.js\n  102  @@ -27,6 +27,12 @@ module.exports = Writable;\n  103   Writable.WritableState = WritableState;\n  ...\n  110  +  }\n  111  +}\n  112:  var Stream = require('stream');\n  113   \n  114:  util.inherits(Writable, Stream);\n  115: @@ -119,7 +125,7 @@ function WritableState(options, stream) {\n  116   function Writable(options) {\n  117     // Writable ctor is applied to Duplexes, though they're not\n  118     // instanceof Writable, they're instanceof Readable.\n  119: -  if (!(this instanceof Writable) && !(this instanceof Stream.Duplex))\n  120: +  if (!(this instanceof Writable) && !(this instanceof require('./_stream_duplex')))\n  121       return new Writable(options);\n  122   \n  123     this._writableState = new WritableState(options, this);\n  124: diff --git a/test/simple/test-stream-big-push.js b/test/simple/test-stream-big-push.js\n  125  index e3787e4..8cd2127 100644\n  126: --- a/test/simple/test-stream-big-push.js\n  127: +++ b/test/simple/test-stream-big-push.js\n  128  @@ -21,7 +21,7 @@\n  129   \n  130   var common = require('../common');\n  131   var assert = require('assert');\n  132: -var stream = require('stream');\n  133: +var stream = require('../../');\n  134   var str = 'asdfasdfasdfasdfasdf';\n  135   \n  136:  var r = new stream.Readable({\n  137: diff --git a/test/simple/test-stream-end-paused.js b/test/simple/test-stream-end-paused.js\n  138  index bb73777..d40efc7 100644\n  139: --- a/test/simple/test-stream-end-paused.js\n  140: +++ b/test/simple/test-stream-end-paused.js\n  141  @@ -25,7 +25,7 @@ var gotEnd = false;\n  142   \n  143:  // Make sure we don't miss the end event for paused 0-length streams\n  144   \n  145: -var Readable = require('stream').Readable;\n  146  +var Readable = require('../../').Readable;\n  147:  var stream = new Readable();\n  148   var calledRead = false;\n  149:  stream._read = function() {\n  150: diff --git a/test/simple/test-stream-pipe-after-end.js b/test/simple/test-stream-pipe-after-end.js\n  151  index b46ee90..0be8366 100644\n  152: --- a/test/simple/test-stream-pipe-after-end.js\n  153: +++ b/test/simple/test-stream-pipe-after-end.js\n  154  @@ -22,8 +22,8 @@\n  155   var common = require('../common');\n  156   var assert = require('assert');\n  157   \n  158: -var Readable = require('_stream_readable');\n  159: -var Writable = require('_stream_writable');\n  160: +var Readable = require('../../lib/_stream_readable');\n  161: +var Writable = require('../../lib/_stream_writable');\n  162   var util = require('util');\n  163   \n  164   util.inherits(TestReadable, Readable);\n  165: diff --git a/test/simple/test-stream-pipe-cleanup.js b/test/simple/test-stream-pipe-cleanup.js\n  166  deleted file mode 100644\n  167  index f689358..0000000\n  168: --- a/test/simple/test-stream-pipe-cleanup.js\n  169  +++ /dev/null\n  170  @@ -1,122 +0,0 @@\n  ...\n  190  -// USE OR OTHER DEALINGS IN THE SOFTWARE.\n  191  -\n  192: -// This test asserts that Stream.prototype.pipe does not leave listeners\n  193  -// hanging on the source or dest.\n  194  -\n  195  -var common = require('../common');\n  196: -var stream = require('stream');\n  197  -var assert = require('assert');\n  198  -var util = require('util');\n  ...\n  201  -  this.writable = true;\n  202  -  this.endCalls = 0;\n  203: -  stream.Stream.call(this);\n  204  -}\n  205: -util.inherits(Writable, stream.Stream);\n  206  -Writable.prototype.end = function() {\n  207  -  this.endCalls++;\n  ...\n  214  -function Readable() {\n  215  -  this.readable = true;\n  216: -  stream.Stream.call(this);\n  217  -}\n  218: -util.inherits(Readable, stream.Stream);\n  219  -\n  220  -function Duplex() {\n  ...\n  291  -assert.equal(w.listeners('end').length, 0);\n  292  -assert.equal(w.listeners('close').length, 0);\n  293: diff --git a/test/simple/test-stream-pipe-error-handling.js b/test/simple/test-stream-pipe-error-handling.js\n  294  index c5d724b..c7d6b7d 100644\n  295: --- a/test/simple/test-stream-pipe-error-handling.js\n  296: +++ b/test/simple/test-stream-pipe-error-handling.js\n  297  @@ -21,7 +21,7 @@\n  298   \n  299   var common = require('../common');\n  300   var assert = require('assert');\n  301: -var Stream = require('stream').Stream;\n  302: +var Stream = require('../../').Stream;\n  303   \n  304   (function testErrorListenerCatches() {\n  305:    var source = new Stream();\n  306: diff --git a/test/simple/test-stream-pipe-event.js b/test/simple/test-stream-pipe-event.js\n  307  index cb9d5fe..56f8d61 100644\n  308: --- a/test/simple/test-stream-pipe-event.js\n  309: +++ b/test/simple/test-stream-pipe-event.js\n  310  @@ -20,7 +20,7 @@\n  311   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  312   \n  313   var common = require('../common');\n  314: -var stream = require('stream');\n  315: +var stream = require('../../');\n  316   var assert = require('assert');\n  317   var util = require('util');\n  318   \n  319: diff --git a/test/simple/test-stream-push-order.js b/test/simple/test-stream-push-order.js\n  320  index f2e6ec2..a5c9bf9 100644\n  321: --- a/test/simple/test-stream-push-order.js\n  322: +++ b/test/simple/test-stream-push-order.js\n  323  @@ -20,7 +20,7 @@\n  324   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  325   \n  326   var common = require('../common.js');\n  327: -var Readable = require('stream').Readable;\n  328  +var Readable = require('../../').Readable;\n  329   var assert = require('assert');\n  330   \n  331   var s = new Readable({\n  332: diff --git a/test/simple/test-stream-push-strings.js b/test/simple/test-stream-push-strings.js\n  333  index 06f43dc..1701a9a 100644\n  334: --- a/test/simple/test-stream-push-strings.js\n  335: +++ b/test/simple/test-stream-push-strings.js\n  336  @@ -22,7 +22,7 @@\n  337   var common = require('../common');\n  338   var assert = require('assert');\n  339   \n  340: -var Readable = require('stream').Readable;\n  341  +var Readable = require('../../').Readable;\n  342   var util = require('util');\n  343   \n  344:  util.inherits(MyStream, Readable);\n  345: diff --git a/test/simple/test-stream-readable-event.js b/test/simple/test-stream-readable-event.js\n  346  index ba6a577..a8e6f7b 100644\n  347: --- a/test/simple/test-stream-readable-event.js\n  348: +++ b/test/simple/test-stream-readable-event.js\n  349  @@ -22,7 +22,7 @@\n  350   var common = require('../common');\n  351   var assert = require('assert');\n  352   \n  353: -var Readable = require('stream').Readable;\n  354  +var Readable = require('../../').Readable;\n  355   \n  356   (function first() {\n  357     // First test, not reading when the readable is added.\n  358: diff --git a/test/simple/test-stream-readable-flow-recursion.js b/test/simple/test-stream-readable-flow-recursion.js\n  359  index 2891ad6..11689ba 100644\n  360: --- a/test/simple/test-stream-readable-flow-recursion.js\n  361: +++ b/test/simple/test-stream-readable-flow-recursion.js\n  362  @@ -27,7 +27,7 @@ var assert = require('assert');\n  363   // more data continuously, but without triggering a nextTick\n  364   // warning or RangeError.\n  365   \n  366: -var Readable = require('stream').Readable;\n  367  +var Readable = require('../../').Readable;\n  368   \n  369   // throw an error if we trigger a nextTick warning.\n  370   process.throwDeprecation = true;\n  371: diff --git a/test/simple/test-stream-unshift-empty-chunk.js b/test/simple/test-stream-unshift-empty-chunk.js\n  372  index 0c96476..7827538 100644\n  373: --- a/test/simple/test-stream-unshift-empty-chunk.js\n  374: +++ b/test/simple/test-stream-unshift-empty-chunk.js\n  375  @@ -24,7 +24,7 @@ var assert = require('assert');\n  376   \n  377:  // This test verifies that stream.unshift(Buffer(0)) or \n  378:  // stream.unshift('') does not set state.reading=false.\n  379: -var Readable = require('stream').Readable;\n  380  +var Readable = require('../../').Readable;\n  381   \n  382   var r = new Readable();\n  383   var nChunks = 10;\n  384: diff --git a/test/simple/test-stream-unshift-read-race.js b/test/simple/test-stream-unshift-read-race.js\n  385  index 83fd9fa..17c18aa 100644\n  386: --- a/test/simple/test-stream-unshift-read-race.js\n  387: +++ b/test/simple/test-stream-unshift-read-race.js\n  388  @@ -29,7 +29,7 @@ var assert = require('assert');\n  389   // 3. push() after the EOF signaling null is an error.\n  390   // 4. _read() is not called after pushing the EOF null chunk.\n  391   \n  392: -var stream = require('stream');\n  393: +var stream = require('../../');\n  394   var hwm = 10;\n  395:  var r = stream.Readable({ highWaterMark: hwm });\n  396   var chunks = 10;\n  397  @@ -51,7 +51,14 @@ r._read = function(n) {\n  ...\n  411       if (fast) {\n  412         pos += n;\n  413: diff --git a/test/simple/test-stream-writev.js b/test/simple/test-stream-writev.js\n  414  index 5b49e6e..b5321f3 100644\n  415: --- a/test/simple/test-stream-writev.js\n  416: +++ b/test/simple/test-stream-writev.js\n  417  @@ -22,7 +22,7 @@\n  418   var common = require('../common');\n  419   var assert = require('assert');\n  420   \n  421: -var stream = require('stream');\n  422: +var stream = require('../../');\n  423   \n  424   var queue = [];\n  425   for (var decode = 0; decode < 2; decode++) {\n  426: diff --git a/test/simple/test-stream2-basic.js b/test/simple/test-stream2-basic.js\n  427  index 3814bf0..248c1be 100644\n  428: --- a/test/simple/test-stream2-basic.js\n  429: +++ b/test/simple/test-stream2-basic.js\n  430  @@ -21,7 +21,7 @@\n  431   \n  432   \n  433   var common = require('../common.js');\n  434: -var R = require('_stream_readable');\n  435: +var R = require('../../lib/_stream_readable');\n  436   var assert = require('assert');\n  437   \n  438   var util = require('util');\n  439: diff --git a/test/simple/test-stream2-compatibility.js b/test/simple/test-stream2-compatibility.js\n  440  index 6cdd4e9..f0fa84b 100644\n  441: --- a/test/simple/test-stream2-compatibility.js\n  442: +++ b/test/simple/test-stream2-compatibility.js\n  443  @@ -21,7 +21,7 @@\n  444   \n  445   \n  446   var common = require('../common.js');\n  447: -var R = require('_stream_readable');\n  448: +var R = require('../../lib/_stream_readable');\n  449   var assert = require('assert');\n  450   \n  451   var util = require('util');\n  452: diff --git a/test/simple/test-stream2-finish-pipe.js b/test/simple/test-stream2-finish-pipe.js\n  453  index 39b274f..006a19b 100644\n  454: --- a/test/simple/test-stream2-finish-pipe.js\n  455: +++ b/test/simple/test-stream2-finish-pipe.js\n  456  @@ -20,7 +20,7 @@\n  457   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  458   \n  459   var common = require('../common.js');\n  460: -var stream = require('stream');\n  461: +var stream = require('../../');\n  462   var Buffer = require('buffer').Buffer;\n  463   \n  464:  var r = new stream.Readable();\n  465: diff --git a/test/simple/test-stream2-fs.js b/test/simple/test-stream2-fs.js\n  466  deleted file mode 100644\n  467  index e162406..0000000\n  468: --- a/test/simple/test-stream2-fs.js\n  469  +++ /dev/null\n  470  @@ -1,72 +0,0 @@\n  ...\n  492  -\n  493  -var common = require('../common.js');\n  494: -var R = require('_stream_readable');\n  495  -var assert = require('assert');\n  496  -\n  497  -var fs = require('fs');\n  498: -var FSReadable = fs.ReadStream;\n  499  -\n  500  -var path = require('path');\n  ...\n  506  -\n  507  -var util = require('util');\n  508: -var Stream = require('stream');\n  509  -\n  510: -util.inherits(TestWriter, Stream);\n  511  -\n  512  -function TestWriter() {\n  513: -  Stream.apply(this);\n  514  -  this.buffer = [];\n  515  -  this.length = 0;\n  ...\n  541  -\n  542  -r.pipe(w);\n  543: diff --git a/test/simple/test-stream2-httpclient-response-end.js b/test/simple/test-stream2-httpclient-response-end.js\n  544  deleted file mode 100644\n  545  index 15cffc2..0000000\n  546: --- a/test/simple/test-stream2-httpclient-response-end.js\n  547  +++ /dev/null\n  548  @@ -1,52 +0,0 @@\n  ...\n  599  -});\n  600  -\n  601: diff --git a/test/simple/test-stream2-large-read-stall.js b/test/simple/test-stream2-large-read-stall.js\n  602  index 2fbfbca..667985b 100644\n  603: --- a/test/simple/test-stream2-large-read-stall.js\n  604: +++ b/test/simple/test-stream2-large-read-stall.js\n  605  @@ -30,7 +30,7 @@ var PUSHSIZE = 20;\n  606   var PUSHCOUNT = 1000;\n  607   var HWM = 50;\n  608   \n  609: -var Readable = require('stream').Readable;\n  610  +var Readable = require('../../').Readable;\n  611   var r = new Readable({\n  ...\n  658       setTimeout(push);\n  659   }\n  660: diff --git a/test/simple/test-stream2-objects.js b/test/simple/test-stream2-objects.js\n  661  index 3e6931d..ff47d89 100644\n  662: --- a/test/simple/test-stream2-objects.js\n  663: +++ b/test/simple/test-stream2-objects.js\n  664  @@ -21,8 +21,8 @@\n  665   \n  666   \n  667   var common = require('../common.js');\n  668: -var Readable = require('_stream_readable');\n  669: -var Writable = require('_stream_writable');\n  670: +var Readable = require('../../lib/_stream_readable');\n  671: +var Writable = require('../../lib/_stream_writable');\n  672   var assert = require('assert');\n  673   \n  674   // tiny node-tap lookalike.\n  675: diff --git a/test/simple/test-stream2-pipe-error-handling.js b/test/simple/test-stream2-pipe-error-handling.js\n  676  index cf7531c..e3f3e4e 100644\n  677: --- a/test/simple/test-stream2-pipe-error-handling.js\n  678: +++ b/test/simple/test-stream2-pipe-error-handling.js\n  679  @@ -21,7 +21,7 @@\n  680   \n  681   var common = require('../common');\n  682   var assert = require('assert');\n  683: -var stream = require('stream');\n  684: +var stream = require('../../');\n  685   \n  686   (function testErrorListenerCatches() {\n  687     var count = 1000;\n  688: diff --git a/test/simple/test-stream2-pipe-error-once-listener.js b/test/simple/test-stream2-pipe-error-once-listener.js\n  689  index 5e8e3cb..53b2616 100755\n  690: --- a/test/simple/test-stream2-pipe-error-once-listener.js\n  691: +++ b/test/simple/test-stream2-pipe-error-once-listener.js\n  692  @@ -24,7 +24,7 @@ var common = require('../common.js');\n  693   var assert = require('assert');\n  694   \n  695   var util = require('util');\n  696: -var stream = require('stream');\n  697: +var stream = require('../../');\n  698   \n  699   \n  700   var Read = function() {\n  701: diff --git a/test/simple/test-stream2-push.js b/test/simple/test-stream2-push.js\n  702  index b63edc3..eb2b0e9 100644\n  703: --- a/test/simple/test-stream2-push.js\n  704: +++ b/test/simple/test-stream2-push.js\n  705  @@ -20,7 +20,7 @@\n  706   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  707   \n  708   var common = require('../common.js');\n  709: -var stream = require('stream');\n  710: +var stream = require('../../');\n  711:  var Readable = stream.Readable;\n  712:  var Writable = stream.Writable;\n  713   var assert = require('assert');\n  714: diff --git a/test/simple/test-stream2-read-sync-stack.js b/test/simple/test-stream2-read-sync-stack.js\n  715  index e8a7305..9740a47 100644\n  716: --- a/test/simple/test-stream2-read-sync-stack.js\n  717: +++ b/test/simple/test-stream2-read-sync-stack.js\n  718  @@ -21,7 +21,7 @@\n  719   \n  720   var common = require('../common');\n  721   var assert = require('assert');\n  722: -var Readable = require('stream').Readable;\n  723  +var Readable = require('../../').Readable;\n  724   var r = new Readable();\n  725   var N = 256 * 1024;\n  726   \n  727: diff --git a/test/simple/test-stream2-readable-empty-buffer-no-eof.js b/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  728  index cd30178..4b1659d 100644\n  729: --- a/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  730: +++ b/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  731  @@ -22,10 +22,9 @@\n  732   var common = require('../common');\n  733   var assert = require('assert');\n  734   \n  735: -var Readable = require('stream').Readable;\n  736  +var Readable = require('../../').Readable;\n  737   \n  ...\n  773  -  });\n  774  -}\n  775: diff --git a/test/simple/test-stream2-readable-from-list.js b/test/simple/test-stream2-readable-from-list.js\n  776  index 7c96ffe..04a96f5 100644\n  777: --- a/test/simple/test-stream2-readable-from-list.js\n  778: +++ b/test/simple/test-stream2-readable-from-list.js\n  779  @@ -21,7 +21,7 @@\n  780   \n  781   var assert = require('assert');\n  782   var common = require('../common.js');\n  783: -var fromList = require('_stream_readable')._fromList;\n  784: +var fromList = require('../../lib/_stream_readable')._fromList;\n  785   \n  786   // tiny node-tap lookalike.\n  787   var tests = [];\n  788: diff --git a/test/simple/test-stream2-readable-legacy-drain.js b/test/simple/test-stream2-readable-legacy-drain.js\n  789  index 675da8e..51fd3d5 100644\n  790: --- a/test/simple/test-stream2-readable-legacy-drain.js\n  791: +++ b/test/simple/test-stream2-readable-legacy-drain.js\n  792  @@ -22,7 +22,7 @@\n  793   var common = require('../common');\n  794   var assert = require('assert');\n  795   \n  796: -var Stream = require('stream');\n  797: +var Stream = require('../../');\n  798:  var Readable = Stream.Readable;\n  799   \n  800   var r = new Readable();\n  801: diff --git a/test/simple/test-stream2-readable-non-empty-end.js b/test/simple/test-stream2-readable-non-empty-end.js\n  802  index 7314ae7..c971898 100644\n  803: --- a/test/simple/test-stream2-readable-non-empty-end.js\n  804: +++ b/test/simple/test-stream2-readable-non-empty-end.js\n  805  @@ -21,7 +21,7 @@\n  806   \n  807   var assert = require('assert');\n  808   var common = require('../common.js');\n  809: -var Readable = require('_stream_readable');\n  810: +var Readable = require('../../lib/_stream_readable');\n  811   \n  812   var len = 0;\n  813   var chunks = new Array(10);\n  814: diff --git a/test/simple/test-stream2-readable-wrap-empty.js b/test/simple/test-stream2-readable-wrap-empty.js\n  815  index 2e5cf25..fd8a3dc 100644\n  816: --- a/test/simple/test-stream2-readable-wrap-empty.js\n  817: +++ b/test/simple/test-stream2-readable-wrap-empty.js\n  818  @@ -22,7 +22,7 @@\n  819   var common = require('../common');\n  820   var assert = require('assert');\n  821   \n  822: -var Readable = require('_stream_readable');\n  823: +var Readable = require('../../lib/_stream_readable');\n  824   var EE = require('events').EventEmitter;\n  825   \n  826:  var oldStream = new EE();\n  827: diff --git a/test/simple/test-stream2-readable-wrap.js b/test/simple/test-stream2-readable-wrap.js\n  828  index 90eea01..6b177f7 100644\n  829: --- a/test/simple/test-stream2-readable-wrap.js\n  830: +++ b/test/simple/test-stream2-readable-wrap.js\n  831  @@ -22,8 +22,8 @@\n  832   var common = require('../common');\n  833   var assert = require('assert');\n  834   \n  835: -var Readable = require('_stream_readable');\n  836: -var Writable = require('_stream_writable');\n  837: +var Readable = require('../../lib/_stream_readable');\n  838: +var Writable = require('../../lib/_stream_writable');\n  839   var EE = require('events').EventEmitter;\n  840   \n  841   var testRuns = 0, completedRuns = 0;\n  842: diff --git a/test/simple/test-stream2-set-encoding.js b/test/simple/test-stream2-set-encoding.js\n  843  index 5d2c32a..685531b 100644\n  844: --- a/test/simple/test-stream2-set-encoding.js\n  845: +++ b/test/simple/test-stream2-set-encoding.js\n  846  @@ -22,7 +22,7 @@\n  847   \n  848   var common = require('../common.js');\n  849   var assert = require('assert');\n  850: -var R = require('_stream_readable');\n  851: +var R = require('../../lib/_stream_readable');\n  852   var util = require('util');\n  853   \n  854   // tiny node-tap lookalike.\n  855: diff --git a/test/simple/test-stream2-transform.js b/test/simple/test-stream2-transform.js\n  856  index 9c9ddd8..a0cacc6 100644\n  857: --- a/test/simple/test-stream2-transform.js\n  858: +++ b/test/simple/test-stream2-transform.js\n  859  @@ -21,8 +21,8 @@\n  860   \n  861   var assert = require('assert');\n  862   var common = require('../common.js');\n  863: -var PassThrough = require('_stream_passthrough');\n  864: -var Transform = require('_stream_transform');\n  865  +var PassThrough = require('../../').PassThrough;\n  866  +var Transform = require('../../').Transform;\n  ...\n  868   // tiny node-tap lookalike.\n  869   var tests = [];\n  870: diff --git a/test/simple/test-stream2-unpipe-drain.js b/test/simple/test-stream2-unpipe-drain.js\n  871  index d66dc3c..365b327 100644\n  872: --- a/test/simple/test-stream2-unpipe-drain.js\n  873: +++ b/test/simple/test-stream2-unpipe-drain.js\n  874  @@ -22,7 +22,7 @@\n  875   \n  876   var common = require('../common.js');\n  877   var assert = require('assert');\n  878: -var stream = require('stream');\n  879: +var stream = require('../../');\n  880   var crypto = require('crypto');\n  881   \n  882   var util = require('util');\n  883: diff --git a/test/simple/test-stream2-unpipe-leak.js b/test/simple/test-stream2-unpipe-leak.js\n  884  index 99f8746..17c92ae 100644\n  885: --- a/test/simple/test-stream2-unpipe-leak.js\n  886: +++ b/test/simple/test-stream2-unpipe-leak.js\n  887  @@ -22,7 +22,7 @@\n  888   \n  889   var common = require('../common.js');\n  890   var assert = require('assert');\n  891: -var stream = require('stream');\n  892: +var stream = require('../../');\n  893   \n  894   var chunk = new Buffer('hallo');\n  895   \n  896: diff --git a/test/simple/test-stream2-writable.js b/test/simple/test-stream2-writable.js\n  897  index 704100c..209c3a6 100644\n  898: --- a/test/simple/test-stream2-writable.js\n  899: +++ b/test/simple/test-stream2-writable.js\n  900  @@ -20,8 +20,8 @@\n  901   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  902   \n  903   var common = require('../common.js');\n  904: -var W = require('_stream_writable');\n  905: -var D = require('_stream_duplex');\n  906  +var W = require('../../').Writable;\n  907  +var D = require('../../').Duplex;\n  ...\n  909   \n  910   var util = require('util');\n  911: diff --git a/test/simple/test-stream3-pause-then-read.js b/test/simple/test-stream3-pause-then-read.js\n  912  index b91bde3..2f72c15 100644\n  913: --- a/test/simple/test-stream3-pause-then-read.js\n  914: +++ b/test/simple/test-stream3-pause-then-read.js\n  915  @@ -22,7 +22,7 @@\n  916   var common = require('../common');\n  917   var assert = require('assert');\n  918   \n  919: -var stream = require('stream');\n  920: +var stream = require('../../');\n  921:  var Readable = stream.Readable;\n  922:  var Writable = stream.Writable;\n  923   \n  924  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\package.json:\n    1  {\n    2:   \"name\": \"readable-stream\",\n    3    \"version\": \"1.1.13\",\n    4:   \"description\": \"Streams3, a user-land copy of the stream library from Node.js v0.11.x\",\n    5    \"main\": \"readable.js\",\n    6    \"dependencies\": {\n    .\n   18    \"repository\": {\n   19      \"type\": \"git\",\n   20:     \"url\": \"git://github.com/isaacs/readable-stream\"\n   21    },\n   22    \"keywords\": [\n   23      \"readable\",\n   24:     \"stream\",\n   25      \"pipe\"\n   26    ],\n   ..\n   36    \"gitHead\": \"3b672fd7ae92acf5b4ffdbabf74b372a0a56b051\",\n   37    \"bugs\": {\n   38:     \"url\": \"https://github.com/isaacs/readable-stream/issues\"\n   39    },\n   40:   \"homepage\": \"https://github.com/isaacs/readable-stream\",\n   41:   \"_id\": \"readable-stream@1.1.13\",\n   42    \"_shasum\": \"f6eef764f514c89e2b9e23146a75ba106756d23e\",\n   43:   \"_from\": \"readable-stream@~1.1.9\",\n   44    \"_npmVersion\": \"1.4.23\",\n   45    \"_npmUser\": {\n   ..\n   63    \"dist\": {\n   64      \"shasum\": \"f6eef764f514c89e2b9e23146a75ba106756d23e\",\n   65:     \"tarball\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-1.1.13.tgz\"\n   66    },\n   67    \"directories\": {},\n   68:   \"_resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.13.tgz\",\n   69    \"readme\": \"ERROR: No README data found!\"\n   70  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\passthrough.js:\n    1: module.exports = require(\"./lib/_stream_passthrough.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\readable.js:\n    1: exports = module.exports = require('./lib/_stream_readable.js');\n    2: exports.Stream = require('stream');\n    3  exports.Readable = exports;\n    4: exports.Writable = require('./lib/_stream_writable.js');\n    5: exports.Duplex = require('./lib/_stream_duplex.js');\n    6: exports.Transform = require('./lib/_stream_transform.js');\n    7: exports.PassThrough = require('./lib/_stream_passthrough.js');\n    8  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\README.md:\n    1: # readable-stream\n    2  \n    3: ***Node-core streams for userland***\n    4  \n    5: [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/)\n    6: [![NPM](https://nodei.co/npm-dl/readable-stream.png&months=6&height=3)](https://nodei.co/npm/readable-stream/)\n    7  \n    8: This package is a mirror of the Streams2 and Streams3 implementations in Node-core.\n    9  \n   10: If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core.\n   11  \n   12: **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12.\n   13  \n   14: **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`\n   15  \n   16  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\transform.js:\n    1: module.exports = require(\"./lib/_stream_transform.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\writable.js:\n    1: module.exports = require(\"./lib/_stream_writable.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_duplex.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a duplex stream is just a stream that is both readable and writable.\n   23  // Since JS doesn't have multiple prototypal inheritance, this class\n   24  // prototypally inherits from Readable, and then parasitically from\n   ..\n   41  /*</replacement>*/\n   42  \n   43: var Readable = require('./_stream_readable');\n   44: var Writable = require('./_stream_writable');\n   45  \n   46  util.inherits(Duplex, Readable);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_passthrough.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a passthrough stream.\n   23: // basically just the most minimal sort of Transform stream.\n   24  // Every written chunk gets output as-is.\n   25  \n   26  module.exports = PassThrough;\n   27  \n   28: var Transform = require('./_stream_transform');\n   29  \n   30  /*<replacement>*/\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_readable.js:\n   41  /*</replacement>*/\n   42  \n   43: var Stream = require('stream');\n   44  \n   45  /*<replacement>*/\n   ..\n   54  var debug = require('util');\n   55  if (debug && debug.debuglog) {\n   56:   debug = debug.debuglog('stream');\n   57  } else {\n   58    debug = function () {};\n   ..\n   61  \n   62  \n   63: util.inherits(Readable, Stream);\n   64  \n   65: function ReadableState(options, stream) {\n   66:   var Duplex = require('./_stream_duplex');\n   67  \n   68    options = options || {};\n   ..\n   99  \n  100  \n  101:   // object stream flag. Used to make read(n) ignore n and to\n  102    // make all the buffer merging and length checks go away\n  103    this.objectMode = !!options.objectMode;\n  104  \n  105:   if (stream instanceof Duplex)\n  106      this.objectMode = this.objectMode || !!options.readableObjectMode;\n  107  \n  ...\n  132  \n  133  function Readable(options) {\n  134:   var Duplex = require('./_stream_duplex');\n  135  \n  136    if (!(this instanceof Readable))\n  ...\n  142    this.readable = true;\n  143  \n  144:   Stream.call(this);\n  145  }\n  146  \n  ...\n  169  };\n  170  \n  171: function readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  172    var er = chunkInvalid(state, chunk);\n  173    if (er) {\n  174:     stream.emit('error', er);\n  175    } else if (util.isNullOrUndefined(chunk)) {\n  176      state.reading = false;\n  177      if (!state.ended)\n  178:       onEofChunk(stream, state);\n  179    } else if (state.objectMode || chunk && chunk.length > 0) {\n  180      if (state.ended && !addToFront) {\n  181:       var e = new Error('stream.push() after EOF');\n  182:       stream.emit('error', e);\n  183      } else if (state.endEmitted && addToFront) {\n  184:       var e = new Error('stream.unshift() after end event');\n  185:       stream.emit('error', e);\n  186      } else {\n  187        if (state.decoder && !addToFront && !encoding)\n  ...\n  193        // if we want the data now, just emit it.\n  194        if (state.flowing && state.length === 0 && !state.sync) {\n  195:         stream.emit('data', chunk);\n  196:         stream.read(0);\n  197        } else {\n  198          // update the buffer info.\n  ...\n  204  \n  205          if (state.needReadable)\n  206:           emitReadable(stream);\n  207        }\n  208  \n  209:       maybeReadMore(stream, state);\n  210      }\n  211    } else if (!addToFront) {\n  ...\n  326    // All the actual chunk generation logic needs to be\n  327    // *below* the call to _read.  The reason is that in certain\n  328:   // synthetic stream cases, such as passthrough streams, _read\n  329    // may be a completely synchronous operation which may change\n  330    // the state of the read buffer, providing enough data when\n  ...\n  338    // Note that this may be asynchronous, or synchronous.  Yes, it is\n  339    // deeply ugly to write APIs this way, but that still doesn't mean\n  340:   // that the Readable class should behave improperly, as streams are\n  341    // designed to be sync/async agnostic.\n  342    // Take note if the _read call is sync or async (ie, if the read call\n  ...\n  420  \n  421  \n  422: function onEofChunk(stream, state) {\n  423    if (state.decoder && !state.ended) {\n  424      var chunk = state.decoder.end();\n  ...\n  431  \n  432    // emit 'readable' now to make sure it gets picked up.\n  433:   emitReadable(stream);\n  434  }\n  435  \n  ...\n  437  // another read() call => stack overflow.  This way, it might trigger\n  438  // a nextTick recursion warning, but that's not so bad.\n  439: function emitReadable(stream) {\n  440:   var state = stream._readableState;\n  441    state.needReadable = false;\n  442    if (!state.emittedReadable) {\n  ...\n  445      if (state.sync)\n  446        process.nextTick(function() {\n  447:         emitReadable_(stream);\n  448        });\n  449      else\n  450:       emitReadable_(stream);\n  451    }\n  452  }\n  453  \n  454: function emitReadable_(stream) {\n  455    debug('emit readable');\n  456:   stream.emit('readable');\n  457:   flow(stream);\n  458  }\n  459  \n  ...\n  465  // However, if we're not ended, or reading, and the length < hwm,\n  466  // then go ahead and try to read some more preemptively.\n  467: function maybeReadMore(stream, state) {\n  468    if (!state.readingMore) {\n  469      state.readingMore = true;\n  470      process.nextTick(function() {\n  471:       maybeReadMore_(stream, state);\n  472      });\n  473    }\n  474  }\n  475  \n  476: function maybeReadMore_(stream, state) {\n  477    var len = state.length;\n  478    while (!state.reading && !state.flowing && !state.ended &&\n  479           state.length < state.highWaterMark) {\n  480      debug('maybeReadMore read 0');\n  481:     stream.read(0);\n  482      if (len === state.length)\n  483        // didn't get any data, stop spinning.\n  ...\n  491  // abstract method.  to be overridden in specific implementation classes.\n  492  // call cb(er, data) where data is <= n in length.\n  493: // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n  494  // arbitrary, and perhaps not very meaningful.\n  495  Readable.prototype._read = function(n) {\n  ...\n  701  // Ensure readable listeners eventually get something\n  702  Readable.prototype.on = function(ev, fn) {\n  703:   var res = Stream.prototype.on.call(this, ev, fn);\n  704  \n  705    // If listening to data, and it has not explicitly been paused,\n  ...\n  731  Readable.prototype.addListener = Readable.prototype.on;\n  732  \n  733: // pause() and resume() are remnants of the legacy readable stream API\n  734  // If the user uses them, then switch into old mode.\n  735  Readable.prototype.resume = function() {\n  ...\n  747  };\n  748  \n  749: function resume(stream, state) {\n  750    if (!state.resumeScheduled) {\n  751      state.resumeScheduled = true;\n  752      process.nextTick(function() {\n  753:       resume_(stream, state);\n  754      });\n  755    }\n  756  }\n  757  \n  758: function resume_(stream, state) {\n  759    state.resumeScheduled = false;\n  760:   stream.emit('resume');\n  761:   flow(stream);\n  762    if (state.flowing && !state.reading)\n  763:     stream.read(0);\n  764  }\n  765  \n  ...\n  774  };\n  775  \n  776: function flow(stream) {\n  777:   var state = stream._readableState;\n  778    debug('flow', state.flowing);\n  779    if (state.flowing) {\n  780      do {\n  781:       var chunk = stream.read();\n  782      } while (null !== chunk && state.flowing);\n  783    }\n  784  }\n  785  \n  786: // wrap an old-style stream as the async data source.\n  787: // This is *not* part of the readable stream interface.\n  788  // It is an ugly unfortunate mess of history.\n  789: Readable.prototype.wrap = function(stream) {\n  790    var state = this._readableState;\n  791    var paused = false;\n  792  \n  793    var self = this;\n  794:   stream.on('end', function() {\n  795      debug('wrapped end');\n  796      if (state.decoder && !state.ended) {\n  ...\n  803    });\n  804  \n  805:   stream.on('data', function(chunk) {\n  806      debug('wrapped data');\n  807      if (state.decoder)\n  ...\n  813      if (!ret) {\n  814        paused = true;\n  815:       stream.pause();\n  816      }\n  817    });\n  ...\n  819    // proxy all the other methods.\n  820    // important when wrapping filters and duplexes.\n  821:   for (var i in stream) {\n  822:     if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n  823        this[i] = function(method) { return function() {\n  824:         return stream[method].apply(stream, arguments);\n  825        }}(i);\n  826      }\n  ...\n  830    var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  831    forEach(events, function(ev) {\n  832:     stream.on(ev, self.emit.bind(self, ev));\n  833    });\n  834  \n  835    // when we try to consume some more bytes, simply unpause the\n  836:   // underlying stream.\n  837    self._read = function(n) {\n  838      debug('wrapped _read', n);\n  839      if (paused) {\n  840        paused = false;\n  841:       stream.resume();\n  842      }\n  843    };\n  ...\n  917  }\n  918  \n  919: function endReadable(stream) {\n  920:   var state = stream._readableState;\n  921  \n  922    // If we get here before consuming all the bytes, then that is a\n  923    // bug in node.  Should never happen.\n  924    if (state.length > 0)\n  925:     throw new Error('endReadable called on non-empty stream');\n  926  \n  927    if (!state.endEmitted) {\n  ...\n  931        if (!state.endEmitted && state.length === 0) {\n  932          state.endEmitted = true;\n  933:         stream.readable = false;\n  934:         stream.emit('end');\n  935        }\n  936      });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_transform.js:\n   21  \n   22  \n   23: // a transform stream is a readable/writable stream where you do\n   24  // something with the data.  Sometimes it's called a \"filter\",\n   25  // but that's not a great name for it, since that implies a thing where\n   ..\n   29  // While the output is causally related to the input, it's not a\n   30  // necessarily symmetric or synchronous transformation.  For example,\n   31: // a zlib stream might take multiple plain-text writes(), and then\n   32  // emit a single compressed chunk some time in the future.\n   33  //\n   34  // Here's how this works:\n   35  //\n   36: // The Transform stream has all the aspects of the readable and writable\n   37: // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n   38  // internally, and returns false if there's a lot of pending writes\n   39  // buffered up.  When you call read(), that calls _read(n) until\n   40  // there's enough pending readable data buffered up.\n   41  //\n   42: // In a transform stream, the written data is placed in a buffer.  When\n   43  // _read(n) is called, it transforms the queued up data, calling the\n   44  // buffered _write cb's as it consumes chunks.  If consuming a single\n   ..\n   50  // since _read has to be called to start processing a new chunk.  However,\n   51  // a pathological inflate type of transform can cause excessive buffering\n   52: // here.  For example, imagine a stream where every byte of input is\n   53  // interpreted as an integer from 0-255, and then results in that many\n   54  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n   ..\n   65  module.exports = Transform;\n   66  \n   67: var Duplex = require('./_stream_duplex');\n   68  \n   69  /*<replacement>*/\n   ..\n   75  \n   76  \n   77: function TransformState(options, stream) {\n   78    this.afterTransform = function(er, data) {\n   79:     return afterTransform(stream, er, data);\n   80    };\n   81  \n   ..\n   86  }\n   87  \n   88: function afterTransform(stream, er, data) {\n   89:   var ts = stream._transformState;\n   90    ts.transforming = false;\n   91  \n   ..\n   93  \n   94    if (!cb)\n   95:     return stream.emit('error', new Error('no writecb in Transform class'));\n   96  \n   97    ts.writechunk = null;\n   ..\n   99  \n  100    if (!util.isNullOrUndefined(data))\n  101:     stream.push(data);\n  102  \n  103    if (cb)\n  104      cb(er);\n  105  \n  106:   var rs = stream._readableState;\n  107    rs.reading = false;\n  108    if (rs.needReadable || rs.length < rs.highWaterMark) {\n  109:     stream._read(rs.highWaterMark);\n  110    }\n  111  }\n  ...\n  121  \n  122    // when the writable side finishes, then flush out anything remaining.\n  123:   var stream = this;\n  124  \n  125    // start out asking for a readable event once data is transformed.\n  ...\n  134      if (util.isFunction(this._flush))\n  135        this._flush(function(er) {\n  136:         done(stream, er);\n  137        });\n  138      else\n  139:       done(stream);\n  140    });\n  141  }\n  ...\n  191  \n  192  \n  193: function done(stream, er) {\n  194    if (er)\n  195:     return stream.emit('error', er);\n  196  \n  197    // if there's nothing in the write buffer, then that means\n  198    // that nothing more will ever be provided\n  199:   var ws = stream._writableState;\n  200:   var ts = stream._transformState;\n  201  \n  202    if (ws.length)\n  ...\n  206      throw new Error('calling transform done when still transforming');\n  207  \n  208:   return stream.push(null);\n  209  }\n  210  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_writable.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // A bit simpler than readable streams.\n   23  // Implement an async ._write(chunk, cb), and it'll handle all\n   24  // the drain event emission and buffering.\n   ..\n   38  /*</replacement>*/\n   39  \n   40: var Stream = require('stream');\n   41  \n   42: util.inherits(Writable, Stream);\n   43  \n   44  function WriteReq(chunk, encoding, cb) {\n   ..\n   48  }\n   49  \n   50: function WritableState(options, stream) {\n   51:   var Duplex = require('./_stream_duplex');\n   52  \n   53    options = options || {};\n   ..\n   60    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n   61  \n   62:   // object stream flag to indicate whether or not this stream\n   63    // contains buffers or objects.\n   64    this.objectMode = !!options.objectMode;\n   65  \n   66:   if (stream instanceof Duplex)\n   67      this.objectMode = this.objectMode || !!options.writableObjectMode;\n   68  \n   ..\n   79  \n   80    // should we decode strings into buffers before passing to _write?\n   81:   // this is here so that some node-core streams can optimize string\n   82    // handling at a lower level.\n   83    var noDecode = options.decodeStrings === false;\n   ..\n  113    // the callback that's passed to _write(chunk,cb)\n  114    this.onwrite = function(er) {\n  115:     onwrite(stream, er);\n  116    };\n  117  \n  ...\n  129  \n  130    // emit prefinish if the only thing we're waiting for is _write cbs\n  131:   // This is relevant for synchronous Transform streams\n  132    this.prefinished = false;\n  133  \n  ...\n  137  \n  138  function Writable(options) {\n  139:   var Duplex = require('./_stream_duplex');\n  140  \n  141    // Writable ctor is applied to Duplexes, though they're not\n  ...\n  149    this.writable = true;\n  150  \n  151:   Stream.call(this);\n  152  }\n  153  \n  154: // Otherwise people can pipe Writable streams, which is just wrong.\n  155  Writable.prototype.pipe = function() {\n  156    this.emit('error', new Error('Cannot pipe. Not readable.'));\n  ...\n  158  \n  159  \n  160: function writeAfterEnd(stream, state, cb) {\n  161    var er = new Error('write after end');\n  162    // TODO: defer error events consistently everywhere, not just the cb\n  163:   stream.emit('error', er);\n  164    process.nextTick(function() {\n  165      cb(er);\n  ...\n  169  // If we get something that is not a buffer, string, null, or undefined,\n  170  // and we're not in objectMode, then that's an error.\n  171: // Otherwise stream chunks are all considered to be of length=1, and the\n  172  // watermarks determine how many objects to keep in the buffer, rather than\n  173  // how many bytes or characters.\n  174: function validChunk(stream, state, chunk, cb) {\n  175    var valid = true;\n  176    if (!util.isBuffer(chunk) &&\n  ...\n  179        !state.objectMode) {\n  180      var er = new TypeError('Invalid non-string/buffer chunk');\n  181:     stream.emit('error', er);\n  182      process.nextTick(function() {\n  183        cb(er);\n  ...\n  248  // in the queue, and wait our turn.  Otherwise, call _write\n  249  // If we return false, then we need a drain event, so set that flag.\n  250: function writeOrBuffer(stream, state, chunk, encoding, cb) {\n  251    chunk = decodeChunk(state, chunk, encoding);\n  252    if (util.isBuffer(chunk))\n  ...\n  264      state.buffer.push(new WriteReq(chunk, encoding, cb));\n  265    else\n  266:     doWrite(stream, state, false, len, chunk, encoding, cb);\n  267  \n  268    return ret;\n  269  }\n  270  \n  271: function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  272    state.writelen = len;\n  273    state.writecb = cb;\n  ...\n  275    state.sync = true;\n  276    if (writev)\n  277:     stream._writev(chunk, state.onwrite);\n  278    else\n  279:     stream._write(chunk, encoding, state.onwrite);\n  280    state.sync = false;\n  281  }\n  282  \n  283: function onwriteError(stream, state, sync, er, cb) {\n  284    if (sync)\n  285      process.nextTick(function() {\n  ...\n  292    }\n  293  \n  294:   stream._writableState.errorEmitted = true;\n  295:   stream.emit('error', er);\n  296  }\n  297  \n  ...\n  303  }\n  304  \n  305: function onwrite(stream, er) {\n  306:   var state = stream._writableState;\n  307    var sync = state.sync;\n  308    var cb = state.writecb;\n  ...\n  311  \n  312    if (er)\n  313:     onwriteError(stream, state, sync, er, cb);\n  314    else {\n  315      // Check if we're actually ready to finish, but don't emit yet\n  316:     var finished = needFinish(stream, state);\n  317  \n  318      if (!finished &&\n  ...\n  320          !state.bufferProcessing &&\n  321          state.buffer.length) {\n  322:       clearBuffer(stream, state);\n  323      }\n  324  \n  325      if (sync) {\n  326        process.nextTick(function() {\n  327:         afterWrite(stream, state, finished, cb);\n  328        });\n  329      } else {\n  330:       afterWrite(stream, state, finished, cb);\n  331      }\n  332    }\n  333  }\n  334  \n  335: function afterWrite(stream, state, finished, cb) {\n  336    if (!finished)\n  337:     onwriteDrain(stream, state);\n  338    state.pendingcb--;\n  339    cb();\n  340:   finishMaybe(stream, state);\n  341  }\n  342  \n  ...\n  344  // emit 'drain' before the write() consumer gets the 'false' return\n  345  // value, and has a chance to attach a 'drain' listener.\n  346: function onwriteDrain(stream, state) {\n  347    if (state.length === 0 && state.needDrain) {\n  348      state.needDrain = false;\n  349:     stream.emit('drain');\n  350    }\n  351  }\n  ...\n  353  \n  354  // if there's something in the buffer waiting, then process it\n  355: function clearBuffer(stream, state) {\n  356    state.bufferProcessing = true;\n  357  \n  358:   if (stream._writev && state.buffer.length > 1) {\n  359      // Fast case, write everything using _writev()\n  360      var cbs = [];\n  ...\n  365      // TODO(isaacs) clean this up\n  366      state.pendingcb++;\n  367:     doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n  368        for (var i = 0; i < cbs.length; i++) {\n  369          state.pendingcb--;\n  ...\n  383        var len = state.objectMode ? 1 : chunk.length;\n  384  \n  385:       doWrite(stream, state, false, len, chunk, encoding, cb);\n  386  \n  387        // if we didn't call the onwrite immediately, then\n  ...\n  438  \n  439  \n  440: function needFinish(stream, state) {\n  441    return (state.ending &&\n  442            state.length === 0 &&\n  ...\n  445  }\n  446  \n  447: function prefinish(stream, state) {\n  448    if (!state.prefinished) {\n  449      state.prefinished = true;\n  450:     stream.emit('prefinish');\n  451    }\n  452  }\n  453  \n  454: function finishMaybe(stream, state) {\n  455:   var need = needFinish(stream, state);\n  456    if (need) {\n  457      if (state.pendingcb === 0) {\n  458:       prefinish(stream, state);\n  459        state.finished = true;\n  460:       stream.emit('finish');\n  461      } else\n  462:       prefinish(stream, state);\n  463    }\n  464    return need;\n  465  }\n  466  \n  467: function endWritable(stream, state, cb) {\n  468    state.ending = true;\n  469:   finishMaybe(stream, state);\n  470    if (cb) {\n  471      if (state.finished)\n  472        process.nextTick(cb);\n  473      else\n  474:       stream.once('finish', cb);\n  475    }\n  476    state.ended = true;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\readable-stream\\node_modules\\core-util-is\\float.patch:\n  554  -\n  555  -\n  556: -exports.pump = exports.deprecate(function(readStream, writeStream, callback) {\n  557  -  var callbackCalled = false;\n  558  -\n  ...\n  564  -  }\n  565  -\n  566: -  readStream.addListener('data', function(chunk) {\n  567: -    if (writeStream.write(chunk) === false) readStream.pause();\n  568  -  });\n  569  -\n  570: -  writeStream.addListener('drain', function() {\n  571: -    readStream.resume();\n  572  -  });\n  573  -\n  574: -  readStream.addListener('end', function() {\n  575: -    writeStream.end();\n  576  -  });\n  577  -\n  578: -  readStream.addListener('close', function() {\n  579  -    call();\n  580  -  });\n  581  -\n  582: -  readStream.addListener('error', function(err) {\n  583: -    writeStream.end();\n  584  -    call(err);\n  585  -  });\n  586  -\n  587: -  writeStream.addListener('error', function(err) {\n  588: -    readStream.destroy();\n  589  -    call(err);\n  590  -  });\n  591: -}, 'util.pump(): Use readableStream.pipe() instead');\n  592  -\n  593  -\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\stream-counter\\index.js:\n    1  module.exports = ByteCounter;\n    2  \n    3: var Writable = require('readable-stream').Writable;\n    4  var util = require('util');\n    5  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\stream-counter\\package.json:\n    1  {\n    2:   \"name\": \"stream-counter\",\n    3    \"version\": \"0.2.0\",\n    4:   \"description\": \"keeps track of how many bytes have been written to a stream\",\n    5    \"main\": \"index.js\",\n    6    \"scripts\": {\n    .\n    9    \"repository\": {\n   10      \"type\": \"git\",\n   11:     \"url\": \"git://github.com/superjoe30/node-stream-counter.git\"\n   12    },\n   13    \"author\": {\n   ..\n   20    },\n   21    \"dependencies\": {\n   22:     \"readable-stream\": \"~1.1.8\"\n   23    },\n   24    \"bugs\": {\n   25:     \"url\": \"https://github.com/superjoe30/node-stream-counter/issues\"\n   26    },\n   27:   \"_id\": \"stream-counter@0.2.0\",\n   28    \"dist\": {\n   29      \"shasum\": \"ded266556319c8b0e222812b9cf3b26fa7d947de\",\n   30:     \"tarball\": \"http://registry.npmjs.org/stream-counter/-/stream-counter-0.2.0.tgz\"\n   31    },\n   32:   \"_from\": \"stream-counter@~0.2.0\",\n   33    \"_npmVersion\": \"1.3.8\",\n   34    \"_npmUser\": {\n   ..\n   44    \"directories\": {},\n   45    \"_shasum\": \"ded266556319c8b0e222812b9cf3b26fa7d947de\",\n   46:   \"_resolved\": \"https://registry.npmjs.org/stream-counter/-/stream-counter-0.2.0.tgz\",\n   47    \"readme\": \"ERROR: No README data found!\",\n   48:   \"homepage\": \"https://github.com/superjoe30/node-stream-counter\"\n   49  }\n   50  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\stream-counter\\README.md:\n    1: # stream-counter\n    2  \n    3: Keep track of how many bytes have been written to a stream.\n    4  \n    5  ## Usage\n    6  \n    7  ```js\n    8: var StreamCounter = require('stream-counter');\n    9: var counter = new StreamCounter();\n   10  counter.on('progress', function() {\n   11    console.log(\"progress\", counter.bytes);\n   12  });\n   13: fs.createReadStream('foo.txt').pipe(counter);\n   14  ```\n   15  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\multiparty\\node_modules\\stream-counter\\test\\test.js:\n   10    remainingTests -= 1;\n   11  });\n   12: var is = fs.createReadStream(path.join(__dirname, 'test.txt'));\n   13  is.pipe(counter);\n   14  is.on('end', function() {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\type-is\\node_modules\\mime-types\\README.md:\n   12  \n   13  - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`,\n   14:   so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`.\n   15  - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`.\n   16  - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db)\n   ..\n   65  \n   66  ```js\n   67: mime.extension('application/octet-stream') // 'bin'\n   68  ```\n   69  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\type-is\\node_modules\\mime-types\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-multiparty\\node_modules\\type-is\\node_modules\\mime-types\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\index.js:\n    1  var zlib = require('zlib');\n    2  var fs = require('fs');\n    3: var stream = require('stream');\n    4  var util = require('util');\n    5  var path = require('path');\n    .\n    8  var mime = require('mime');\n    9  var url = require('url');\n   10: var StreamSink = require('streamsink');\n   11  var crypto = require('crypto');\n   12  \n   ..\n   31      if (ignoreFile(usePath)) return;\n   32      var relName = '/' + path.relative(dir, usePath);\n   33:     var sink = new StreamSink();\n   34:     var inStream = fs.createReadStream(file);\n   35      var cacheObj;\n   36      cache[relName] = cacheObj = {\n   ..\n   41      };\n   42      var gzipPendCb, hashPendCb;\n   43:     inStream.on('error', function(err) {\n   44        if (err.code === 'EISDIR') {\n   45          delete cache[relName];\n   ..\n   54      pend.go(function(cb) {\n   55        gzipPendCb = cb;\n   56:       inStream.pipe(zlib.createGzip()).pipe(sink);\n   57        sink.on('finish', cb);\n   58      });\n   59      pend.go(function(cb) {\n   60        hashPendCb = cb;\n   61:       var hashSink = new StreamSink();\n   62:       inStream.pipe(crypto.createHash('sha1')).pipe(hashSink);\n   63        hashSink.on('finish', function() {\n   64          cacheObj.hash = hashSink.toString('base64');\n   ..\n   96        resp.setHeader('ETag', c.hash);\n   97        if (req.headers['accept-encoding'] == null) {\n   98:         sink.createReadStream().pipe(zlib.createGunzip()).pipe(resp);\n   99        } else {\n  100          resp.setHeader('Content-Encoding', 'gzip');\n  101:         sink.createReadStream().pipe(resp);\n  102        }\n  103      }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\package.json:\n   24      \"mime\": \"~1.2.11\",\n   25      \"pend\": \"~1.1.3\",\n   26:     \"streamsink\": \"~1.2.0\"\n   27    },\n   28    \"_id\": \"connect-static@1.3.2\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\mime\\package.json:\n   26    },\n   27    \"version\": \"1.2.11\",\n   28:   \"readme\": \"# mime\\n\\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\\n\\n## Install\\n\\nInstall with [npm](http://github.com/isaacs/npm):\\n\\n    npm install mime\\n\\n## API - Queries\\n\\n### mime.lookup(path)\\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\\n\\n    var mime = require('mime');\\n\\n    mime.lookup('/path/to/file.txt');         // => 'text/plain'\\n    mime.lookup('file.txt');                  // => 'text/plain'\\n    mime.lookup('.TXT');                      // => 'text/plain'\\n    mime.lookup('htm');                       // => 'text/html'\\n\\n### mime.default_type\\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\\n\\n### mime.extension(type)\\nGet the default extension for `type`\\n\\n    mime.extension('text/html');                 // => 'html'\\n    mime.extension('application/octet-stream');  // => 'bin'\\n\\n### mime.charsets.lookup()\\n\\nMap mime-type to charset\\n\\n    mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n\\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\\n\\n## API - Defining Custom Types\\n\\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\\n\\n### mime.define()\\n\\nAdd custom mime/extension mappings\\n\\n    mime.define({\\n        'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n        'application/x-my-type': ['x-mt', 'x-mtt'],\\n        // etc ...\\n    });\\n\\n    mime.lookup('x-sft');                 // => 'text/x-some-format'\\n\\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\\n\\n    mime.extension('text/x-some-format'); // => 'x-sf'\\n\\n### mime.load(filepath)\\n\\nLoad mappings from an Apache \\\".types\\\" format file\\n\\n    mime.load('./my_project.types');\\n\\nThe .types file format is simple -  See the `types` dir for examples.\\n\",\n   29    \"readmeFilename\": \"README.md\",\n   30    \"bugs\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\mime\\README.md:\n   12  \n   13  ### mime.lookup(path)\n   14: Get the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n   15  \n   16      var mime = require('mime');\n   ..\n   22  \n   23  ### mime.default_type\n   24: Sets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n   25  \n   26  ### mime.extension(type)\n   ..\n   28  \n   29      mime.extension('text/html');                 // => 'html'\n   30:     mime.extension('application/octet-stream');  // => 'bin'\n   31  \n   32  ### mime.charsets.lookup()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\mime\\test.js:\n   27  eq('text/plain', mime.lookup('/txt'));         // extension-less ()\n   28  eq('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\n   29: eq('application/octet-stream', mime.lookup('text.nope')); // unrecognized\n   30  eq('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n   31  \n   ..\n   36  eq('txt', mime.extension(mime.types.text));\n   37  eq('html', mime.extension(mime.types.htm));\n   38: eq('bin', mime.extension('application/octet-stream'));\n   39: eq('bin', mime.extension('application/octet-stream '));\n   40  eq('html', mime.extension(' text/html; charset=UTF-8'));\n   41  eq('html', mime.extension('text/html; charset=UTF-8 '));\n   ..\n   51  \n   52  eq('application/font-woff', mime.lookup('file.woff'));\n   53: eq('application/octet-stream', mime.lookup('file.buffer'));\n   54  eq('audio/mp4', mime.lookup('file.m4a'));\n   55  eq('font/opentype', mime.lookup('file.otf'));\n   ..\n   61  eq('UTF-8', mime.charsets.lookup('text/plain'));\n   62  eq(undefined, mime.charsets.lookup(mime.types.js));\n   63: eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n   64  \n   65  //\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\mime\\types\\mime.types:\n  152  # application/ocsp-request\n  153  # application/ocsp-response\n  154: application/octet-stream	bin dms lrf mar so dist distz pkg bpk dump elc deploy\n  155  application/oda					oda\n  156  application/oebps-package+xml			opf\n  ...\n  653  # application/vnd.ntt-local.file-transfer\n  654  # application/vnd.ntt-local.sip-ta_remote\n  655: # application/vnd.ntt-local.sip-ta_tcp_stream\n  656  application/vnd.oasis.opendocument.chart		odc\n  657  application/vnd.oasis.opendocument.chart-template	otc\n  ...\n  674  # application/vnd.oftn.l10n+json\n  675  # application/vnd.oipf.contentaccessdownload+xml\n  676: # application/vnd.oipf.contentaccessstreaming+xml\n  677  # application/vnd.oipf.cspg-hexbinary\n  678  # application/vnd.oipf.dae.svg+xml\n  ...\n  836  # application/vnd.radisys.msml-audit-conn+xml\n  837  # application/vnd.radisys.msml-audit-dialog+xml\n  838: # application/vnd.radisys.msml-audit-stream+xml\n  839  # application/vnd.radisys.msml-conf+xml\n  840  # application/vnd.radisys.msml-dialog+xml\n  ...\n  902  application/vnd.stepmania.package		smzip\n  903  application/vnd.stepmania.stepchart		sm\n  904: # application/vnd.street-stream\n  905  application/vnd.sun.xml.calc			sxc\n  906  application/vnd.sun.xml.calc.template		stc\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\mime\\types\\node.types:\n   25  # Why: semi-standard extension w/in the node community\n   26  # Added by: tootallnate\n   27: application/octet-stream  buffer\n   28  \n   29  # What: The \"protected\" MP-4 formats used by iTunes.\n   30: # Why: Required for streaming music to browsers (?)\n   31  # Added by: broofa\n   32  application/mp4  m4p\n   ..\n   39  \n   40  # What: EventSource mime type\n   41: # Why: mime type of Server-Sent Events stream\n   42: # http://www.w3.org/TR/eventsource/#text-event-stream\n   43  # Added by: francois2metz\n   44: text/event-stream  event-stream\n   45  \n   46  # What: Mozilla App manifest mime type\n   ..\n   65  text/plain  ini\n   66  \n   67: # What: DASH Adaptive Streaming manifest\n   68: # Why: https://developer.mozilla.org/en-US/docs/DASH_Adaptive_Streaming_for_HTML_5_Video\n   69  # Added by: eelcocramer\n   70  application/dash+xml mdp\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\streamsink\\index.js:\n    1: var stream = require('stream');\n    2  var util = require('util');\n    3  \n    4: module.exports = StreamSink;\n    5: StreamSink.fromBuffer = fromBuffer;\n    6: StreamSink.fromBufferList = fromBufferList;\n    7  \n    8  function fromBuffer(buffer, options) {\n    .\n   11  \n   12  function fromBufferList(bufferList, options) {\n   13:   var sink = new StreamSink(options);\n   14    sink.buffer = bufferList;\n   15    sink.length = 0;\n   ..\n   20  }\n   21  \n   22: util.inherits(StreamSink, stream.Writable);\n   23: function StreamSink(options) {\n   24:   stream.Writable.call(this, options);\n   25    this.buffer = [];\n   26    this.length = 0;\n   27  }\n   28  \n   29: StreamSink.prototype._write = function(chunk, encoding, callback) {\n   30    this.buffer.push(chunk);\n   31    this.length += chunk.length;\n   ..\n   33  };\n   34  \n   35: StreamSink.prototype.createReadStream = function(options) {\n   36:   var s = new stream.Readable(options);\n   37    s.buffer = this.buffer;\n   38    s._read = function(size) {\n   ..\n   45  };\n   46  \n   47: StreamSink.prototype.toString = function(encoding, start, end) {\n   48    return this.toBuffer().toString(encoding, start, end);\n   49  };\n   50  \n   51: StreamSink.prototype.toBuffer = function() {\n   52    return Buffer.concat(this.buffer, this.length);\n   53  };\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\streamsink\\package.json:\n    1  {\n    2:   \"name\": \"streamsink\",\n    3    \"version\": \"1.2.0\",\n    4:   \"description\": \"pipe to a buffer, then create readable streams from it\",\n    5    \"main\": \"index.js\",\n    6    \"scripts\": {\n    .\n    9    \"repository\": {\n   10      \"type\": \"git\",\n   11:     \"url\": \"git://github.com/andrewrk/node-streamsink.git\"\n   12    },\n   13    \"author\": {\n   ..\n   17    \"license\": \"MIT\",\n   18    \"bugs\": {\n   19:     \"url\": \"https://github.com/andrewrk/node-streamsink/issues\"\n   20    },\n   21:   \"homepage\": \"https://github.com/andrewrk/node-streamsink\",\n   22:   \"_id\": \"streamsink@1.2.0\",\n   23    \"dist\": {\n   24      \"shasum\": \"efafee9f1e22d3591ed7de3dcaa95c3f5e79f73c\",\n   25:     \"tarball\": \"http://registry.npmjs.org/streamsink/-/streamsink-1.2.0.tgz\"\n   26    },\n   27:   \"_from\": \"streamsink@~1.2.0\",\n   28    \"_npmVersion\": \"1.3.10\",\n   29    \"_npmUser\": {\n   ..\n   39    \"directories\": {},\n   40    \"_shasum\": \"efafee9f1e22d3591ed7de3dcaa95c3f5e79f73c\",\n   41:   \"_resolved\": \"https://registry.npmjs.org/streamsink/-/streamsink-1.2.0.tgz\"\n   42  }\n   43  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\streamsink\\README.md:\n    1: # node-streamsink\n    2  \n    3: Pipe a stream to a `StreamSink`, and then you can create a `ReadableStream`,\n    4: `String`, or `Buffer` from the `StreamSink`.\n    5  \n    6  ## Usage\n    7  \n    8  ```js\n    9: var StreamSink = require('streamsink');\n   10  \n   11: var sink = new StreamSink();\n   12  \n   13: fs.createReadStream(\"foo.txt\").pipe(sink);\n   14  sink.on('finish', function() {\n   15    // sink has now buffered foo.txt\n   16:   sink.createReadStream().pipe(someDestination);\n   17  \n   18    // or use toString([encoding], [start], [end])\n   ..\n   24  \n   25  // you can also create instances from a list of buffers\n   26: var sink = StreamSink.fromBufferList([new Buffer(\"aoeu\"), new Buffer(\"foo\")]);\n   27  ```\n   28  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\node_modules\\streamsink\\test.js:\n    1: var StreamSink = require('./');\n    2  var assert = require('assert');\n    3  \n    4: var sink = new StreamSink();\n    5  sink.on('finish', function() {\n    6:   var s = sink.createReadStream();\n    7:   var newSink = new StreamSink();\n    8    newSink.on('finish', function() {\n    9      assert.strictEqual(newSink.toString(), \"hi\");\n   ..\n   13      assert.strictEqual(buf[1], 105);\n   14  \n   15:     var s2 = StreamSink.fromBuffer(new Buffer(\"aoeu\"));\n   16      assert.strictEqual(s2.toString(), \"aoeu\");\n   17  \n   18:     var s3 = StreamSink.fromBufferList([new Buffer(\"aoeu\"), new Buffer(\"asdf\")]);\n   19      assert.strictEqual(s3.toString(), \"aoeuasdf\");\n   20  \n   21      console.log(\"OK\");\n   22    });\n   23:   sink.createReadStream().pipe(newSink);\n   24  });\n   25  sink.write(\"hi\");\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-static\\test\\test.js:\n    2  var path = require('path');\n    3  var assert = require('assert');\n    4: var StreamSink = require('streamsink');\n    5  \n    6  var dir = path.join(__dirname, \"public\");\n    .\n   41  \n   42    function testSymlink(cb) {\n   43:     var sink = new StreamSink();\n   44      sink.on('finish', function() {\n   45        assert.strictEqual(sink.toString(), \"aoeu1234\\n\")\n   ..\n   56  \n   57    function testSymlinkDir(cb) {\n   58:     var sink = new StreamSink();\n   59      sink.on('finish', function() {\n   60        assert.strictEqual(sink.toString(), \"zzzz\\n\")\n   ..\n   72    function testFooTxt(cb) {\n   73      middleware({url: '/unrelated'}, null, function() {\n   74:       var sink = new StreamSink();\n   75        sink.on('finish', function() {\n   76          assert.strictEqual(sink.toString(), \"hi\\n\")\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-timeout\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\connect-timeout\\node_modules\\http-errors\\node_modules\\statuses\\package.json:\n   28      \"mocha\": \"1\",\n   29      \"request\": \"^2.44.0\",\n   30:     \"stream-to-array\": \"^2.0.2\"\n   31    },\n   32    \"scripts\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\cookie-session\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\csurf\\node_modules\\csrf\\node_modules\\uid-safe\\node_modules\\mz\\README.md:\n   93  Currently, the plans are to eventually support:\n   94  \n   95: - ECMAScript7 Streams\n   96  \n   97  [bluebird]: https://github.com/petkaantonov/bluebird\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\csurf\\node_modules\\http-errors\\node_modules\\statuses\\package.json:\n   28      \"mocha\": \"1\",\n   29      \"request\": \"^2.44.0\",\n   30:     \"stream-to-array\": \"^2.0.2\"\n   31    },\n   32    \"scripts\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\errorhandler\\node_modules\\accepts\\node_modules\\mime-types\\README.md:\n   12  \n   13  - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`,\n   14:   so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`.\n   15  - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`.\n   16  - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db)\n   ..\n   65  \n   66  ```js\n   67: mime.extension('application/octet-stream') // 'bin'\n   68  ```\n   69  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\errorhandler\\node_modules\\accepts\\node_modules\\mime-types\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\errorhandler\\node_modules\\accepts\\node_modules\\mime-types\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\History.md:\n  212      - deps: serve-static@~1.5.2\n  213    * deps: send@0.8.2\n  214:     - Work around `fd` leak in Node.js 0.10 for `fs.ReadStream`\n  215  \n  216  3.16.5 / 2014-08-11\n  ...\n  517   * update send to 0.4.0\n  518     - Calculate ETag with md5 for reduced collisions\n  519:    - Ignore stream errors after request ends\n  520     - deps: debug@0.8.1\n  521  \n  ...\n  863    * add static-files example\n  864    * add \"x-powered-by\" setting (`app.disable('x-powered-by')`)\n  865:   * add \"application/octet-stream\" redirect Accept test case. Closes #1317\n  866  \n  867  3.0.0rc4 / 2012-08-30\n  ...\n 1418    * Changed view engine signature. no longer `engine.render(str, options, callback)`, now `engine.compile(str, options) -> Function`, the returned function accepts `fn(locals)`.\n 1419    * Fixed `req.param()` bug returning Array.prototype methods. Closes #552\n 1420:   * Fixed; using `Stream#pipe()` instead of `sys.pump()` in `res.sendfile()`\n 1421    * Fixed; using _qs_ module instead of _querystring_\n 1422    * Fixed; strip unsafe chars from jsonp callbacks\n 1423:   * Removed \"stream threshold\" setting\n 1424  \n 1425  1.0.8 / 2011-03-01\n ....\n 1522    * Added extending of flash formatters via `app.flashFormatters`\n 1523    * Added flash formatter support. Closes #411\n 1524:   * Added streaming support to `res.sendfile()` using `sys.pump()` when >= \"stream threshold\"\n 1525:   * Added _stream threshold_ setting for `res.sendfile()`\n 1526    * Added `res.send()` __HEAD__ support\n 1527    * Added `res.clearCookie()`\n ....\n 1657    * Added callback function param to Request#error()\n 1658    * Added Request#sendHead()\n 1659:   * Added Request#stream()\n 1660    * Added support for Request#respond(304, null) for empty response bodies\n 1661    * Added ETag support to Request#sendfile()\n 1662:   * Added options to Request#sendfile(), passed to fs.createReadStream()\n 1663    * Added filename arg to Request#download()\n 1664    * Performance enhanced due to pre-reversing plugins so that plugins.reverse() is not called on each request\n 1665    * Performance enhanced by preventing several calls to toLowerCase() in Router#match()\n 1666:   * Changed; Request#sendfile() now streams\n 1667    * Changed; Renamed Request#halt() to Request#respond(). Closes #289\n 1668    * Changed; Using sys.inspect() instead of JSON.encode() for error output\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\lib\\request.js:\n  402   * For example if the value were \"client, proxy1, proxy2\"\n  403   * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n  404:  * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n  405   * \"proxy2\" were trusted.\n  406   *\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\lib\\response.js:\n  378    }\n  379  \n  380:   // streaming\n  381:   function stream(stream) {\n  382      if (done) return;\n  383      cleanup();\n  384:     if (fn) stream.on('end', fn);\n  385    }\n  386  \n  ...\n  394    file.on('error', error);\n  395    file.on('directory', next);\n  396:   file.on('stream', stream);\n  397    file.pipe(this);\n  398    this.on('finish', cleanup);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\commander\\History.md:\n   59  \n   60    * fix issue #56\n   61:   * fix tty.setRawMode(mode) was moved to tty.ReadStream#setRawMode() (i.e. process.stdin.setRawMode())\n   62  \n   63  1.0.0 / 2012-07-05 \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\commander\\node_modules\\keypress\\index.js:\n   18  var exports = module.exports = keypress;\n   19  \n   20: exports.enableMouse = function (stream) {\n   21:   stream.write('\\x1b' +'[?1000h')\n   22  }\n   23  \n   24: exports.disableMouse = function (stream) {\n   25:   stream.write('\\x1b' +'[?1000l')\n   26  }\n   27  \n   28  \n   29  /**\n   30:  * accepts a readable Stream instance and makes it emit \"keypress\" events\n   31   */\n   32  \n   33: function keypress(stream) {\n   34:   if (isEmittingKeypress(stream)) return;\n   35:   stream._emitKeypress = true;\n   36  \n   37    function onData(b) {\n   38:     if (stream.listeners('keypress').length > 0) {\n   39:       emitKey(stream, b);\n   40      } else {\n   41        // Nobody's watching anyway\n   42:       stream.removeListener('data', onData);\n   43:       stream.on('newListener', onNewListener);\n   44      }\n   45    }\n   ..\n   47    function onNewListener(event) {\n   48      if (event == 'keypress') {\n   49:       stream.on('data', onData);\n   50:       stream.removeListener('newListener', onNewListener);\n   51      }\n   52    }\n   53  \n   54:   if (stream.listeners('keypress').length > 0) {\n   55:     stream.on('data', onData);\n   56    } else {\n   57:     stream.on('newListener', onNewListener);\n   58    }\n   59  }\n   60  \n   61  /**\n   62:  * Returns `true` if the stream is already emitting \"keypress\" events.\n   63   * `false` otherwise.\n   64   */\n   65  \n   66: function isEmittingKeypress(stream) {\n   67:   var rtn = stream._emitKeypress;\n   68    if (!rtn) {\n   69      // hack: check for the v0.6.x \"data\" event\n   70:     stream.listeners('data').forEach(function (l) {\n   71        if (l.name == 'onData' && /emitKey/.test(l.toString())) {\n   72          rtn = true;\n   73:         stream._emitKeypress = true;\n   74        }\n   75      });\n   ..\n   77    if (!rtn) {\n   78      // hack: check for the v0.6.x \"newListener\" event\n   79:     stream.listeners('newListener').forEach(function (l) {\n   80        if (l.name == 'onNewListener' && /keypress/.test(l.toString())) {\n   81          rtn = true;\n   82:         stream._emitKeypress = true;\n   83        }\n   84      });\n   ..\n  121      /^(?:\\x1b+)(O|N|\\[|\\[\\[)(?:(\\d+)(?:;(\\d+))?([~^$])|(?:1;)?(\\d+)?([a-zA-Z]))/;\n  122  \n  123: function emitKey(stream, s) {\n  124    var ch,\n  125        key = {\n  ...\n  134      if (s[0] > 127 && s[1] === undefined) {\n  135        s[0] -= 128;\n  136:       s = '\\x1b' + s.toString(stream.encoding || 'utf-8');\n  137      } else {\n  138:       s = s.toString(stream.encoding || 'utf-8');\n  139      }\n  140    }\n  ...\n  301      // Probably a paste, since it wasn't a control sequence.\n  302      Array.prototype.forEach.call(s, function(c) {\n  303:       emitKey(stream, c);\n  304      });\n  305      return;\n  ...\n  340  \n  341    if (key && key.name == 'mouse') {\n  342:     stream.emit('mousepress', key)\n  343    } else if (key || ch) {\n  344:     stream.emit('keypress', ch, key);\n  345    }\n  346  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\commander\\node_modules\\keypress\\package.json:\n    2    \"name\": \"keypress\",\n    3    \"version\": \"0.1.0\",\n    4:   \"description\": \"Make any Node ReadableStream emit \\\"keypress\\\" events\",\n    5    \"author\": {\n    6      \"name\": \"Nathan Rajlich\",\n    .\n   22    ],\n   23    \"license\": \"MIT\",\n   24:   \"readme\": \"keypress\\n========\\n### Make any Node ReadableStream emit \\\"keypress\\\" events\\n\\n\\nPrevious to Node `v0.8.x`, there was an undocumented `\\\"keypress\\\"` event that\\n`process.stdin` would emit when it was a TTY. Some people discovered this hidden\\ngem, and started using it in their own code.\\n\\nNow in Node `v0.8.x`, this `\\\"keypress\\\"` event does not get emitted by default,\\nbut rather only when it is being used in conjuction with the `readline` (or by\\nextension, the `repl`) module.\\n\\nThis module is the exact logic from the node `v0.8.x` releases ripped out into its\\nown module.\\n\\n__Bonus:__ Now with mouse support!\\n\\nInstallation\\n------------\\n\\nInstall with `npm`:\\n\\n``` bash\\n$ npm install keypress\\n```\\n\\nOr add it to the `\\\"dependencies\\\"` section of your _package.json_ file.\\n\\n\\nExample\\n-------\\n\\n#### Listening for \\\"keypress\\\" events\\n\\n``` js\\nvar keypress = require('keypress');\\n\\n// make `process.stdin` begin emitting \\\"keypress\\\" events\\nkeypress(process.stdin);\\n\\n// listen for the \\\"keypress\\\" event\\nprocess.stdin.on('keypress', function (ch, key) {\\n  console.log('got \\\"keypress\\\"', key);\\n  if (key && key.ctrl && key.name == 'c') {\\n    process.stdin.pause();\\n  }\\n});\\n\\nprocess.stdin.setRawMode(true);\\nprocess.stdin.resume();\\n```\\n\\n#### Listening for \\\"mousepress\\\" events\\n\\n``` js\\nvar keypress = require('keypress');\\n\\n// make `process.stdin` begin emitting \\\"mousepress\\\" (and \\\"keypress\\\") events\\nkeypress(process.stdin);\\n\\n// you must enable the mouse events before they will begin firing\\nkeypress.enableMouse(process.stdout);\\n\\nprocess.stdin.on('mousepress', function (info) {\\n  console.log('got \\\"mousepress\\\" event at %d x %d', info.x, info.y);\\n});\\n\\nprocess.on('exit', function () {\\n  // disable mouse on exit, so that the state\\n  // is back to normal for the terminal\\n  keypress.disableMouse(process.stdout);\\n});\\n```\\n\\n\\nLicense\\n-------\\n\\n(The MIT License)\\n\\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n'Software'), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be\\nincluded in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\",\n   25    \"_id\": \"keypress@0.1.0\",\n   26    \"dist\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\commander\\node_modules\\keypress\\README.md:\n    1  keypress\n    2  ========\n    3: ### Make any Node ReadableStream emit \"keypress\" events\n    4  \n    5  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\History.md:\n  322      - Calling `res.csrfToken()` after `req.session.destroy()` will now work\n  323    * deps: express-session@~1.7.4\n  324:     - Fix `res.end` patch to call correct upstream `res.write`\n  325      - Fix response end delay for non-chunked responses\n  326    * deps: qs@1.0.2\n  ...\n  574  \n  575    * deps: compression@1.0.6\n  576:     - fix listeners for delayed stream creation\n  577:     - fix regression for certain `stream.pipe(res)` situations\n  578      - fix regression when negotiation fails\n  579  \n  ...\n  624      - Calculate ETag with md5 for reduced collisions\n  625      - Fix wrong behavior when index file matches directory\n  626:     - Ignore stream errors after request ends\n  627      - Skip directories in index file search\n  628      - deps: send@0.4.0\n  ...\n 1436  \n 1437    * Changed to `devDependencies`\n 1438:   * Fixed stream creation on `static()` __HEAD__ request. [Andreas Lind Petersen]\n 1439    * Fixed Win32 support for `static()`\n 1440    * Fixed monkey-patch issue. Closes #261\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\examples\\upload-stream.js:\n   28      // transfer to s3 etc\n   29      console.log('upload %s %s', part.name, part.filename);\n   30:     var out = fs.createWriteStream('/tmp/' + part.filename);\n   31      part.pipe(out);\n   32    });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\lib\\index.js:\n   32   *  - [responseTime](https://github.com/expressjs/response-time) calculates response-time and exposes via X-Response-Time\n   33   *  - [session](https://github.com/expressjs/session) session management support with bundled MemoryStore\n   34:  *  - [static](https://github.com/expressjs/serve-static) streaming static file server supporting `Range` and more\n   35   *  - [timeout](https://github.com/expressjs/timeout) request timeouts\n   36   *  - [urlencoded](https://github.com/expressjs/body-parser) application/x-www-form-urlencoded parser\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\bodyParser.js:\n   44   *  If you wish to create your own body parser, you may be interested in:\n   45   *\n   46:  *    - [raw-body](https://github.com/stream-utils/raw-body)\n   47   *    - [body](https://github.com/raynos/body)\n   48   *\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\limit.js:\n   23   *   you may be interested in:\n   24   *\n   25:  *     - [raw-body](https://github.com/stream-utils/raw-body)\n   26   *\n   27   *   Limit request bodies to the given size in `bytes`.\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\multipart.js:\n   60   *  to do so.\n   61   *\n   62:  * Streaming:\n   63   *\n   64:  *  When `defer` is used files are _not_ streamed to tmpfiles, you may\n   65:  *  access them via the \"part\" events and stream them accordingly:\n   66   *\n   67   *     req.form.on('part', function(part){\n   68   *       // transfer to s3 etc\n   69   *       console.log('upload %s %s', part.name, part.filename);\n   70:  *       var out = fs.createWriteStream('/tmp/' + part.filename);\n   71   *       part.pipe(out);\n   72   *     });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\staticCache.js:\n   71      // TODO: change from staticCache() -> cache()\n   72      // and make this work for any request\n   73:     req.on('static', function(stream){\n   74        var headers = res._headers\n   75          , cc = utils.parseCacheControl(headers['cache-control'] || '')\n   ..\n  107  \n  108        // validation notifiactions don't contain a steam\n  109:       if (null == stream) return;\n  110  \n  111        // add the cache object\n  ...\n  113  \n  114        // store the chunks\n  115:       stream.on('data', function(chunk){\n  116          arr.push(chunk);\n  117        });\n  118  \n  119        // flag it as complete\n  120:       stream.on('end', function(){\n  121          var cacheEntry = cache.add(key);\n  122          delete headers['x-cache']; // Clean up (TODO: others)\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\finalhandler\\index.js:\n  141  \n  142  /**\n  143:  * Unpipe everything from a stream.\n  144   *\n  145:  * @param {Object} stream\n  146   * @api private\n  147   */\n  148  \n  149  /* istanbul ignore next: implementation differs between versions */\n  150: function unpipe(stream) {\n  151:   if (typeof stream.unpipe === 'function') {\n  152      // new-style\n  153:     stream.unpipe()\n  154      return\n  155    }\n  ...\n  157    // Node.js 0.8 hack\n  158    var listener\n  159:   var listeners = stream.listeners('close')\n  160  \n  161    for (var i = 0; i < listeners.length; i++) {\n  ...\n  167  \n  168      // invoke the listener\n  169:     listener.call(stream)\n  170    }\n  171  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\finalhandler\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~2.0.0\",\n   22:     \"readable-stream\": \"~1.0.33\",\n   23      \"should\": \"~4.1.0\",\n   24      \"supertest\": \"~0.14.0\"\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\finalhandler\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\http-errors\\node_modules\\statuses\\package.json:\n   28      \"mocha\": \"1\",\n   29      \"request\": \"^2.44.0\",\n   30:     \"stream-to-array\": \"^2.0.2\"\n   31    },\n   32    \"scripts\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\morgan\\index.js:\n   59  \n   60    // options\n   61:   var stream = options.stream || process.stdout\n   62      , buffer = options.buffer;\n   63  \n   64    // buffering support\n   65    if (buffer) {\n   66:     var realStream = stream\n   67      var buf = []\n   68      var timer = null\n   ..\n   76  \n   77        if (buf.length) {\n   78:         realStream.write(buf.join(''));\n   79          buf.length = 0;\n   80        }\n   81      }\n   82  \n   83:     // swap the stream\n   84:     stream = {\n   85        write: function(str){\n   86          if (timer === null) {\n   ..\n  112  \n  113        debug('log request')\n  114:       stream.write(line + '\\n')\n  115      };\n  116  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\morgan\\README.md:\n   29  #### buffer\n   30  \n   31: Buffer duration before writing logs to the `stream`, defaults to `false`. When\n   32  set to `true`, defaults to `1000 ms`.\n   33  \n   ..\n   50  ```\n   51  \n   52: ##### stream\n   53  \n   54: Output stream for writing log lines, defaults to `process.stdout`.\n   55  \n   56  #### Predefined Formats\n   ..\n  176  var app = express()\n  177  \n  178: // create a write stream (in append mode)\n  179: var accessLogStream = fs.createWriteStream(__dirname + '/access.log', {flags: 'a'})\n  180  \n  181  // setup the logger\n  182: app.use(morgan('combined', {stream: accessLogStream}))\n  183  \n  184  app.get('/', function (req, res) {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\morgan\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\CHANGELOG.md:\n   99   * fix assertion crash when client aborts an invalid request\n  100   * (>=v0.10 only) unpipe the request when an error occurs to save resources.\n  101:  * update readable-stream to ~1.1.9\n  102   * fix assertion crash when EMFILE occurrs\n  103   * (no more assertions - only 'error' events)\n  ...\n  170  * Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\n  171  * Documentation improvements (Sven Lito, Andre Azevedo)\n  172: * Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\n  173  * Use os.tmpDir() to get tmp directory (Andrew Kelley)\n  174  * Improve package.json (Andrew Kelley, Sven Lito)\n  ...\n  184  ### v1.0.10\n  185  \n  186: * Make parts to be proper Streams (Matt Robenolt)\n  187  \n  188  ### v1.0.9\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\index.js:\n    1  exports.Form = Form;\n    2  \n    3: var stream = require('readable-stream')\n    4    , util = require('util')\n    5    , fs = require('fs')\n    .\n    8    , os = require('os')\n    9    , StringDecoder = require('string_decoder').StringDecoder\n   10:   , StreamCounter = require('stream-counter')\n   11  \n   12  var START = 0\n   ..\n   37  var LAST_BOUNDARY_SUFFIX_LEN = 4; // --\\r\\n\n   38  \n   39: util.inherits(Form, stream.Writable);\n   40  function Form(options) {\n   41    var self = this;\n   42:   stream.Writable.call(self);\n   43  \n   44    options = options || {};\n   ..\n  462  Form.prototype.onParsePartData = function(b) {\n  463    if (this.partTransferEncoding === 'base64') {\n  464:     this.backpressure = ! this.destStream.write(b.toString('ascii'), 'base64');\n  465    } else {\n  466:     this.backpressure = ! this.destStream.write(b);\n  467    }\n  468  }\n  469  \n  470  Form.prototype.onParsePartEnd = function() {\n  471:   if (this.destStream) {\n  472      flushWriteCbs(this);\n  473:     var s = this.destStream;\n  474      process.nextTick(function() {\n  475        s.end();\n  ...\n  498    }\n  499  \n  500:   self.destStream = new stream.PassThrough();\n  501:   self.destStream.on('drain', function() {\n  502      flushWriteCbs(self);\n  503    });\n  504:   self.destStream.headers = self.partHeaders;\n  505:   self.destStream.name = self.partName;\n  506:   self.destStream.filename = self.partFilename;\n  507:   self.destStream.byteOffset = self.bytesReceived + offset;\n  508:   var partContentLength = self.destStream.headers['content-length'];\n  509:   self.destStream.byteCount = partContentLength ? parseInt(partContentLength, 10) :\n  510:     self.bytesExpected ? (self.bytesExpected - self.destStream.byteOffset -\n  511        self.boundary.length - LAST_BOUNDARY_SUFFIX_LEN) :\n  512      undefined;\n  513  \n  514:   self.emit('part', self.destStream);\n  515:   if (self.destStream.filename == null && self.autoFields) {\n  516:     handleField(self, self.destStream);\n  517:   } else if (self.destStream.filename != null && self.autoFiles) {\n  518:     handleFile(self, self.destStream);\n  519    } else {\n  520      beginFlush(self);\n  521:     self.destStream.on('end', function(){\n  522        endFlush(self);\n  523      });\n  ...\n  570  }\n  571  \n  572: function handleFile(self, fileStream) {\n  573    if (self.error) return;\n  574    var file = {\n  575:     fieldName: fileStream.name,\n  576:     originalFilename: fileStream.filename,\n  577:     path: uploadPath(self.uploadDir, fileStream.filename),\n  578:     headers: fileStream.headers,\n  579    };\n  580:   beginFlush(self); // flush to write stream\n  581:   file.ws = fs.createWriteStream(file.path);\n  582    self.openedFiles.push(file);\n  583:   fileStream.pipe(file.ws);\n  584:   var counter = new StreamCounter();\n  585    var seenBytes = 0;\n  586:   fileStream.pipe(counter);\n  587:   var hashWorkaroundStream\n  588      , hash = null;\n  589    if (self.hash) {\n  590:     // workaround stream because https://github.com/joyent/node/issues/5216\n  591:     hashWorkaroundStream = stream.Writable();\n  592      hash = crypto.createHash(self.hash);\n  593:     hashWorkaroundStream._write = function(buffer, encoding, callback) {\n  594        hash.update(buffer);\n  595        callback();\n  596      };\n  597:     fileStream.pipe(hashWorkaroundStream);\n  598    }\n  599    counter.on('progress', function() {\n  ...\n  602      self.totalFileSize += deltaBytes;\n  603      if (self.totalFileSize > self.maxFilesSize) {\n  604:       if (hashWorkaroundStream) fileStream.unpipe(hashWorkaroundStream);\n  605:       fileStream.unpipe(counter);\n  606:       fileStream.unpipe(file.ws);\n  607        self.handleError(new Error(\"maxFilesSize \" + self.maxFilesSize + \" exceeded\"));\n  608      }\n  ...\n  614      if (hash) file.hash = hash.digest('hex');\n  615      file.size = counter.bytes;\n  616:     self.emit('file', fileStream.name, file);\n  617      endFlush(self);\n  618    });\n  619:   beginFlush(self); // flush from file stream\n  620:   fileStream.on('end', function(){\n  621      endFlush(self);\n  622    });\n  623  }\n  624  \n  625: function handleField(self, fieldStream) {\n  626    var value = '';\n  627    var decoder = new StringDecoder(self.encoding);\n  628  \n  629    beginFlush(self);\n  630:   fieldStream.on('readable', function() {\n  631:     var buffer = fieldStream.read();\n  632      if (!buffer) return;\n  633  \n  ...\n  640    });\n  641  \n  642:   fieldStream.on('end', function() {\n  643:     self.emit('field', fieldStream.name, value);\n  644      endFlush(self);\n  645    });\n  ...\n  651    self.partFilename = null;\n  652    self.partTransferEncoding = 'binary';\n  653:   self.destStream = null;\n  654  \n  655    self.headerFieldDecoder = new StringDecoder(self.encoding);\n  ...\n  679        self.onParsePartEnd();\n  680      } else if (self.state !== END) {\n  681:       self.handleError(new Error('stream ended unexpectedly'));\n  682      }\n  683      self.finished = true;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\package.json:\n    2    \"name\": \"multiparty\",\n    3    \"version\": \"3.3.2\",\n    4:   \"description\": \"multipart/form-data parser which supports streaming\",\n    5    \"repository\": {\n    6      \"type\": \"git\",\n    .\n   11      \"upload\",\n   12      \"formidable\",\n   13:     \"stream\",\n   14      \"s3\"\n   15    ],\n   ..\n   29    \"license\": \"MIT\",\n   30    \"dependencies\": {\n   31:     \"readable-stream\": \"~1.1.9\",\n   32:     \"stream-counter\": \"~0.2.0\"\n   33    },\n   34    \"gitHead\": \"96e1b70c7a9844689f85ba56e1c4437240ae58ea\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\README.md:\n    9  ### Why the fork?\n   10  \n   11:  * This module uses the Node.js v0.10 streams properly, *even in Node.js v0.8*\n   12   * It will not create a temp file for you unless you want it to.\n   13   * Counts bytes and does math to help you figure out the `Content-Length` of\n   14     each part.\n   15:  * You can easily stream uploads to s3 with\n   16     [knox](https://github.com/LearnBoost/knox), for [example](examples/s3.js).\n   17   * Less bugs. This code is simpler, has all deprecated functionality removed,\n   18:    has cleaner tests, and does not try to do anything beyond multipart stream\n   19     parsing.\n   20  \n   ..\n  188  \n  189  Emitted when a part is encountered in the request. `part` is a\n  190: `ReadableStream`. It also has the following properties:\n  191  \n  192   * `headers` - the headers for this part. For example, you may be interested\n  ...\n  217  **By default multiparty will not touch your hard drive.** But if you add this\n  218  listener, multiparty automatically sets `form.autoFiles` to `true` and will\n  219: stream uploads to disk for you. \n  220  \n  221  **The max bytes accepted per request can be specified with `maxFilesSize`.**\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\duplex.js:\n    1: module.exports = require(\"./lib/_stream_duplex.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\float.patch:\n    1: diff --git a/lib/_stream_duplex.js b/lib/_stream_duplex.js\n    2  index c5a741c..a2e0d8e 100644\n    3: --- a/lib/_stream_duplex.js\n    4: +++ b/lib/_stream_duplex.js\n    5  @@ -26,8 +26,8 @@\n    6   \n    7   module.exports = Duplex;\n    8   var util = require('util');\n    9: -var Readable = require('_stream_readable');\n   10: -var Writable = require('_stream_writable');\n   11: +var Readable = require('./_stream_readable');\n   12: +var Writable = require('./_stream_writable');\n   13   \n   14   util.inherits(Duplex, Readable);\n   15   \n   16: diff --git a/lib/_stream_passthrough.js b/lib/_stream_passthrough.js\n   17  index a5e9864..330c247 100644\n   18: --- a/lib/_stream_passthrough.js\n   19: +++ b/lib/_stream_passthrough.js\n   20  @@ -25,7 +25,7 @@\n   21   \n   22   module.exports = PassThrough;\n   23   \n   24: -var Transform = require('_stream_transform');\n   25: +var Transform = require('./_stream_transform');\n   26   var util = require('util');\n   27   util.inherits(PassThrough, Transform);\n   28   \n   29: diff --git a/lib/_stream_readable.js b/lib/_stream_readable.js\n   30  index 0c3fe3e..90a8298 100644\n   31: --- a/lib/_stream_readable.js\n   32: +++ b/lib/_stream_readable.js\n   33  @@ -23,10 +23,34 @@ module.exports = Readable;\n   34   Readable.ReadableState = ReadableState;\n   ..\n   46  +};\n   47  +\n   48:  var Stream = require('stream');\n   49   var util = require('util');\n   50  +if (!util.isUndefined) {\n   ..\n   55  +}\n   56   var StringDecoder;\n   57: -var debug = util.debuglog('stream');\n   58  +var debug;\n   59  +if (util.debuglog)\n   60: +  debug = util.debuglog('stream');\n   61  +else try {\n   62: +  debug = require('debuglog')('stream');\n   63  +} catch (er) {\n   64  +  debug = function() {};\n   65  +}\n   66   \n   67:  util.inherits(Readable, Stream);\n   68   \n   69  @@ -380,7 +404,7 @@ function chunkInvalid(state, chunk) {\n   70   \n   71   \n   72:  function onEofChunk(stream, state) {\n   73  -  if (state.decoder && !state.ended) {\n   74  +  if (state.decoder && !state.ended && state.decoder.end) {\n   ..\n   76       if (chunk && chunk.length) {\n   77         state.buffer.push(chunk);\n   78: diff --git a/lib/_stream_transform.js b/lib/_stream_transform.js\n   79  index b1f9fcc..b0caf57 100644\n   80: --- a/lib/_stream_transform.js\n   81: +++ b/lib/_stream_transform.js\n   82  @@ -64,8 +64,14 @@\n   83   \n   84   module.exports = Transform;\n   85   \n   86: -var Duplex = require('_stream_duplex');\n   87: +var Duplex = require('./_stream_duplex');\n   88   var util = require('util');\n   89  +if (!util.isUndefined) {\n   ..\n   96   \n   97   \n   98: diff --git a/lib/_stream_writable.js b/lib/_stream_writable.js\n   99  index ba2e920..f49288b 100644\n  100: --- a/lib/_stream_writable.js\n  101: +++ b/lib/_stream_writable.js\n  102  @@ -27,6 +27,12 @@ module.exports = Writable;\n  103   Writable.WritableState = WritableState;\n  ...\n  110  +  }\n  111  +}\n  112:  var Stream = require('stream');\n  113   \n  114:  util.inherits(Writable, Stream);\n  115: @@ -119,7 +125,7 @@ function WritableState(options, stream) {\n  116   function Writable(options) {\n  117     // Writable ctor is applied to Duplexes, though they're not\n  118     // instanceof Writable, they're instanceof Readable.\n  119: -  if (!(this instanceof Writable) && !(this instanceof Stream.Duplex))\n  120: +  if (!(this instanceof Writable) && !(this instanceof require('./_stream_duplex')))\n  121       return new Writable(options);\n  122   \n  123     this._writableState = new WritableState(options, this);\n  124: diff --git a/test/simple/test-stream-big-push.js b/test/simple/test-stream-big-push.js\n  125  index e3787e4..8cd2127 100644\n  126: --- a/test/simple/test-stream-big-push.js\n  127: +++ b/test/simple/test-stream-big-push.js\n  128  @@ -21,7 +21,7 @@\n  129   \n  130   var common = require('../common');\n  131   var assert = require('assert');\n  132: -var stream = require('stream');\n  133: +var stream = require('../../');\n  134   var str = 'asdfasdfasdfasdfasdf';\n  135   \n  136:  var r = new stream.Readable({\n  137: diff --git a/test/simple/test-stream-end-paused.js b/test/simple/test-stream-end-paused.js\n  138  index bb73777..d40efc7 100644\n  139: --- a/test/simple/test-stream-end-paused.js\n  140: +++ b/test/simple/test-stream-end-paused.js\n  141  @@ -25,7 +25,7 @@ var gotEnd = false;\n  142   \n  143:  // Make sure we don't miss the end event for paused 0-length streams\n  144   \n  145: -var Readable = require('stream').Readable;\n  146  +var Readable = require('../../').Readable;\n  147:  var stream = new Readable();\n  148   var calledRead = false;\n  149:  stream._read = function() {\n  150: diff --git a/test/simple/test-stream-pipe-after-end.js b/test/simple/test-stream-pipe-after-end.js\n  151  index b46ee90..0be8366 100644\n  152: --- a/test/simple/test-stream-pipe-after-end.js\n  153: +++ b/test/simple/test-stream-pipe-after-end.js\n  154  @@ -22,8 +22,8 @@\n  155   var common = require('../common');\n  156   var assert = require('assert');\n  157   \n  158: -var Readable = require('_stream_readable');\n  159: -var Writable = require('_stream_writable');\n  160: +var Readable = require('../../lib/_stream_readable');\n  161: +var Writable = require('../../lib/_stream_writable');\n  162   var util = require('util');\n  163   \n  164   util.inherits(TestReadable, Readable);\n  165: diff --git a/test/simple/test-stream-pipe-cleanup.js b/test/simple/test-stream-pipe-cleanup.js\n  166  deleted file mode 100644\n  167  index f689358..0000000\n  168: --- a/test/simple/test-stream-pipe-cleanup.js\n  169  +++ /dev/null\n  170  @@ -1,122 +0,0 @@\n  ...\n  190  -// USE OR OTHER DEALINGS IN THE SOFTWARE.\n  191  -\n  192: -// This test asserts that Stream.prototype.pipe does not leave listeners\n  193  -// hanging on the source or dest.\n  194  -\n  195  -var common = require('../common');\n  196: -var stream = require('stream');\n  197  -var assert = require('assert');\n  198  -var util = require('util');\n  ...\n  201  -  this.writable = true;\n  202  -  this.endCalls = 0;\n  203: -  stream.Stream.call(this);\n  204  -}\n  205: -util.inherits(Writable, stream.Stream);\n  206  -Writable.prototype.end = function() {\n  207  -  this.endCalls++;\n  ...\n  214  -function Readable() {\n  215  -  this.readable = true;\n  216: -  stream.Stream.call(this);\n  217  -}\n  218: -util.inherits(Readable, stream.Stream);\n  219  -\n  220  -function Duplex() {\n  ...\n  291  -assert.equal(w.listeners('end').length, 0);\n  292  -assert.equal(w.listeners('close').length, 0);\n  293: diff --git a/test/simple/test-stream-pipe-error-handling.js b/test/simple/test-stream-pipe-error-handling.js\n  294  index c5d724b..c7d6b7d 100644\n  295: --- a/test/simple/test-stream-pipe-error-handling.js\n  296: +++ b/test/simple/test-stream-pipe-error-handling.js\n  297  @@ -21,7 +21,7 @@\n  298   \n  299   var common = require('../common');\n  300   var assert = require('assert');\n  301: -var Stream = require('stream').Stream;\n  302: +var Stream = require('../../').Stream;\n  303   \n  304   (function testErrorListenerCatches() {\n  305:    var source = new Stream();\n  306: diff --git a/test/simple/test-stream-pipe-event.js b/test/simple/test-stream-pipe-event.js\n  307  index cb9d5fe..56f8d61 100644\n  308: --- a/test/simple/test-stream-pipe-event.js\n  309: +++ b/test/simple/test-stream-pipe-event.js\n  310  @@ -20,7 +20,7 @@\n  311   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  312   \n  313   var common = require('../common');\n  314: -var stream = require('stream');\n  315: +var stream = require('../../');\n  316   var assert = require('assert');\n  317   var util = require('util');\n  318   \n  319: diff --git a/test/simple/test-stream-push-order.js b/test/simple/test-stream-push-order.js\n  320  index f2e6ec2..a5c9bf9 100644\n  321: --- a/test/simple/test-stream-push-order.js\n  322: +++ b/test/simple/test-stream-push-order.js\n  323  @@ -20,7 +20,7 @@\n  324   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  325   \n  326   var common = require('../common.js');\n  327: -var Readable = require('stream').Readable;\n  328  +var Readable = require('../../').Readable;\n  329   var assert = require('assert');\n  330   \n  331   var s = new Readable({\n  332: diff --git a/test/simple/test-stream-push-strings.js b/test/simple/test-stream-push-strings.js\n  333  index 06f43dc..1701a9a 100644\n  334: --- a/test/simple/test-stream-push-strings.js\n  335: +++ b/test/simple/test-stream-push-strings.js\n  336  @@ -22,7 +22,7 @@\n  337   var common = require('../common');\n  338   var assert = require('assert');\n  339   \n  340: -var Readable = require('stream').Readable;\n  341  +var Readable = require('../../').Readable;\n  342   var util = require('util');\n  343   \n  344:  util.inherits(MyStream, Readable);\n  345: diff --git a/test/simple/test-stream-readable-event.js b/test/simple/test-stream-readable-event.js\n  346  index ba6a577..a8e6f7b 100644\n  347: --- a/test/simple/test-stream-readable-event.js\n  348: +++ b/test/simple/test-stream-readable-event.js\n  349  @@ -22,7 +22,7 @@\n  350   var common = require('../common');\n  351   var assert = require('assert');\n  352   \n  353: -var Readable = require('stream').Readable;\n  354  +var Readable = require('../../').Readable;\n  355   \n  356   (function first() {\n  357     // First test, not reading when the readable is added.\n  358: diff --git a/test/simple/test-stream-readable-flow-recursion.js b/test/simple/test-stream-readable-flow-recursion.js\n  359  index 2891ad6..11689ba 100644\n  360: --- a/test/simple/test-stream-readable-flow-recursion.js\n  361: +++ b/test/simple/test-stream-readable-flow-recursion.js\n  362  @@ -27,7 +27,7 @@ var assert = require('assert');\n  363   // more data continuously, but without triggering a nextTick\n  364   // warning or RangeError.\n  365   \n  366: -var Readable = require('stream').Readable;\n  367  +var Readable = require('../../').Readable;\n  368   \n  369   // throw an error if we trigger a nextTick warning.\n  370   process.throwDeprecation = true;\n  371: diff --git a/test/simple/test-stream-unshift-empty-chunk.js b/test/simple/test-stream-unshift-empty-chunk.js\n  372  index 0c96476..7827538 100644\n  373: --- a/test/simple/test-stream-unshift-empty-chunk.js\n  374: +++ b/test/simple/test-stream-unshift-empty-chunk.js\n  375  @@ -24,7 +24,7 @@ var assert = require('assert');\n  376   \n  377:  // This test verifies that stream.unshift(Buffer(0)) or \n  378:  // stream.unshift('') does not set state.reading=false.\n  379: -var Readable = require('stream').Readable;\n  380  +var Readable = require('../../').Readable;\n  381   \n  382   var r = new Readable();\n  383   var nChunks = 10;\n  384: diff --git a/test/simple/test-stream-unshift-read-race.js b/test/simple/test-stream-unshift-read-race.js\n  385  index 83fd9fa..17c18aa 100644\n  386: --- a/test/simple/test-stream-unshift-read-race.js\n  387: +++ b/test/simple/test-stream-unshift-read-race.js\n  388  @@ -29,7 +29,7 @@ var assert = require('assert');\n  389   // 3. push() after the EOF signaling null is an error.\n  390   // 4. _read() is not called after pushing the EOF null chunk.\n  391   \n  392: -var stream = require('stream');\n  393: +var stream = require('../../');\n  394   var hwm = 10;\n  395:  var r = stream.Readable({ highWaterMark: hwm });\n  396   var chunks = 10;\n  397  @@ -51,7 +51,14 @@ r._read = function(n) {\n  ...\n  411       if (fast) {\n  412         pos += n;\n  413: diff --git a/test/simple/test-stream-writev.js b/test/simple/test-stream-writev.js\n  414  index 5b49e6e..b5321f3 100644\n  415: --- a/test/simple/test-stream-writev.js\n  416: +++ b/test/simple/test-stream-writev.js\n  417  @@ -22,7 +22,7 @@\n  418   var common = require('../common');\n  419   var assert = require('assert');\n  420   \n  421: -var stream = require('stream');\n  422: +var stream = require('../../');\n  423   \n  424   var queue = [];\n  425   for (var decode = 0; decode < 2; decode++) {\n  426: diff --git a/test/simple/test-stream2-basic.js b/test/simple/test-stream2-basic.js\n  427  index 3814bf0..248c1be 100644\n  428: --- a/test/simple/test-stream2-basic.js\n  429: +++ b/test/simple/test-stream2-basic.js\n  430  @@ -21,7 +21,7 @@\n  431   \n  432   \n  433   var common = require('../common.js');\n  434: -var R = require('_stream_readable');\n  435: +var R = require('../../lib/_stream_readable');\n  436   var assert = require('assert');\n  437   \n  438   var util = require('util');\n  439: diff --git a/test/simple/test-stream2-compatibility.js b/test/simple/test-stream2-compatibility.js\n  440  index 6cdd4e9..f0fa84b 100644\n  441: --- a/test/simple/test-stream2-compatibility.js\n  442: +++ b/test/simple/test-stream2-compatibility.js\n  443  @@ -21,7 +21,7 @@\n  444   \n  445   \n  446   var common = require('../common.js');\n  447: -var R = require('_stream_readable');\n  448: +var R = require('../../lib/_stream_readable');\n  449   var assert = require('assert');\n  450   \n  451   var util = require('util');\n  452: diff --git a/test/simple/test-stream2-finish-pipe.js b/test/simple/test-stream2-finish-pipe.js\n  453  index 39b274f..006a19b 100644\n  454: --- a/test/simple/test-stream2-finish-pipe.js\n  455: +++ b/test/simple/test-stream2-finish-pipe.js\n  456  @@ -20,7 +20,7 @@\n  457   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  458   \n  459   var common = require('../common.js');\n  460: -var stream = require('stream');\n  461: +var stream = require('../../');\n  462   var Buffer = require('buffer').Buffer;\n  463   \n  464:  var r = new stream.Readable();\n  465: diff --git a/test/simple/test-stream2-fs.js b/test/simple/test-stream2-fs.js\n  466  deleted file mode 100644\n  467  index e162406..0000000\n  468: --- a/test/simple/test-stream2-fs.js\n  469  +++ /dev/null\n  470  @@ -1,72 +0,0 @@\n  ...\n  492  -\n  493  -var common = require('../common.js');\n  494: -var R = require('_stream_readable');\n  495  -var assert = require('assert');\n  496  -\n  497  -var fs = require('fs');\n  498: -var FSReadable = fs.ReadStream;\n  499  -\n  500  -var path = require('path');\n  ...\n  506  -\n  507  -var util = require('util');\n  508: -var Stream = require('stream');\n  509  -\n  510: -util.inherits(TestWriter, Stream);\n  511  -\n  512  -function TestWriter() {\n  513: -  Stream.apply(this);\n  514  -  this.buffer = [];\n  515  -  this.length = 0;\n  ...\n  541  -\n  542  -r.pipe(w);\n  543: diff --git a/test/simple/test-stream2-httpclient-response-end.js b/test/simple/test-stream2-httpclient-response-end.js\n  544  deleted file mode 100644\n  545  index 15cffc2..0000000\n  546: --- a/test/simple/test-stream2-httpclient-response-end.js\n  547  +++ /dev/null\n  548  @@ -1,52 +0,0 @@\n  ...\n  599  -});\n  600  -\n  601: diff --git a/test/simple/test-stream2-large-read-stall.js b/test/simple/test-stream2-large-read-stall.js\n  602  index 2fbfbca..667985b 100644\n  603: --- a/test/simple/test-stream2-large-read-stall.js\n  604: +++ b/test/simple/test-stream2-large-read-stall.js\n  605  @@ -30,7 +30,7 @@ var PUSHSIZE = 20;\n  606   var PUSHCOUNT = 1000;\n  607   var HWM = 50;\n  608   \n  609: -var Readable = require('stream').Readable;\n  610  +var Readable = require('../../').Readable;\n  611   var r = new Readable({\n  ...\n  658       setTimeout(push);\n  659   }\n  660: diff --git a/test/simple/test-stream2-objects.js b/test/simple/test-stream2-objects.js\n  661  index 3e6931d..ff47d89 100644\n  662: --- a/test/simple/test-stream2-objects.js\n  663: +++ b/test/simple/test-stream2-objects.js\n  664  @@ -21,8 +21,8 @@\n  665   \n  666   \n  667   var common = require('../common.js');\n  668: -var Readable = require('_stream_readable');\n  669: -var Writable = require('_stream_writable');\n  670: +var Readable = require('../../lib/_stream_readable');\n  671: +var Writable = require('../../lib/_stream_writable');\n  672   var assert = require('assert');\n  673   \n  674   // tiny node-tap lookalike.\n  675: diff --git a/test/simple/test-stream2-pipe-error-handling.js b/test/simple/test-stream2-pipe-error-handling.js\n  676  index cf7531c..e3f3e4e 100644\n  677: --- a/test/simple/test-stream2-pipe-error-handling.js\n  678: +++ b/test/simple/test-stream2-pipe-error-handling.js\n  679  @@ -21,7 +21,7 @@\n  680   \n  681   var common = require('../common');\n  682   var assert = require('assert');\n  683: -var stream = require('stream');\n  684: +var stream = require('../../');\n  685   \n  686   (function testErrorListenerCatches() {\n  687     var count = 1000;\n  688: diff --git a/test/simple/test-stream2-pipe-error-once-listener.js b/test/simple/test-stream2-pipe-error-once-listener.js\n  689  index 5e8e3cb..53b2616 100755\n  690: --- a/test/simple/test-stream2-pipe-error-once-listener.js\n  691: +++ b/test/simple/test-stream2-pipe-error-once-listener.js\n  692  @@ -24,7 +24,7 @@ var common = require('../common.js');\n  693   var assert = require('assert');\n  694   \n  695   var util = require('util');\n  696: -var stream = require('stream');\n  697: +var stream = require('../../');\n  698   \n  699   \n  700   var Read = function() {\n  701: diff --git a/test/simple/test-stream2-push.js b/test/simple/test-stream2-push.js\n  702  index b63edc3..eb2b0e9 100644\n  703: --- a/test/simple/test-stream2-push.js\n  704: +++ b/test/simple/test-stream2-push.js\n  705  @@ -20,7 +20,7 @@\n  706   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  707   \n  708   var common = require('../common.js');\n  709: -var stream = require('stream');\n  710: +var stream = require('../../');\n  711:  var Readable = stream.Readable;\n  712:  var Writable = stream.Writable;\n  713   var assert = require('assert');\n  714: diff --git a/test/simple/test-stream2-read-sync-stack.js b/test/simple/test-stream2-read-sync-stack.js\n  715  index e8a7305..9740a47 100644\n  716: --- a/test/simple/test-stream2-read-sync-stack.js\n  717: +++ b/test/simple/test-stream2-read-sync-stack.js\n  718  @@ -21,7 +21,7 @@\n  719   \n  720   var common = require('../common');\n  721   var assert = require('assert');\n  722: -var Readable = require('stream').Readable;\n  723  +var Readable = require('../../').Readable;\n  724   var r = new Readable();\n  725   var N = 256 * 1024;\n  726   \n  727: diff --git a/test/simple/test-stream2-readable-empty-buffer-no-eof.js b/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  728  index cd30178..4b1659d 100644\n  729: --- a/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  730: +++ b/test/simple/test-stream2-readable-empty-buffer-no-eof.js\n  731  @@ -22,10 +22,9 @@\n  732   var common = require('../common');\n  733   var assert = require('assert');\n  734   \n  735: -var Readable = require('stream').Readable;\n  736  +var Readable = require('../../').Readable;\n  737   \n  ...\n  773  -  });\n  774  -}\n  775: diff --git a/test/simple/test-stream2-readable-from-list.js b/test/simple/test-stream2-readable-from-list.js\n  776  index 7c96ffe..04a96f5 100644\n  777: --- a/test/simple/test-stream2-readable-from-list.js\n  778: +++ b/test/simple/test-stream2-readable-from-list.js\n  779  @@ -21,7 +21,7 @@\n  780   \n  781   var assert = require('assert');\n  782   var common = require('../common.js');\n  783: -var fromList = require('_stream_readable')._fromList;\n  784: +var fromList = require('../../lib/_stream_readable')._fromList;\n  785   \n  786   // tiny node-tap lookalike.\n  787   var tests = [];\n  788: diff --git a/test/simple/test-stream2-readable-legacy-drain.js b/test/simple/test-stream2-readable-legacy-drain.js\n  789  index 675da8e..51fd3d5 100644\n  790: --- a/test/simple/test-stream2-readable-legacy-drain.js\n  791: +++ b/test/simple/test-stream2-readable-legacy-drain.js\n  792  @@ -22,7 +22,7 @@\n  793   var common = require('../common');\n  794   var assert = require('assert');\n  795   \n  796: -var Stream = require('stream');\n  797: +var Stream = require('../../');\n  798:  var Readable = Stream.Readable;\n  799   \n  800   var r = new Readable();\n  801: diff --git a/test/simple/test-stream2-readable-non-empty-end.js b/test/simple/test-stream2-readable-non-empty-end.js\n  802  index 7314ae7..c971898 100644\n  803: --- a/test/simple/test-stream2-readable-non-empty-end.js\n  804: +++ b/test/simple/test-stream2-readable-non-empty-end.js\n  805  @@ -21,7 +21,7 @@\n  806   \n  807   var assert = require('assert');\n  808   var common = require('../common.js');\n  809: -var Readable = require('_stream_readable');\n  810: +var Readable = require('../../lib/_stream_readable');\n  811   \n  812   var len = 0;\n  813   var chunks = new Array(10);\n  814: diff --git a/test/simple/test-stream2-readable-wrap-empty.js b/test/simple/test-stream2-readable-wrap-empty.js\n  815  index 2e5cf25..fd8a3dc 100644\n  816: --- a/test/simple/test-stream2-readable-wrap-empty.js\n  817: +++ b/test/simple/test-stream2-readable-wrap-empty.js\n  818  @@ -22,7 +22,7 @@\n  819   var common = require('../common');\n  820   var assert = require('assert');\n  821   \n  822: -var Readable = require('_stream_readable');\n  823: +var Readable = require('../../lib/_stream_readable');\n  824   var EE = require('events').EventEmitter;\n  825   \n  826:  var oldStream = new EE();\n  827: diff --git a/test/simple/test-stream2-readable-wrap.js b/test/simple/test-stream2-readable-wrap.js\n  828  index 90eea01..6b177f7 100644\n  829: --- a/test/simple/test-stream2-readable-wrap.js\n  830: +++ b/test/simple/test-stream2-readable-wrap.js\n  831  @@ -22,8 +22,8 @@\n  832   var common = require('../common');\n  833   var assert = require('assert');\n  834   \n  835: -var Readable = require('_stream_readable');\n  836: -var Writable = require('_stream_writable');\n  837: +var Readable = require('../../lib/_stream_readable');\n  838: +var Writable = require('../../lib/_stream_writable');\n  839   var EE = require('events').EventEmitter;\n  840   \n  841   var testRuns = 0, completedRuns = 0;\n  842: diff --git a/test/simple/test-stream2-set-encoding.js b/test/simple/test-stream2-set-encoding.js\n  843  index 5d2c32a..685531b 100644\n  844: --- a/test/simple/test-stream2-set-encoding.js\n  845: +++ b/test/simple/test-stream2-set-encoding.js\n  846  @@ -22,7 +22,7 @@\n  847   \n  848   var common = require('../common.js');\n  849   var assert = require('assert');\n  850: -var R = require('_stream_readable');\n  851: +var R = require('../../lib/_stream_readable');\n  852   var util = require('util');\n  853   \n  854   // tiny node-tap lookalike.\n  855: diff --git a/test/simple/test-stream2-transform.js b/test/simple/test-stream2-transform.js\n  856  index 9c9ddd8..a0cacc6 100644\n  857: --- a/test/simple/test-stream2-transform.js\n  858: +++ b/test/simple/test-stream2-transform.js\n  859  @@ -21,8 +21,8 @@\n  860   \n  861   var assert = require('assert');\n  862   var common = require('../common.js');\n  863: -var PassThrough = require('_stream_passthrough');\n  864: -var Transform = require('_stream_transform');\n  865  +var PassThrough = require('../../').PassThrough;\n  866  +var Transform = require('../../').Transform;\n  ...\n  868   // tiny node-tap lookalike.\n  869   var tests = [];\n  870: diff --git a/test/simple/test-stream2-unpipe-drain.js b/test/simple/test-stream2-unpipe-drain.js\n  871  index d66dc3c..365b327 100644\n  872: --- a/test/simple/test-stream2-unpipe-drain.js\n  873: +++ b/test/simple/test-stream2-unpipe-drain.js\n  874  @@ -22,7 +22,7 @@\n  875   \n  876   var common = require('../common.js');\n  877   var assert = require('assert');\n  878: -var stream = require('stream');\n  879: +var stream = require('../../');\n  880   var crypto = require('crypto');\n  881   \n  882   var util = require('util');\n  883: diff --git a/test/simple/test-stream2-unpipe-leak.js b/test/simple/test-stream2-unpipe-leak.js\n  884  index 99f8746..17c92ae 100644\n  885: --- a/test/simple/test-stream2-unpipe-leak.js\n  886: +++ b/test/simple/test-stream2-unpipe-leak.js\n  887  @@ -22,7 +22,7 @@\n  888   \n  889   var common = require('../common.js');\n  890   var assert = require('assert');\n  891: -var stream = require('stream');\n  892: +var stream = require('../../');\n  893   \n  894   var chunk = new Buffer('hallo');\n  895   \n  896: diff --git a/test/simple/test-stream2-writable.js b/test/simple/test-stream2-writable.js\n  897  index 704100c..209c3a6 100644\n  898: --- a/test/simple/test-stream2-writable.js\n  899: +++ b/test/simple/test-stream2-writable.js\n  900  @@ -20,8 +20,8 @@\n  901   // USE OR OTHER DEALINGS IN THE SOFTWARE.\n  902   \n  903   var common = require('../common.js');\n  904: -var W = require('_stream_writable');\n  905: -var D = require('_stream_duplex');\n  906  +var W = require('../../').Writable;\n  907  +var D = require('../../').Duplex;\n  ...\n  909   \n  910   var util = require('util');\n  911: diff --git a/test/simple/test-stream3-pause-then-read.js b/test/simple/test-stream3-pause-then-read.js\n  912  index b91bde3..2f72c15 100644\n  913: --- a/test/simple/test-stream3-pause-then-read.js\n  914: +++ b/test/simple/test-stream3-pause-then-read.js\n  915  @@ -22,7 +22,7 @@\n  916   var common = require('../common');\n  917   var assert = require('assert');\n  918   \n  919: -var stream = require('stream');\n  920: +var stream = require('../../');\n  921:  var Readable = stream.Readable;\n  922:  var Writable = stream.Writable;\n  923   \n  924  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\package.json:\n    1  {\n    2:   \"name\": \"readable-stream\",\n    3    \"version\": \"1.1.13\",\n    4:   \"description\": \"Streams3, a user-land copy of the stream library from Node.js v0.11.x\",\n    5    \"main\": \"readable.js\",\n    6    \"dependencies\": {\n    .\n   18    \"repository\": {\n   19      \"type\": \"git\",\n   20:     \"url\": \"git://github.com/isaacs/readable-stream\"\n   21    },\n   22    \"keywords\": [\n   23      \"readable\",\n   24:     \"stream\",\n   25      \"pipe\"\n   26    ],\n   ..\n   36    \"gitHead\": \"3b672fd7ae92acf5b4ffdbabf74b372a0a56b051\",\n   37    \"bugs\": {\n   38:     \"url\": \"https://github.com/isaacs/readable-stream/issues\"\n   39    },\n   40:   \"homepage\": \"https://github.com/isaacs/readable-stream\",\n   41:   \"_id\": \"readable-stream@1.1.13\",\n   42    \"_shasum\": \"f6eef764f514c89e2b9e23146a75ba106756d23e\",\n   43:   \"_from\": \"readable-stream@~1.1.9\",\n   44    \"_npmVersion\": \"1.4.23\",\n   45    \"_npmUser\": {\n   ..\n   63    \"dist\": {\n   64      \"shasum\": \"f6eef764f514c89e2b9e23146a75ba106756d23e\",\n   65:     \"tarball\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-1.1.13.tgz\"\n   66    },\n   67    \"directories\": {},\n   68:   \"_resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.13.tgz\",\n   69    \"readme\": \"ERROR: No README data found!\"\n   70  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\passthrough.js:\n    1: module.exports = require(\"./lib/_stream_passthrough.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\readable.js:\n    1: exports = module.exports = require('./lib/_stream_readable.js');\n    2: exports.Stream = require('stream');\n    3  exports.Readable = exports;\n    4: exports.Writable = require('./lib/_stream_writable.js');\n    5: exports.Duplex = require('./lib/_stream_duplex.js');\n    6: exports.Transform = require('./lib/_stream_transform.js');\n    7: exports.PassThrough = require('./lib/_stream_passthrough.js');\n    8  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\README.md:\n    1: # readable-stream\n    2  \n    3: ***Node-core streams for userland***\n    4  \n    5: [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/)\n    6: [![NPM](https://nodei.co/npm-dl/readable-stream.png&months=6&height=3)](https://nodei.co/npm/readable-stream/)\n    7  \n    8: This package is a mirror of the Streams2 and Streams3 implementations in Node-core.\n    9  \n   10: If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core.\n   11  \n   12: **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12.\n   13  \n   14: **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`\n   15  \n   16  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\transform.js:\n    1: module.exports = require(\"./lib/_stream_transform.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\writable.js:\n    1: module.exports = require(\"./lib/_stream_writable.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_duplex.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a duplex stream is just a stream that is both readable and writable.\n   23  // Since JS doesn't have multiple prototypal inheritance, this class\n   24  // prototypally inherits from Readable, and then parasitically from\n   ..\n   41  /*</replacement>*/\n   42  \n   43: var Readable = require('./_stream_readable');\n   44: var Writable = require('./_stream_writable');\n   45  \n   46  util.inherits(Duplex, Readable);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_passthrough.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a passthrough stream.\n   23: // basically just the most minimal sort of Transform stream.\n   24  // Every written chunk gets output as-is.\n   25  \n   26  module.exports = PassThrough;\n   27  \n   28: var Transform = require('./_stream_transform');\n   29  \n   30  /*<replacement>*/\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_readable.js:\n   41  /*</replacement>*/\n   42  \n   43: var Stream = require('stream');\n   44  \n   45  /*<replacement>*/\n   ..\n   54  var debug = require('util');\n   55  if (debug && debug.debuglog) {\n   56:   debug = debug.debuglog('stream');\n   57  } else {\n   58    debug = function () {};\n   ..\n   61  \n   62  \n   63: util.inherits(Readable, Stream);\n   64  \n   65: function ReadableState(options, stream) {\n   66:   var Duplex = require('./_stream_duplex');\n   67  \n   68    options = options || {};\n   ..\n   99  \n  100  \n  101:   // object stream flag. Used to make read(n) ignore n and to\n  102    // make all the buffer merging and length checks go away\n  103    this.objectMode = !!options.objectMode;\n  104  \n  105:   if (stream instanceof Duplex)\n  106      this.objectMode = this.objectMode || !!options.readableObjectMode;\n  107  \n  ...\n  132  \n  133  function Readable(options) {\n  134:   var Duplex = require('./_stream_duplex');\n  135  \n  136    if (!(this instanceof Readable))\n  ...\n  142    this.readable = true;\n  143  \n  144:   Stream.call(this);\n  145  }\n  146  \n  ...\n  169  };\n  170  \n  171: function readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  172    var er = chunkInvalid(state, chunk);\n  173    if (er) {\n  174:     stream.emit('error', er);\n  175    } else if (util.isNullOrUndefined(chunk)) {\n  176      state.reading = false;\n  177      if (!state.ended)\n  178:       onEofChunk(stream, state);\n  179    } else if (state.objectMode || chunk && chunk.length > 0) {\n  180      if (state.ended && !addToFront) {\n  181:       var e = new Error('stream.push() after EOF');\n  182:       stream.emit('error', e);\n  183      } else if (state.endEmitted && addToFront) {\n  184:       var e = new Error('stream.unshift() after end event');\n  185:       stream.emit('error', e);\n  186      } else {\n  187        if (state.decoder && !addToFront && !encoding)\n  ...\n  193        // if we want the data now, just emit it.\n  194        if (state.flowing && state.length === 0 && !state.sync) {\n  195:         stream.emit('data', chunk);\n  196:         stream.read(0);\n  197        } else {\n  198          // update the buffer info.\n  ...\n  204  \n  205          if (state.needReadable)\n  206:           emitReadable(stream);\n  207        }\n  208  \n  209:       maybeReadMore(stream, state);\n  210      }\n  211    } else if (!addToFront) {\n  ...\n  326    // All the actual chunk generation logic needs to be\n  327    // *below* the call to _read.  The reason is that in certain\n  328:   // synthetic stream cases, such as passthrough streams, _read\n  329    // may be a completely synchronous operation which may change\n  330    // the state of the read buffer, providing enough data when\n  ...\n  338    // Note that this may be asynchronous, or synchronous.  Yes, it is\n  339    // deeply ugly to write APIs this way, but that still doesn't mean\n  340:   // that the Readable class should behave improperly, as streams are\n  341    // designed to be sync/async agnostic.\n  342    // Take note if the _read call is sync or async (ie, if the read call\n  ...\n  420  \n  421  \n  422: function onEofChunk(stream, state) {\n  423    if (state.decoder && !state.ended) {\n  424      var chunk = state.decoder.end();\n  ...\n  431  \n  432    // emit 'readable' now to make sure it gets picked up.\n  433:   emitReadable(stream);\n  434  }\n  435  \n  ...\n  437  // another read() call => stack overflow.  This way, it might trigger\n  438  // a nextTick recursion warning, but that's not so bad.\n  439: function emitReadable(stream) {\n  440:   var state = stream._readableState;\n  441    state.needReadable = false;\n  442    if (!state.emittedReadable) {\n  ...\n  445      if (state.sync)\n  446        process.nextTick(function() {\n  447:         emitReadable_(stream);\n  448        });\n  449      else\n  450:       emitReadable_(stream);\n  451    }\n  452  }\n  453  \n  454: function emitReadable_(stream) {\n  455    debug('emit readable');\n  456:   stream.emit('readable');\n  457:   flow(stream);\n  458  }\n  459  \n  ...\n  465  // However, if we're not ended, or reading, and the length < hwm,\n  466  // then go ahead and try to read some more preemptively.\n  467: function maybeReadMore(stream, state) {\n  468    if (!state.readingMore) {\n  469      state.readingMore = true;\n  470      process.nextTick(function() {\n  471:       maybeReadMore_(stream, state);\n  472      });\n  473    }\n  474  }\n  475  \n  476: function maybeReadMore_(stream, state) {\n  477    var len = state.length;\n  478    while (!state.reading && !state.flowing && !state.ended &&\n  479           state.length < state.highWaterMark) {\n  480      debug('maybeReadMore read 0');\n  481:     stream.read(0);\n  482      if (len === state.length)\n  483        // didn't get any data, stop spinning.\n  ...\n  491  // abstract method.  to be overridden in specific implementation classes.\n  492  // call cb(er, data) where data is <= n in length.\n  493: // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n  494  // arbitrary, and perhaps not very meaningful.\n  495  Readable.prototype._read = function(n) {\n  ...\n  701  // Ensure readable listeners eventually get something\n  702  Readable.prototype.on = function(ev, fn) {\n  703:   var res = Stream.prototype.on.call(this, ev, fn);\n  704  \n  705    // If listening to data, and it has not explicitly been paused,\n  ...\n  731  Readable.prototype.addListener = Readable.prototype.on;\n  732  \n  733: // pause() and resume() are remnants of the legacy readable stream API\n  734  // If the user uses them, then switch into old mode.\n  735  Readable.prototype.resume = function() {\n  ...\n  747  };\n  748  \n  749: function resume(stream, state) {\n  750    if (!state.resumeScheduled) {\n  751      state.resumeScheduled = true;\n  752      process.nextTick(function() {\n  753:       resume_(stream, state);\n  754      });\n  755    }\n  756  }\n  757  \n  758: function resume_(stream, state) {\n  759    state.resumeScheduled = false;\n  760:   stream.emit('resume');\n  761:   flow(stream);\n  762    if (state.flowing && !state.reading)\n  763:     stream.read(0);\n  764  }\n  765  \n  ...\n  774  };\n  775  \n  776: function flow(stream) {\n  777:   var state = stream._readableState;\n  778    debug('flow', state.flowing);\n  779    if (state.flowing) {\n  780      do {\n  781:       var chunk = stream.read();\n  782      } while (null !== chunk && state.flowing);\n  783    }\n  784  }\n  785  \n  786: // wrap an old-style stream as the async data source.\n  787: // This is *not* part of the readable stream interface.\n  788  // It is an ugly unfortunate mess of history.\n  789: Readable.prototype.wrap = function(stream) {\n  790    var state = this._readableState;\n  791    var paused = false;\n  792  \n  793    var self = this;\n  794:   stream.on('end', function() {\n  795      debug('wrapped end');\n  796      if (state.decoder && !state.ended) {\n  ...\n  803    });\n  804  \n  805:   stream.on('data', function(chunk) {\n  806      debug('wrapped data');\n  807      if (state.decoder)\n  ...\n  813      if (!ret) {\n  814        paused = true;\n  815:       stream.pause();\n  816      }\n  817    });\n  ...\n  819    // proxy all the other methods.\n  820    // important when wrapping filters and duplexes.\n  821:   for (var i in stream) {\n  822:     if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n  823        this[i] = function(method) { return function() {\n  824:         return stream[method].apply(stream, arguments);\n  825        }}(i);\n  826      }\n  ...\n  830    var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  831    forEach(events, function(ev) {\n  832:     stream.on(ev, self.emit.bind(self, ev));\n  833    });\n  834  \n  835    // when we try to consume some more bytes, simply unpause the\n  836:   // underlying stream.\n  837    self._read = function(n) {\n  838      debug('wrapped _read', n);\n  839      if (paused) {\n  840        paused = false;\n  841:       stream.resume();\n  842      }\n  843    };\n  ...\n  917  }\n  918  \n  919: function endReadable(stream) {\n  920:   var state = stream._readableState;\n  921  \n  922    // If we get here before consuming all the bytes, then that is a\n  923    // bug in node.  Should never happen.\n  924    if (state.length > 0)\n  925:     throw new Error('endReadable called on non-empty stream');\n  926  \n  927    if (!state.endEmitted) {\n  ...\n  931        if (!state.endEmitted && state.length === 0) {\n  932          state.endEmitted = true;\n  933:         stream.readable = false;\n  934:         stream.emit('end');\n  935        }\n  936      });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_transform.js:\n   21  \n   22  \n   23: // a transform stream is a readable/writable stream where you do\n   24  // something with the data.  Sometimes it's called a \"filter\",\n   25  // but that's not a great name for it, since that implies a thing where\n   ..\n   29  // While the output is causally related to the input, it's not a\n   30  // necessarily symmetric or synchronous transformation.  For example,\n   31: // a zlib stream might take multiple plain-text writes(), and then\n   32  // emit a single compressed chunk some time in the future.\n   33  //\n   34  // Here's how this works:\n   35  //\n   36: // The Transform stream has all the aspects of the readable and writable\n   37: // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n   38  // internally, and returns false if there's a lot of pending writes\n   39  // buffered up.  When you call read(), that calls _read(n) until\n   40  // there's enough pending readable data buffered up.\n   41  //\n   42: // In a transform stream, the written data is placed in a buffer.  When\n   43  // _read(n) is called, it transforms the queued up data, calling the\n   44  // buffered _write cb's as it consumes chunks.  If consuming a single\n   ..\n   50  // since _read has to be called to start processing a new chunk.  However,\n   51  // a pathological inflate type of transform can cause excessive buffering\n   52: // here.  For example, imagine a stream where every byte of input is\n   53  // interpreted as an integer from 0-255, and then results in that many\n   54  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n   ..\n   65  module.exports = Transform;\n   66  \n   67: var Duplex = require('./_stream_duplex');\n   68  \n   69  /*<replacement>*/\n   ..\n   75  \n   76  \n   77: function TransformState(options, stream) {\n   78    this.afterTransform = function(er, data) {\n   79:     return afterTransform(stream, er, data);\n   80    };\n   81  \n   ..\n   86  }\n   87  \n   88: function afterTransform(stream, er, data) {\n   89:   var ts = stream._transformState;\n   90    ts.transforming = false;\n   91  \n   ..\n   93  \n   94    if (!cb)\n   95:     return stream.emit('error', new Error('no writecb in Transform class'));\n   96  \n   97    ts.writechunk = null;\n   ..\n   99  \n  100    if (!util.isNullOrUndefined(data))\n  101:     stream.push(data);\n  102  \n  103    if (cb)\n  104      cb(er);\n  105  \n  106:   var rs = stream._readableState;\n  107    rs.reading = false;\n  108    if (rs.needReadable || rs.length < rs.highWaterMark) {\n  109:     stream._read(rs.highWaterMark);\n  110    }\n  111  }\n  ...\n  121  \n  122    // when the writable side finishes, then flush out anything remaining.\n  123:   var stream = this;\n  124  \n  125    // start out asking for a readable event once data is transformed.\n  ...\n  134      if (util.isFunction(this._flush))\n  135        this._flush(function(er) {\n  136:         done(stream, er);\n  137        });\n  138      else\n  139:       done(stream);\n  140    });\n  141  }\n  ...\n  191  \n  192  \n  193: function done(stream, er) {\n  194    if (er)\n  195:     return stream.emit('error', er);\n  196  \n  197    // if there's nothing in the write buffer, then that means\n  198    // that nothing more will ever be provided\n  199:   var ws = stream._writableState;\n  200:   var ts = stream._transformState;\n  201  \n  202    if (ws.length)\n  ...\n  206      throw new Error('calling transform done when still transforming');\n  207  \n  208:   return stream.push(null);\n  209  }\n  210  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\lib\\_stream_writable.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // A bit simpler than readable streams.\n   23  // Implement an async ._write(chunk, cb), and it'll handle all\n   24  // the drain event emission and buffering.\n   ..\n   38  /*</replacement>*/\n   39  \n   40: var Stream = require('stream');\n   41  \n   42: util.inherits(Writable, Stream);\n   43  \n   44  function WriteReq(chunk, encoding, cb) {\n   ..\n   48  }\n   49  \n   50: function WritableState(options, stream) {\n   51:   var Duplex = require('./_stream_duplex');\n   52  \n   53    options = options || {};\n   ..\n   60    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n   61  \n   62:   // object stream flag to indicate whether or not this stream\n   63    // contains buffers or objects.\n   64    this.objectMode = !!options.objectMode;\n   65  \n   66:   if (stream instanceof Duplex)\n   67      this.objectMode = this.objectMode || !!options.writableObjectMode;\n   68  \n   ..\n   79  \n   80    // should we decode strings into buffers before passing to _write?\n   81:   // this is here so that some node-core streams can optimize string\n   82    // handling at a lower level.\n   83    var noDecode = options.decodeStrings === false;\n   ..\n  113    // the callback that's passed to _write(chunk,cb)\n  114    this.onwrite = function(er) {\n  115:     onwrite(stream, er);\n  116    };\n  117  \n  ...\n  129  \n  130    // emit prefinish if the only thing we're waiting for is _write cbs\n  131:   // This is relevant for synchronous Transform streams\n  132    this.prefinished = false;\n  133  \n  ...\n  137  \n  138  function Writable(options) {\n  139:   var Duplex = require('./_stream_duplex');\n  140  \n  141    // Writable ctor is applied to Duplexes, though they're not\n  ...\n  149    this.writable = true;\n  150  \n  151:   Stream.call(this);\n  152  }\n  153  \n  154: // Otherwise people can pipe Writable streams, which is just wrong.\n  155  Writable.prototype.pipe = function() {\n  156    this.emit('error', new Error('Cannot pipe. Not readable.'));\n  ...\n  158  \n  159  \n  160: function writeAfterEnd(stream, state, cb) {\n  161    var er = new Error('write after end');\n  162    // TODO: defer error events consistently everywhere, not just the cb\n  163:   stream.emit('error', er);\n  164    process.nextTick(function() {\n  165      cb(er);\n  ...\n  169  // If we get something that is not a buffer, string, null, or undefined,\n  170  // and we're not in objectMode, then that's an error.\n  171: // Otherwise stream chunks are all considered to be of length=1, and the\n  172  // watermarks determine how many objects to keep in the buffer, rather than\n  173  // how many bytes or characters.\n  174: function validChunk(stream, state, chunk, cb) {\n  175    var valid = true;\n  176    if (!util.isBuffer(chunk) &&\n  ...\n  179        !state.objectMode) {\n  180      var er = new TypeError('Invalid non-string/buffer chunk');\n  181:     stream.emit('error', er);\n  182      process.nextTick(function() {\n  183        cb(er);\n  ...\n  248  // in the queue, and wait our turn.  Otherwise, call _write\n  249  // If we return false, then we need a drain event, so set that flag.\n  250: function writeOrBuffer(stream, state, chunk, encoding, cb) {\n  251    chunk = decodeChunk(state, chunk, encoding);\n  252    if (util.isBuffer(chunk))\n  ...\n  264      state.buffer.push(new WriteReq(chunk, encoding, cb));\n  265    else\n  266:     doWrite(stream, state, false, len, chunk, encoding, cb);\n  267  \n  268    return ret;\n  269  }\n  270  \n  271: function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  272    state.writelen = len;\n  273    state.writecb = cb;\n  ...\n  275    state.sync = true;\n  276    if (writev)\n  277:     stream._writev(chunk, state.onwrite);\n  278    else\n  279:     stream._write(chunk, encoding, state.onwrite);\n  280    state.sync = false;\n  281  }\n  282  \n  283: function onwriteError(stream, state, sync, er, cb) {\n  284    if (sync)\n  285      process.nextTick(function() {\n  ...\n  292    }\n  293  \n  294:   stream._writableState.errorEmitted = true;\n  295:   stream.emit('error', er);\n  296  }\n  297  \n  ...\n  303  }\n  304  \n  305: function onwrite(stream, er) {\n  306:   var state = stream._writableState;\n  307    var sync = state.sync;\n  308    var cb = state.writecb;\n  ...\n  311  \n  312    if (er)\n  313:     onwriteError(stream, state, sync, er, cb);\n  314    else {\n  315      // Check if we're actually ready to finish, but don't emit yet\n  316:     var finished = needFinish(stream, state);\n  317  \n  318      if (!finished &&\n  ...\n  320          !state.bufferProcessing &&\n  321          state.buffer.length) {\n  322:       clearBuffer(stream, state);\n  323      }\n  324  \n  325      if (sync) {\n  326        process.nextTick(function() {\n  327:         afterWrite(stream, state, finished, cb);\n  328        });\n  329      } else {\n  330:       afterWrite(stream, state, finished, cb);\n  331      }\n  332    }\n  333  }\n  334  \n  335: function afterWrite(stream, state, finished, cb) {\n  336    if (!finished)\n  337:     onwriteDrain(stream, state);\n  338    state.pendingcb--;\n  339    cb();\n  340:   finishMaybe(stream, state);\n  341  }\n  342  \n  ...\n  344  // emit 'drain' before the write() consumer gets the 'false' return\n  345  // value, and has a chance to attach a 'drain' listener.\n  346: function onwriteDrain(stream, state) {\n  347    if (state.length === 0 && state.needDrain) {\n  348      state.needDrain = false;\n  349:     stream.emit('drain');\n  350    }\n  351  }\n  ...\n  353  \n  354  // if there's something in the buffer waiting, then process it\n  355: function clearBuffer(stream, state) {\n  356    state.bufferProcessing = true;\n  357  \n  358:   if (stream._writev && state.buffer.length > 1) {\n  359      // Fast case, write everything using _writev()\n  360      var cbs = [];\n  ...\n  365      // TODO(isaacs) clean this up\n  366      state.pendingcb++;\n  367:     doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n  368        for (var i = 0; i < cbs.length; i++) {\n  369          state.pendingcb--;\n  ...\n  383        var len = state.objectMode ? 1 : chunk.length;\n  384  \n  385:       doWrite(stream, state, false, len, chunk, encoding, cb);\n  386  \n  387        // if we didn't call the onwrite immediately, then\n  ...\n  438  \n  439  \n  440: function needFinish(stream, state) {\n  441    return (state.ending &&\n  442            state.length === 0 &&\n  ...\n  445  }\n  446  \n  447: function prefinish(stream, state) {\n  448    if (!state.prefinished) {\n  449      state.prefinished = true;\n  450:     stream.emit('prefinish');\n  451    }\n  452  }\n  453  \n  454: function finishMaybe(stream, state) {\n  455:   var need = needFinish(stream, state);\n  456    if (need) {\n  457      if (state.pendingcb === 0) {\n  458:       prefinish(stream, state);\n  459        state.finished = true;\n  460:       stream.emit('finish');\n  461      } else\n  462:       prefinish(stream, state);\n  463    }\n  464    return need;\n  465  }\n  466  \n  467: function endWritable(stream, state, cb) {\n  468    state.ending = true;\n  469:   finishMaybe(stream, state);\n  470    if (cb) {\n  471      if (state.finished)\n  472        process.nextTick(cb);\n  473      else\n  474:       stream.once('finish', cb);\n  475    }\n  476    state.ended = true;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\readable-stream\\node_modules\\core-util-is\\float.patch:\n  554  -\n  555  -\n  556: -exports.pump = exports.deprecate(function(readStream, writeStream, callback) {\n  557  -  var callbackCalled = false;\n  558  -\n  ...\n  564  -  }\n  565  -\n  566: -  readStream.addListener('data', function(chunk) {\n  567: -    if (writeStream.write(chunk) === false) readStream.pause();\n  568  -  });\n  569  -\n  570: -  writeStream.addListener('drain', function() {\n  571: -    readStream.resume();\n  572  -  });\n  573  -\n  574: -  readStream.addListener('end', function() {\n  575: -    writeStream.end();\n  576  -  });\n  577  -\n  578: -  readStream.addListener('close', function() {\n  579  -    call();\n  580  -  });\n  581  -\n  582: -  readStream.addListener('error', function(err) {\n  583: -    writeStream.end();\n  584  -    call(err);\n  585  -  });\n  586  -\n  587: -  writeStream.addListener('error', function(err) {\n  588: -    readStream.destroy();\n  589  -    call(err);\n  590  -  });\n  591: -}, 'util.pump(): Use readableStream.pipe() instead');\n  592  -\n  593  -\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\stream-counter\\index.js:\n    1  module.exports = ByteCounter;\n    2  \n    3: var Writable = require('readable-stream').Writable;\n    4  var util = require('util');\n    5  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\stream-counter\\package.json:\n    1  {\n    2:   \"name\": \"stream-counter\",\n    3    \"version\": \"0.2.0\",\n    4:   \"description\": \"keeps track of how many bytes have been written to a stream\",\n    5    \"main\": \"index.js\",\n    6    \"scripts\": {\n    .\n    9    \"repository\": {\n   10      \"type\": \"git\",\n   11:     \"url\": \"git://github.com/superjoe30/node-stream-counter.git\"\n   12    },\n   13    \"author\": {\n   ..\n   20    },\n   21    \"dependencies\": {\n   22:     \"readable-stream\": \"~1.1.8\"\n   23    },\n   24    \"bugs\": {\n   25:     \"url\": \"https://github.com/superjoe30/node-stream-counter/issues\"\n   26    },\n   27:   \"_id\": \"stream-counter@0.2.0\",\n   28    \"dist\": {\n   29      \"shasum\": \"ded266556319c8b0e222812b9cf3b26fa7d947de\",\n   30:     \"tarball\": \"http://registry.npmjs.org/stream-counter/-/stream-counter-0.2.0.tgz\"\n   31    },\n   32:   \"_from\": \"stream-counter@~0.2.0\",\n   33    \"_npmVersion\": \"1.3.8\",\n   34    \"_npmUser\": {\n   ..\n   44    \"directories\": {},\n   45    \"_shasum\": \"ded266556319c8b0e222812b9cf3b26fa7d947de\",\n   46:   \"_resolved\": \"https://registry.npmjs.org/stream-counter/-/stream-counter-0.2.0.tgz\",\n   47    \"readme\": \"ERROR: No README data found!\",\n   48:   \"homepage\": \"https://github.com/superjoe30/node-stream-counter\"\n   49  }\n   50  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\stream-counter\\README.md:\n    1: # stream-counter\n    2  \n    3: Keep track of how many bytes have been written to a stream.\n    4  \n    5  ## Usage\n    6  \n    7  ```js\n    8: var StreamCounter = require('stream-counter');\n    9: var counter = new StreamCounter();\n   10  counter.on('progress', function() {\n   11    console.log(\"progress\", counter.bytes);\n   12  });\n   13: fs.createReadStream('foo.txt').pipe(counter);\n   14  ```\n   15  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\multiparty\\node_modules\\stream-counter\\test\\test.js:\n   10    remainingTests -= 1;\n   11  });\n   12: var is = fs.createReadStream(path.join(__dirname, 'test.txt'));\n   13  is.pipe(counter);\n   14  is.on('end', function() {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\pause\\package.json:\n    2    \"name\": \"pause\",\n    3    \"version\": \"0.0.1\",\n    4:   \"description\": \"Pause streams...\",\n    5    \"keywords\": [],\n    6    \"author\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\pause\\Readme.md:\n    2  # pause\n    3  \n    4:   Pause streams...\n    5  \n    6  ## License \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\type-is\\node_modules\\mime-types\\README.md:\n   12  \n   13  - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`,\n   14:   so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`.\n   15  - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`.\n   16  - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db)\n   ..\n   65  \n   66  ```js\n   67: mime.extension('application/octet-stream') // 'bin'\n   68  ```\n   69  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\type-is\\node_modules\\mime-types\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\connect\\node_modules\\type-is\\node_modules\\mime-types\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\content-disposition\\README.md:\n  100  \n  101    // send file\n  102:   var stream = fs.createReadStream(filePath)\n  103:   stream.pipe(res)\n  104    onFinished(res, function (err) {\n  105:     destroy(stream)\n  106    })\n  107  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\mkdirp\\bin\\cmd.js:\n   10  });\n   11  if (argv.help) {\n   12:     fs.createReadStream(__dirname + '/usage.txt').pipe(process.stdout);\n   13      return;\n   14  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\History.md:\n   60  ==================\n   61  \n   62:   * Work around `fd` leak in Node.js 0.10 for `fs.ReadStream`\n   63    * deps: dethroy@1.0.2\n   64  \n   ..\n  155   * Calculate ETag with md5 for reduced collisions\n  156   * Fix wrong behavior when index file matches directory\n  157:  * Ignore stream errors after request ends\n  158     - Goodbye `EBADF, read`\n  159   * Skip directories in index file search\n  ...\n  199  ==================\n  200  \n  201:   * add options parameter to send() that is passed to fs.createReadStream() [kanongil]\n  202  \n  203  0.0.4 / 2012-08-16 \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\index.js:\n    9  var escapeHtml = require('escape-html')\n   10    , parseRange = require('range-parser')\n   11:   , Stream = require('stream')\n   12    , mime = require('mime')\n   13    , fresh = require('fresh')\n   ..\n   53  \n   54  /**\n   55:  * Return a `SendStream` for `req` and `path`.\n   56   *\n   57   * @param {Request} req\n   58   * @param {String} path\n   59   * @param {Object} options\n   60:  * @return {SendStream}\n   61   * @api public\n   62   */\n   63  \n   64  function send(req, path, options) {\n   65:   return new SendStream(req, path, options);\n   66  }\n   67  \n   68  /**\n   69:  * Initialize a `SendStream` with the given `path`.\n   70   *\n   71   * @param {Request} req\n   ..\n   75   */\n   76  \n   77: function SendStream(req, path, options) {\n   78    var self = this;\n   79    options = options || {};\n   ..\n  135  \n  136  /**\n  137:  * Inherits from `Stream.prototype`.\n  138   */\n  139  \n  140: SendStream.prototype.__proto__ = Stream.prototype;\n  141  \n  142  /**\n  ...\n  144   *\n  145   * @param {Boolean} val\n  146:  * @return {SendStream}\n  147   * @api public\n  148   */\n  149  \n  150: SendStream.prototype.etag = deprecate.function(function etag(val) {\n  151    val = Boolean(val);\n  152    debug('etag %s', val);\n  ...\n  159   *\n  160   * @param {Boolean} path\n  161:  * @return {SendStream}\n  162   * @api public\n  163   */\n  164  \n  165: SendStream.prototype.hidden = deprecate.function(function hidden(val) {\n  166    val = Boolean(val);\n  167    debug('hidden %s', val);\n  ...\n  176   *\n  177   * @param {String|Boolean|Array} paths\n  178:  * @return {SendStream}\n  179   * @api public\n  180   */\n  181  \n  182: SendStream.prototype.index = deprecate.function(function index(paths) {\n  183    var index = !paths ? [] : normalizeList(paths);\n  184    debug('index %o', paths);\n  ...\n  191   *\n  192   * @param {String} path\n  193:  * @return {SendStream}\n  194   * @api public\n  195   */\n  196  \n  197: SendStream.prototype.root = function(path){\n  198    path = String(path);\n  199    this._root = resolve(path)\n  ...\n  201  };\n  202  \n  203: SendStream.prototype.from = deprecate.function(SendStream.prototype.root,\n  204    'send.from: pass root as option');\n  205  \n  206: SendStream.prototype.root = deprecate.function(SendStream.prototype.root,\n  207    'send.root: pass root as option');\n  208  \n  ...\n  211   *\n  212   * @param {Number} maxAge\n  213:  * @return {SendStream}\n  214   * @api public\n  215   */\n  216  \n  217: SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {\n  218    maxAge = typeof maxAge === 'string'\n  219      ? ms(maxAge)\n  ...\n  233   */\n  234  \n  235: SendStream.prototype.error = function(status, err){\n  236    var res = this.res;\n  237    var msg = http.STATUS_CODES[status];\n  ...\n  259   */\n  260  \n  261: SendStream.prototype.hasTrailingSlash = function(){\n  262    return '/' == this.path[this.path.length - 1];\n  263  };\n  ...\n  270   */\n  271  \n  272: SendStream.prototype.isConditionalGET = function(){\n  273    return this.req.headers['if-none-match']\n  274      || this.req.headers['if-modified-since'];\n  ...\n  281   */\n  282  \n  283: SendStream.prototype.removeContentHeaderFields = function(){\n  284    var res = this.res;\n  285    Object.keys(res._headers).forEach(function(field){\n  ...\n  296   */\n  297  \n  298: SendStream.prototype.notModified = function(){\n  299    var res = this.res;\n  300    debug('not modified');\n  ...\n  310   */\n  311  \n  312: SendStream.prototype.headersAlreadySent = function headersAlreadySent(){\n  313    var err = new Error('Can\\'t set headers after they are sent.');\n  314    debug('headers already sent');\n  ...\n  324   */\n  325  \n  326: SendStream.prototype.isCachable = function(){\n  327    var res = this.res;\n  328    return (res.statusCode >= 200 && res.statusCode < 300) || 304 == res.statusCode;\n  ...\n  336   */\n  337  \n  338: SendStream.prototype.onStatError = function(err){\n  339    var notfound = ['ENOENT', 'ENAMETOOLONG', 'ENOTDIR'];\n  340    if (~notfound.indexOf(err.code)) return this.error(404, err);\n  ...\n  349   */\n  350  \n  351: SendStream.prototype.isFresh = function(){\n  352    return fresh(this.req.headers, this.res._headers);\n  353  };\n  ...\n  360   */\n  361  \n  362: SendStream.prototype.isRangeFresh = function isRangeFresh(){\n  363    var ifRange = this.req.headers['if-range'];\n  364  \n  ...\n  377   */\n  378  \n  379: SendStream.prototype.redirect = function(path){\n  380    if (listenerCount(this, 'directory') !== 0) {\n  381      return this.emit('directory');\n  ...\n  394   * Pipe to `res.\n  395   *\n  396:  * @param {Stream} res\n  397:  * @return {Stream} res\n  398   * @api public\n  399   */\n  400  \n  401: SendStream.prototype.pipe = function(res){\n  402    var self = this\n  403      , args = arguments\n  ...\n  482   */\n  483  \n  484: SendStream.prototype.send = function(path, stat){\n  485    var options = this.options;\n  486    var len = stat.size;\n  ...\n  559    if ('HEAD' == req.method) return res.end();\n  560  \n  561:   this.stream(path, options);\n  562  };\n  563  \n  ...\n  568   * @api private\n  569   */\n  570: SendStream.prototype.sendFile = function sendFile(path) {\n  571    var i = 0\n  572    var self = this\n  ...\n  611   * @api private\n  612   */\n  613: SendStream.prototype.sendIndex = function sendIndex(path){\n  614    var i = -1;\n  615    var self = this;\n  ...\n  636  \n  637  /**\n  638:  * Stream `path` to the response.\n  639   *\n  640   * @param {String} path\n  ...\n  643   */\n  644  \n  645: SendStream.prototype.stream = function(path, options){\n  646    // TODO: this is all lame, refactor meeee\n  647    var finished = false;\n  ...\n  651  \n  652    // pipe\n  653:   var stream = fs.createReadStream(path, options);\n  654:   this.emit('stream', stream);\n  655:   stream.pipe(res);\n  656  \n  657    // response finished, done with the fd\n  658    onFinished(res, function onfinished(){\n  659      finished = true;\n  660:     destroy(stream);\n  661    });\n  662  \n  663    // error handling code-smell\n  664:   stream.on('error', function onerror(err){\n  665      // request already finished\n  666      if (finished) return;\n  667  \n  668:     // clean up stream\n  669      finished = true;\n  670:     destroy(stream);\n  671  \n  672      // error\n  ...\n  675  \n  676    // end\n  677:   stream.on('end', function onend(){\n  678      self.emit('end');\n  679    });\n  ...\n  688   */\n  689  \n  690: SendStream.prototype.type = function(path){\n  691    var res = this.res;\n  692    if (res.getHeader('Content-Type')) return;\n  ...\n  706   */\n  707  \n  708: SendStream.prototype.setHeader = function setHeader(path, stat){\n  709    var res = this.res;\n  710  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\package.json:\n    1  {\n    2    \"name\": \"send\",\n    3:   \"description\": \"Better streaming static file server with Range and conditional-GET support\",\n    4    \"version\": \"0.10.1\",\n    5    \"author\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\Readme.md:\n    7  [![Gittip][gittip-image]][gittip-url]\n    8  \n    9:   Send is Connect's `static()` extracted for generalized use, a streaming static file\n   10    server supporting partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\n   11  \n   ..\n   24  ### send(req, path, [options])\n   25  \n   26: Create a new `SendStream` for the given path to send to a `res`. The `req` is\n   27  the Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\n   28  not the actual file-system path).\n   ..\n   79  ### Events\n   80  \n   81: The `SendStream` is an event emitter and will emit the following events:\n   82  \n   83    - `error` an error occurred `(err)`\n   ..\n   85    - `file` a file was requested `(path, stat)`\n   86    - `headers` the headers are about to be set on a file `(res, path, stat)`\n   87:   - `stream` file streaming has started `(stream)`\n   88:   - `end` streaming has completed\n   89  \n   90  ### .pipe\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\destroy\\index.js:\n    1: var ReadStream = require('fs').ReadStream\n    2: var Stream = require('stream')\n    3  \n    4: module.exports = function destroy(stream) {\n    5:   if (stream instanceof ReadStream) {\n    6:     return destroyReadStream(stream)\n    7    }\n    8  \n    9:   if (!(stream instanceof Stream)) {\n   10:     return stream\n   11    }\n   12  \n   13:   if (typeof stream.destroy === 'function') {\n   14:     stream.destroy()\n   15    }\n   16  \n   17:   return stream\n   18  }\n   19  \n   20: function destroyReadStream(stream) {\n   21:   stream.destroy()\n   22  \n   23:   if (typeof stream.close === 'function') {\n   24      // node.js core bug work-around\n   25:     stream.on('open', onopenClose)\n   26    }\n   27  \n   28:   return stream\n   29  }\n   30  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\destroy\\package.json:\n    1  {\n    2    \"name\": \"destroy\",\n    3:   \"description\": \"destroy a stream if possible\",\n    4    \"version\": \"1.0.3\",\n    5    \"author\": {\n    .\n   17    \"repository\": {\n   18      \"type\": \"git\",\n   19:     \"url\": \"https://github.com/stream-utils/destroy\"\n   20    },\n   21    \"devDependencies\": {\n   ..\n   32    ],\n   33    \"keywords\": [\n   34:     \"stream\",\n   35:     \"streams\",\n   36      \"destroy\",\n   37      \"cleanup\",\n   ..\n   41    \"gitHead\": \"50af95ece4a70202f9301bc3edc8f9fdbbad0f26\",\n   42    \"bugs\": {\n   43:     \"url\": \"https://github.com/stream-utils/destroy/issues\"\n   44    },\n   45:   \"homepage\": \"https://github.com/stream-utils/destroy\",\n   46    \"_id\": \"destroy@1.0.3\",\n   47    \"_shasum\": \"b433b4724e71fd8551d9885174851c5fc377e2c9\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\destroy\\README.md:\n    9  [![Gittip][gittip-image]][gittip-url]\n   10  \n   11: Destroy a stream.\n   12  \n   13  ## API\n   ..\n   17  \n   18  var fs = require('fs')\n   19: var stream = fs.createReadStream('package.json')\n   20: destroy(stream)\n   21  ```\n   22  \n   23  [npm-image]: https://img.shields.io/npm/v/destroy.svg?style=flat-square\n   24  [npm-url]: https://npmjs.org/package/destroy\n   25: [github-tag]: http://img.shields.io/github/tag/stream-utils/destroy.svg?style=flat-square\n   26: [github-url]: https://github.com/stream-utils/destroy/tags\n   27: [travis-image]: https://img.shields.io/travis/stream-utils/destroy.svg?style=flat-square\n   28: [travis-url]: https://travis-ci.org/stream-utils/destroy\n   29: [coveralls-image]: https://img.shields.io/coveralls/stream-utils/destroy.svg?style=flat-square\n   30: [coveralls-url]: https://coveralls.io/r/stream-utils/destroy?branch=master\n   31: [david-image]: http://img.shields.io/david/stream-utils/destroy.svg?style=flat-square\n   32: [david-url]: https://david-dm.org/stream-utils/destroy\n   33  [license-image]: http://img.shields.io/npm/l/destroy.svg?style=flat-square\n   34  [license-url]: LICENSE.md\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\mime\\package.json:\n   26    },\n   27    \"version\": \"1.2.11\",\n   28:   \"readme\": \"# mime\\n\\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\\n\\n## Install\\n\\nInstall with [npm](http://github.com/isaacs/npm):\\n\\n    npm install mime\\n\\n## API - Queries\\n\\n### mime.lookup(path)\\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\\n\\n    var mime = require('mime');\\n\\n    mime.lookup('/path/to/file.txt');         // => 'text/plain'\\n    mime.lookup('file.txt');                  // => 'text/plain'\\n    mime.lookup('.TXT');                      // => 'text/plain'\\n    mime.lookup('htm');                       // => 'text/html'\\n\\n### mime.default_type\\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\\n\\n### mime.extension(type)\\nGet the default extension for `type`\\n\\n    mime.extension('text/html');                 // => 'html'\\n    mime.extension('application/octet-stream');  // => 'bin'\\n\\n### mime.charsets.lookup()\\n\\nMap mime-type to charset\\n\\n    mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n\\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\\n\\n## API - Defining Custom Types\\n\\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\\n\\n### mime.define()\\n\\nAdd custom mime/extension mappings\\n\\n    mime.define({\\n        'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n        'application/x-my-type': ['x-mt', 'x-mtt'],\\n        // etc ...\\n    });\\n\\n    mime.lookup('x-sft');                 // => 'text/x-some-format'\\n\\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\\n\\n    mime.extension('text/x-some-format'); // => 'x-sf'\\n\\n### mime.load(filepath)\\n\\nLoad mappings from an Apache \\\".types\\\" format file\\n\\n    mime.load('./my_project.types');\\n\\nThe .types file format is simple -  See the `types` dir for examples.\\n\",\n   29    \"readmeFilename\": \"README.md\",\n   30    \"bugs\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\mime\\README.md:\n   12  \n   13  ### mime.lookup(path)\n   14: Get the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n   15  \n   16      var mime = require('mime');\n   ..\n   22  \n   23  ### mime.default_type\n   24: Sets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n   25  \n   26  ### mime.extension(type)\n   ..\n   28  \n   29      mime.extension('text/html');                 // => 'html'\n   30:     mime.extension('application/octet-stream');  // => 'bin'\n   31  \n   32  ### mime.charsets.lookup()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\mime\\test.js:\n   27  eq('text/plain', mime.lookup('/txt'));         // extension-less ()\n   28  eq('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\n   29: eq('application/octet-stream', mime.lookup('text.nope')); // unrecognized\n   30  eq('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n   31  \n   ..\n   36  eq('txt', mime.extension(mime.types.text));\n   37  eq('html', mime.extension(mime.types.htm));\n   38: eq('bin', mime.extension('application/octet-stream'));\n   39: eq('bin', mime.extension('application/octet-stream '));\n   40  eq('html', mime.extension(' text/html; charset=UTF-8'));\n   41  eq('html', mime.extension('text/html; charset=UTF-8 '));\n   ..\n   51  \n   52  eq('application/font-woff', mime.lookup('file.woff'));\n   53: eq('application/octet-stream', mime.lookup('file.buffer'));\n   54  eq('audio/mp4', mime.lookup('file.m4a'));\n   55  eq('font/opentype', mime.lookup('file.otf'));\n   ..\n   61  eq('UTF-8', mime.charsets.lookup('text/plain'));\n   62  eq(undefined, mime.charsets.lookup(mime.types.js));\n   63: eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n   64  \n   65  //\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\mime\\types\\mime.types:\n  152  # application/ocsp-request\n  153  # application/ocsp-response\n  154: application/octet-stream	bin dms lrf mar so dist distz pkg bpk dump elc deploy\n  155  application/oda					oda\n  156  application/oebps-package+xml			opf\n  ...\n  653  # application/vnd.ntt-local.file-transfer\n  654  # application/vnd.ntt-local.sip-ta_remote\n  655: # application/vnd.ntt-local.sip-ta_tcp_stream\n  656  application/vnd.oasis.opendocument.chart		odc\n  657  application/vnd.oasis.opendocument.chart-template	otc\n  ...\n  674  # application/vnd.oftn.l10n+json\n  675  # application/vnd.oipf.contentaccessdownload+xml\n  676: # application/vnd.oipf.contentaccessstreaming+xml\n  677  # application/vnd.oipf.cspg-hexbinary\n  678  # application/vnd.oipf.dae.svg+xml\n  ...\n  836  # application/vnd.radisys.msml-audit-conn+xml\n  837  # application/vnd.radisys.msml-audit-dialog+xml\n  838: # application/vnd.radisys.msml-audit-stream+xml\n  839  # application/vnd.radisys.msml-conf+xml\n  840  # application/vnd.radisys.msml-dialog+xml\n  ...\n  902  application/vnd.stepmania.package		smzip\n  903  application/vnd.stepmania.stepchart		sm\n  904: # application/vnd.street-stream\n  905  application/vnd.sun.xml.calc			sxc\n  906  application/vnd.sun.xml.calc.template		stc\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\mime\\types\\node.types:\n   25  # Why: semi-standard extension w/in the node community\n   26  # Added by: tootallnate\n   27: application/octet-stream  buffer\n   28  \n   29  # What: The \"protected\" MP-4 formats used by iTunes.\n   30: # Why: Required for streaming music to browsers (?)\n   31  # Added by: broofa\n   32  application/mp4  m4p\n   ..\n   39  \n   40  # What: EventSource mime type\n   41: # Why: mime type of Server-Sent Events stream\n   42: # http://www.w3.org/TR/eventsource/#text-event-stream\n   43  # Added by: francois2metz\n   44: text/event-stream  event-stream\n   45  \n   46  # What: Mozilla App manifest mime type\n   ..\n   65  text/plain  ini\n   66  \n   67: # What: DASH Adaptive Streaming manifest\n   68: # Why: https://developer.mozilla.org/en-US/docs/DASH_Adaptive_Streaming_for_HTML_5_Video\n   69  # Added by: eelcocramer\n   70  application/dash+xml mdp\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express\\node_modules\\send\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\logger.js:\n   17      mkdirsSync(path.dirname(options.path));\n   18  \n   19:     var logStream = fs.createWriteStream(options.path, {flags: 'a'});\n   20:     var logger = express.logger({stream: logStream, format: options.format});\n   21  \n   22      // XXXjoe Need to expose a way to cancel this timer\n   23      var archiveInterval = setInterval(function() {\n   24:         archiveLogs(logStream, options.path, options.dateFormat);\n   25      }, options.interval || defaultInterval);\n   26      \n   ..\n   28  }\n   29  \n   30: function archiveLogs(logStream, logPath, dateFormat) {\n   31      var logDate = datetime.format(new Date(), dateFormat || defaultDateFormat);\n   32      var ext = path.extname(logPath);\n   ..\n   37      copyFile(logPath, newPath, function(err) {\n   38          if (!err) {\n   39:             fs.truncateSync(logStream.fd, 0);\n   40          } else {\n   41              console.error(\"Unable to archive logs: \" + err);\n   ..\n   51              if (err) { cb(err); return }\n   52  \n   53:             var is = fs.createReadStream(src);\n   54:             var os = fs.createWriteStream(dst);\n   55              util.pump(is, os, cb);\n   56        });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\README.md:\n    9  ------------\n   10  \n   11: Works just like express.logger, except that you give it a path instead of a stream.\n   12  \n   13  	var logger = require('express-logger');\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\bin\\vows:\n    6      util   = require('util'),\n    7      glob   = require('glob'),\n    8:     NopStream   = require('../lib/utils/nopstream').NopStream,\n    9      events = require('events');\n   10  \n   ..\n   26  \n   27  var inspect = require('eyes').inspector({\n   28:     stream: null,\n   29      styles: { string: 'grey', regexp: 'grey' }\n   30  });\n   ..\n  186  if (options.nocolor) {\n  187      cutils.nocolor = true;\n  188:     inspect = require('eyes').inspector({ stream: null, styles: false });\n  189  }\n  190  \n  191  if (options.supressStdout) {\n  192:     _reporter.setStream && _reporter.setStream(process.stdout);\n  193:     var devNullStream = null;\n  194  \n  195      if(process.platform === 'win32'){\n  196:         devNullStream = new NopStream ();\n  197      } else {\n  198:         devNullStream = fs.createWriteStream('/dev/null');\n  199      }\n  200  \n  201      process.__defineGetter__('stdout', function () {\n  202:         return devNullStream;\n  203      });\n  204  }\n  ...\n  499                  result;\n  500  \n  501:             // --supress-stdout stops the stream too early on win32\n  502              if(process.platform !== 'win32') {\n  503                  args.push( '--supress-stdout');\n  ...\n  511              // Since node 0.7.something, semantics of child process events\n  512              // changed - `exit` event is emitted when child process exits\n  513:             // and `close` event is emitted when child's streams stdio streams\n  514              // are closed. `exit` event is emitted before `close` event, and\n  515:             // since we use child's stdio streams, we shouldn't rely on `exit`\n  516              // event.\n  517              //\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\utils\\nopstream.js:\n    1: // NopStream\n    2: // a writeable stream to mimic writing to /dev/null on windows\n    3  // from https://gist.github.com/3221453\n    4  \n    5  // Set both readable and writable in constructor.\n    6: var NopStream  = exports.NopStream  = function () {\n    7      this.readable = true;\n    8      this.writable = true;\n    9  };\n   10  \n   11: // Inherit from base stream class.\n   12: require('util').inherits(NopStream , require('stream'));\n   13  \n   14  // Extract args to `write` and emit as `data` event.\n   15: NopStream .prototype.write = function () {\n   16      args = Array.prototype.slice.call(arguments, 0);\n   17      this.emit.apply(this, ['data'].concat(args))\n   ..\n   19  \n   20  // Extract args to `end` and emit as `end` event.\n   21: NopStream .prototype.end = function () {\n   22      args = Array.prototype.slice.call(arguments, 0);\n   23      this.emit.apply(this, ['end'].concat(args))\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\console.js:\n    1: var eyes = require('eyes').inspector({ stream: null, styles: false });\n    2  \n    3  // Stylize a string\n    .\n   37  this.puts = function (options) {\n   38      var stylize = exports.stylize;\n   39:     options.stream || (options.stream = process.stdout);\n   40      options.tail = options.tail || '';\n   41  \n   ..\n   49              });\n   50          }\n   51:         return options.stream.write(args.join('\\n') + options.tail);\n   52      };\n   53  };\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\reporters\\dot-matrix.js:\n    9  \n   10  this.name = 'dot-matrix';\n   11: this.setStream = function (s) {\n   12:     options.stream = s;\n   13  };\n   14  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\reporters\\json.js:\n    7  //\n    8  this.name = 'json';\n    9: this.setStream = function (s) {\n   10:     options.stream = s;\n   11  };\n   12  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\reporters\\spec.js:\n   10  \n   11  this.name = 'spec';\n   12: this.setStream = function (s) {\n   13:     options.stream = s;\n   14  };\n   15  this.report = function (data) {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\reporters\\tap.js:\n   11  \n   12  this.name = \"tap\";\n   13: this.setSTream = function setStream(s) {\n   14:   options.stream = s;\n   15  };\n   16  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\reporters\\watch.js:\n   10  \n   11  this.name = 'watch';\n   12: this.setStream = function (s) {\n   13:     options.stream = s;\n   14  };\n   15  this.reset = function () {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\lib\\vows\\reporters\\xunit.js:\n   50  \n   51  this.name = 'xunit';\n   52: this.setStream = function (s) {\n   53:   options.stream = s;\n   54  };\n   55  this.report = function (data) {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\node_modules\\eyes\\README.md:\n   36  If you want to return the output of eyes without printing it, you can set it up this way:\n   37  \n   38:     var inspect = require('eyes').inspector({ stream: null });\n   39  \n   40      sys.puts(inspect({ something: 42 }));\n   ..\n   59      pretty: true,             // Indent object literals\n   60      hideFunctions: false,     // Don't output functions at all\n   61:     stream: process.stdout,   // Stream to write to, or null\n   62      maxLength: 2048           // Truncate output if longer\n   63  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\node_modules\\eyes\\lib\\eyes.js:\n   30      hideFunctions: false,\n   31      showHidden: false,\n   32:     stream: process.stdout,\n   33      maxLength: 2048           // Truncate output if longer\n   34  };\n   ..\n   43  };\n   44  \n   45: // If we have a `stream` defined, use it to print a styled string,\n   46  // if not, we just return the stringified object.\n   47  eyes.inspect = function (obj, label, options) {\n   48      options = merge(this.defaults, options || {});\n   49  \n   50:     if (options.stream) {\n   51          return this.print(stringify(obj, options), label, options);\n   52      } else {\n   ..\n   55  };\n   56  \n   57: // Output using the 'stream', and an optional label\n   58  // Loop through `str`, and truncate it after `options.maxLength` has been reached.\n   59  // Because escape sequences are, at this point embeded within\n   ..\n   70          } else { c++ }\n   71      }\n   72:     return options.stream.write.call(options.stream, (label ?\n   73          this.stylize(label, options.styles.label, options.styles) + ': ' : '') +\n   74          this.stylize(str,   options.styles.all, options.styles) + '\\033[0m' + \"\\n\");\n   ..\n  121              case \"regexp\"   : return stylize('/' + obj.source + '/', 'regexp');\n  122              case \"number\"   : return stylize(obj + '',    'number');\n  123:             case \"function\" : return options.stream ? stylize(\"Function\", 'other') : '[Function]';\n  124              case \"null\"     : return stylize(\"null\",      'special');\n  125              case \"undefined\": return stylize(\"undefined\", 'special');\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\node_modules\\eyes\\test\\eyes-test.js:\n   49  eyes.inspect([null], \"null in array\");\n   50  \n   51: var inspect = eyes.inspector({ stream: null });\n   52  \n   53  util.puts(inspect('something', \"something\"));\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\datetime\\node_modules\\vows\\node_modules\\glob\\node_modules\\once\\README.md:\n   43  function load (cb) {\n   44    cb = once(cb)\n   45:   var stream = createStream()\n   46:   stream.once('data', cb)\n   47:   stream.once('end', function () {\n   48      if (!cb.called) cb(new Error('not found'))\n   49    })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\History.md:\n  350    * Changed view engine signature. no longer `engine.render(str, options, callback)`, now `engine.compile(str, options) -> Function`, the returned function accepts `fn(locals)`.\n  351    * Fixed `req.param()` bug returning Array.prototype methods. Closes #552\n  352:   * Fixed; using `Stream#pipe()` instead of `sys.pump()` in `res.sendfile()`\n  353    * Fixed; using _qs_ module instead of _querystring_\n  354    * Fixed; strip unsafe chars from jsonp callbacks\n  355:   * Removed \"stream threshold\" setting\n  356  \n  357  1.0.8 / 2011-03-01 \n  ...\n  454    * Added extending of flash formatters via `app.flashFormatters`\n  455    * Added flash formatter support. Closes #411\n  456:   * Added streaming support to `res.sendfile()` using `sys.pump()` when >= \"stream threshold\"\n  457:   * Added _stream threshold_ setting for `res.sendfile()`\n  458    * Added `res.send()` __HEAD__ support\n  459    * Added `res.clearCookie()`\n  ...\n  589    * Added callback function param to Request#error()\n  590    * Added Request#sendHead()\n  591:   * Added Request#stream()\n  592    * Added support for Request#respond(304, null) for empty response bodies\n  593    * Added ETag support to Request#sendfile()\n  594:   * Added options to Request#sendfile(), passed to fs.createReadStream()\n  595    * Added filename arg to Request#download()\n  596    * Performance enhanced due to pre-reversing plugins so that plugins.reverse() is not called on each request\n  597    * Performance enhanced by preventing several calls to toLowerCase() in Router#match()\n  598:   * Changed; Request#sendfile() now streams\n  599    * Changed; Renamed Request#halt() to Request#respond(). Closes #289\n  600    * Changed; Using sys.inspect() instead of JSON.encode() for error output\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\lib\\index.js:\n   30   *  - [router](middleware-router.html) provides rich Sinatra / Express-like routing\n   31   *  - [staticCache](middleware-staticCache.html) memory cache layer for the static() middleware\n   32:  *  - [static](middleware-static.html) streaming static file server supporting `Range` and more\n   33   *  - [directory](middleware-directory.html) directory listing middleware\n   34   *  - [vhost](middleware-vhost.html) virtual host sub-domain mapping middleware\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\compress.js:\n   73        , writeHead = res.writeHead\n   74        , end = res.end\n   75:       , stream\n   76        , method;\n   77  \n   ..\n   83      res.write = function(chunk, encoding){\n   84        if (!this._header) this._implicitHeader();\n   85:       return stream\n   86:         ? stream.write(chunk, encoding)\n   87          : write.call(this, chunk, encoding);\n   88      };\n   ..\n   93        }\n   94        if (chunk) this.write(chunk, encoding);\n   95:       return stream\n   96:         ? stream.end()\n   97          : end.call(this);\n   98      };\n   ..\n  117          // compression method\n  118          if (method) {\n  119:           // compression stream\n  120:           stream = exports.methods[method](options);\n  121  \n  122            // header fields\n  ...\n  126  \n  127            // compression\n  128:           stream.on('data', function(chunk){\n  129              write.call(res, chunk);\n  130            });\n  131  \n  132:           stream.on('end', function(){\n  133              end.call(res);\n  134            });\n  135  \n  136:           stream.on('drain', function() {\n  137              res.emit('drain');\n  138            });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\logger.js:\n   25   *\n   26   *   - `format`  Format string, see below for tokens\n   27:  *   - `stream`  Output stream, defaults to _stdout_\n   28   *   - `buffer`  Buffer duration, defaults to 1000ms when _true_\n   29   *   - `immediate`  Write log line on request instead of response (for response times)\n   ..\n  100  \n  101    // options\n  102:   var stream = options.stream || process.stdout\n  103      , buffer = options.buffer;\n  104  \n  105    // buffering support\n  106    if (buffer) {\n  107:     var realStream = stream\n  108        , interval = 'number' == typeof buffer\n  109          ? buffer\n  ...\n  113      setInterval(function(){\n  114        if (buf.length) {\n  115:         realStream.write(buf.join(''), 'ascii');\n  116          buf.length = 0;\n  117        }\n  118      }, interval); \n  119  \n  120:     // swap the stream\n  121:     stream = {\n  122        write: function(str){\n  123          buf.push(str);\n  ...\n  139        var line = fmt(exports, req, res);\n  140        if (null == line) return;\n  141:       stream.write(line + '\\n', 'ascii');\n  142      } else {\n  143        // proxy end to output loggging\n  ...\n  148          var line = fmt(exports, req, res);\n  149          if (null == line) return;\n  150:         stream.write(line + '\\n', 'ascii');\n  151        };\n  152      }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\static.js:\n  186        // valid\n  187        if (ranges) {\n  188:         // TODO: stream options\n  189          // TODO: multiple support\n  190          opts.start = ranges[0].start;\n  ...\n  211      if (head) return res.end();\n  212  \n  213:     // stream\n  214:     var stream = fs.createReadStream(path, opts);\n  215:     req.emit('static', stream);\n  216:     stream.pipe(res);\n  217  \n  218      // callback\n  ...\n  220        function callback(err) { done || fn(err); done = true }\n  221        req.on('close', callback);\n  222:       stream.on('end', callback);\n  223      }\n  224    });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\lib\\middleware\\staticCache.js:\n   64  \n   65      // cache static\n   66:     req.on('static', function(stream){\n   67        var headers = res._headers\n   68          , cc = utils.parseCacheControl(headers['cache-control'] || '')\n   ..\n   90  \n   91        // validation notifiactions don't contain a steam\n   92:       if (null == stream) return;\n   93  \n   94        // add the cache object\n   ..\n   97  \n   98        // store the chunks\n   99:       stream.on('data', function(chunk){\n  100          arr.push(chunk);\n  101        });\n  102  \n  103        // flag it as complete\n  104:       stream.on('end', function(){\n  105          arr.complete = true;\n  106        });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\node_modules\\formidable\\Readme.md:\n  146  form.onPart(part);\n  147  ```\n  148: You may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events  processing which would occur otherwise, making you fully responsible for handling the processing.\n  149  \n  150  ```javascript\n  ...\n  229  #### 'file'\n  230  \n  231: Emitted whenever a new file is detected in the upload stream. Use this even if\n  232: you want to stream the file to somewhere else while buffering the upload on\n  233  the file system.\n  234  \n  ...\n  298  * Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\n  299  * Documentation improvements (Sven Lito, Andre Azevedo)\n  300: * Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\n  301  * Use os.tmpDir() to get tmp directory (Andrew Kelley)\n  302  * Improve package.json (Andrew Kelley, Sven Lito)\n  ...\n  312  ### v1.0.10\n  313  \n  314: * Make parts to be proper Streams (Matt Robenolt)\n  315  \n  316  ### v1.0.9\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\node_modules\\formidable\\lib\\file.js:\n    2  \n    3  var util = require('util'),\n    4:     WriteStream = require('fs').WriteStream,\n    5      EventEmitter = require('events').EventEmitter,\n    6      crypto = require('crypto');\n    .\n   16    this.lastModifiedDate = null;\n   17  \n   18:   this._writeStream = null;\n   19    \n   20    for (var key in properties) {\n   ..\n   32  \n   33  File.prototype.open = function() {\n   34:   this._writeStream = new WriteStream(this.path);\n   35  };\n   36  \n   ..\n   53      self.hash.update(buffer);\n   54    }\n   55:   this._writeStream.write(buffer, function() {\n   56      self.lastModifiedDate = new Date();\n   57      self.size += buffer.length;\n   ..\n   66      self.hash = self.hash.digest('hex');\n   67    }\n   68:   this._writeStream.end(function() {\n   69      self.emit('end');\n   70      cb();\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\node_modules\\formidable\\lib\\incoming_form.js:\n   11      StringDecoder = require('string_decoder').StringDecoder,\n   12      EventEmitter = require('events').EventEmitter,\n   13:     Stream = require('stream').Stream,\n   14      os = require('os');\n   15  \n   ..\n   51        req.pause();\n   52      } catch (err) {\n   53:       // the stream was destroyed\n   54        if (!this.ended) {\n   55          // before it was completed, crash & burn\n   ..\n   65        req.resume();\n   66      } catch (err) {\n   67:       // the stream was destroyed\n   68        if (!this.ended) {\n   69          // before it was completed, crash & burn\n   ..\n  253    }\n  254  \n  255:   if (this.headers['content-type'].match(/octet-stream/i)) {\n  256:     this._initOctetStream();\n  257      return;\n  258    }\n  ...\n  291    if (Array.isArray(this.openedFiles)) {\n  292      this.openedFiles.forEach(function(file) {\n  293:       file._writeStream.destroy();\n  294        setTimeout(fs.unlink, 0, file.path, function(error) { });\n  295      });\n  ...\n  326  \n  327    parser.onPartBegin = function() {\n  328:     part = new Stream();\n  329      part.readable = true;\n  330      part.headers = {};\n  ...\n  450  };\n  451  \n  452: IncomingForm.prototype._initOctetStream = function() {\n  453:   this.type = 'octet-stream';\n  454    var filename = this.headers['x-file-name'];\n  455    var mime = this.headers['content-type'];\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\node_modules\\formidable\\lib\\multipart_parser.js:\n  324      callback(this, 'end');\n  325    } else if (this.state != S.END) {\n  326:     return new Error('MultipartParser.end(): stream ended unexpectedly: ' + this.explain());\n  327    }\n  328  };\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\connect\\node_modules\\formidable\\lib\\querystring_parser.js:\n    2  \n    3  // This is a buffering parser, not quite as nice as the multipart one.\n    4: // If I find time I'll rewrite this to be fully streaming as well\n    5  var querystring = require('querystring');\n    6  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\mime\\README.md:\n   24  \n   25      mime.extension('text/html');                 // => 'html'\n   26:     mime.extension('application/octet-stream');  // => 'bin'\n   27  \n   28  ### mime.charsets.lookup() - map mime-type to charset\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\mime\\test.js:\n   19  \n   20    // default\n   21:   test.equal('application/octet-stream', mime.lookup('text.nope'));\n   22  \n   23    // fallback\n   ..\n   31    test.equal('txt', mime.extension(mime.types.text));\n   32    test.equal('html', mime.extension(mime.types.htm));\n   33:   test.equal('bin', mime.extension('application/octet-stream'));\n   34  \n   35    test.finish();\n   ..\n   47  \n   48    // default\n   49:   test.equal('application/octet-stream', mime.lookup('TEXT.NOPE'));\n   50  \n   51    // fallback\n   ..\n   56  \n   57  exports[\"test custom types\"] = function(test) {\n   58:   test.equal('application/octet-stream', mime.lookup('file.buffer'));\n   59    test.equal('audio/mp4', mime.lookup('file.m4a'));\n   60  \n   ..\n   70  \n   71    // fallback\n   72:   test.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n   73  \n   74    test.finish();\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\mime\\types\\mime.types:\n  143  # application/ocsp-request\n  144  # application/ocsp-response\n  145: application/octet-stream	bin dms lha lrf lzh so iso dmg dist distz pkg bpk dump elc deploy\n  146  application/oda					oda\n  147  application/oebps-package+xml			opf\n  ...\n  618  # application/vnd.ntt-local.file-transfer\n  619  # application/vnd.ntt-local.sip-ta_remote\n  620: # application/vnd.ntt-local.sip-ta_tcp_stream\n  621  application/vnd.oasis.opendocument.chart		odc\n  622  application/vnd.oasis.opendocument.chart-template	otc\n  ...\n  638  # application/vnd.obn\n  639  # application/vnd.oipf.contentaccessdownload+xml\n  640: # application/vnd.oipf.contentaccessstreaming+xml\n  641  # application/vnd.oipf.cspg-hexbinary\n  642  # application/vnd.oipf.dae.svg+xml\n  ...\n  796  # application/vnd.radisys.msml-audit-conn+xml\n  797  # application/vnd.radisys.msml-audit-dialog+xml\n  798: # application/vnd.radisys.msml-audit-stream+xml\n  799  # application/vnd.radisys.msml-conf+xml\n  800  # application/vnd.radisys.msml-dialog+xml\n  ...\n  859  application/vnd.stardivision.writer-global	sgl\n  860  application/vnd.stepmania.stepchart		sm\n  861: # application/vnd.street-stream\n  862  application/vnd.sun.xml.calc			sxc\n  863  application/vnd.sun.xml.calc.template		stc\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-logger\\node_modules\\express\\node_modules\\mime\\types\\node.types:\n   25  # Why: semi-standard extension w/in the node community\n   26  # Added by: tootallnate\n   27: application/octet-stream  buffer\n   28  \n   29  # What: The \"protected\" MP-4 formats used by iTunes.\n   30: # Why: Required for streaming music to browsers (?)\n   31  # Added by: broofa\n   32  application/mp4  m4p\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-session\\HISTORY.md:\n   52  ==================\n   53  \n   54:   * Fix `res.end` patch to call correct upstream `res.write`\n   55  \n   56  1.7.2 / 2014-07-27\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-session\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\express-session\\node_modules\\uid-safe\\node_modules\\mz\\README.md:\n   93  Currently, the plans are to eventually support:\n   94  \n   95: - ECMAScript7 Streams\n   96  \n   97  [bluebird]: https://github.com/petkaantonov/bluebird\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\logger\\logger.js:\n   48      // Write to a file\n   49      log_file_path = path.normalize(log_file_path);\n   50:     this.stream = fs.createWriteStream(log_file_path, {flags: 'a', encoding: 'utf8', mode: 0666});\n   51:     this.stream.write(\"\\n\");\n   52:     this.write = function(text) { this.stream.write(text); };\n   53    }\n   54  };\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\method-override\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\morgan\\index.js:\n   70    // steam\n   71    var buffer = options.buffer\n   72:   var stream = options.stream || process.stdout\n   73  \n   74    // buffering support\n   ..\n   76      deprecate('buffer option')\n   77  \n   78:     var realStream = stream\n   79      var buf = []\n   80      var timer = null\n   ..\n   88  \n   89        if (buf.length) {\n   90:         realStream.write(buf.join(''));\n   91          buf.length = 0;\n   92        }\n   93      }\n   94  \n   95:     // swap the stream\n   96:     stream = {\n   97        write: function(str){\n   98          if (timer === null) {\n   ..\n  124  \n  125        debug('log request')\n  126:       stream.write(line + '\\n')\n  127      };\n  128  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\morgan\\README.md:\n   45  ```\n   46  \n   47: ##### stream\n   48  \n   49: Output stream for writing log lines, defaults to `process.stdout`.\n   50  \n   51  #### Predefined Formats\n   ..\n  214  var app = express()\n  215  \n  216: // create a write stream (in append mode)\n  217: var accessLogStream = fs.createWriteStream(__dirname + '/access.log', {flags: 'a'})\n  218  \n  219  // setup the logger\n  220: app.use(morgan('combined', {stream: accessLogStream}))\n  221  \n  222  app.get('/', function (req, res) {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\morgan\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\morgan\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\HISTORY.md:\n    2  ==================\n    3  \n    4:   * Fully unpipe the stream on error\n    5      - Fixes `Cannot switch to old mode now` error on Node.js 0.10+\n    6  \n    .\n   36  ==================\n   37  \n   38:   * check encoding for old streams1\n   39    * support node.js < 0.10.6\n   40  \n   ..\n   70    * add err.statusCode and err.type\n   71    * allow for encoding option to be true\n   72:   * pause the stream instead of dumping on error\n   73:   * throw if the stream's encoding is set\n   74  \n   75  1.0.1 / 2013-11-19\n   76  ==================\n   77  \n   78:   * dont support streams1, throw if dev set encoding\n   79  \n   80  1.0.0 / 2013-11-17\n   ..\n  106  ==================\n  107  \n  108:   * dump stream on bad headers\n  109    * listen to events after defining received and buffers\n  110  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\index.js:\n    2  var iconv = require('iconv-lite')\n    3  \n    4: module.exports = function (stream, options, done) {\n    5    if (options === true || typeof options === 'string') {\n    6      // short cut for encoding\n    .\n   35  \n   36    // check the length and limit options.\n   37:   // note: we intentionally leave the stream paused,\n   38:   // so users should handle the stream themselves.\n   39    if (limit !== null && length !== null && length > limit) {\n   40      var err = makeError('request entity too large', 'entity.too.large')\n   ..\n   43      err.limit = limit\n   44      cleanup()\n   45:     halt(stream)\n   46      process.nextTick(function () {\n   47        done(err)\n   ..\n   50    }\n   51  \n   52:   // streams1: assert request encoding is buffer.\n   53:   // streams2+: assert the stream encoding is buffer.\n   54:   //   stream._decoder: streams1\n   55:   //   state.encoding: streams2\n   56:   //   state.decoder: streams2, specifically < 0.10.6\n   57:   var state = stream._readableState\n   58:   if (stream._decoder || (state && (state.encoding || state.decoder))) {\n   59      // developer error\n   60:     var err = makeError('stream encoding should not be set',\n   61:       'stream.encoding.set')\n   62      err.status = err.statusCode = 500\n   63      cleanup()\n   64:     halt(stream)\n   65      process.nextTick(function () {\n   66        done(err)\n   ..\n   76    } catch (err) {\n   77      cleanup()\n   78:     halt(stream)\n   79      process.nextTick(function () {\n   80        done(err)\n   ..\n   87      : []\n   88  \n   89:   stream.on('data', onData)\n   90:   stream.once('end', onEnd)\n   91:   stream.once('error', onEnd)\n   92:   stream.once('close', cleanup)\n   93  \n   94    return defer\n   ..\n  111        err.limit = limit\n  112        cleanup()\n  113:       halt(stream)\n  114        done(err)\n  115      }\n  ...\n  119      if (err) {\n  120        cleanup()\n  121:       halt(stream)\n  122        done(err)\n  123      } else if (length !== null && received !== length) {\n  ...\n  141      received = buffer = null\n  142  \n  143:     stream.removeListener('data', onData)\n  144:     stream.removeListener('end', onEnd)\n  145:     stream.removeListener('error', onEnd)\n  146:     stream.removeListener('close', cleanup)\n  147    }\n  148  }\n  ...\n  162  \n  163  /**\n  164:  * Halt a stream.\n  165   *\n  166:  * @param {Object} stream\n  167   * @api private\n  168   */\n  169  \n  170: function halt(stream) {\n  171:   // unpipe everything from the stream\n  172:   unpipe(stream)\n  173  \n  174:   // pause stream\n  175:   if (typeof stream.pause === 'function') {\n  176:     stream.pause()\n  177    }\n  178  }\n  ...\n  194  \n  195  /**\n  196:  * Unpipe everything from a stream.\n  197   *\n  198:  * @param {Object} stream\n  199   * @api private\n  200   */\n  201  \n  202  /* istanbul ignore next: implementation differs between versions */\n  203: function unpipe(stream) {\n  204:   if (typeof stream.unpipe === 'function') {\n  205      // new-style\n  206:     stream.unpipe()\n  207      return\n  208    }\n  ...\n  210    // Node.js 0.8 hack\n  211    var listener\n  212:   var listeners = stream.listeners('close')\n  213  \n  214    for (var i = 0; i < listeners.length; i++) {\n  ...\n  220  \n  221      // invoke the listener\n  222:     listener.call(stream)\n  223    }\n  224  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\package.json:\n    1  {\n    2    \"name\": \"raw-body\",\n    3:   \"description\": \"Get and validate the raw body of a readable stream.\",\n    4    \"version\": \"1.3.0\",\n    5    \"author\": {\n    .\n   21    \"repository\": {\n   22      \"type\": \"git\",\n   23:     \"url\": \"git://github.com/stream-utils/raw-body\"\n   24    },\n   25    \"dependencies\": {\n   ..\n   30      \"istanbul\": \"0.3.0\",\n   31      \"mocha\": \"~1.20.1\",\n   32:     \"readable-stream\": \"~1.0.17\",\n   33      \"through2\": \"~0.5.1\"\n   34    },\n   ..\n   42    },\n   43    \"bugs\": {\n   44:     \"url\": \"https://github.com/stream-utils/raw-body/issues\"\n   45    },\n   46:   \"homepage\": \"https://github.com/stream-utils/raw-body\",\n   47    \"_id\": \"raw-body@1.3.0\",\n   48    \"dist\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\README.md:\n    2  \n    3  [![NPM version](https://badge.fury.io/js/raw-body.svg)](http://badge.fury.io/js/raw-body)\n    4: [![Build Status](https://travis-ci.org/stream-utils/raw-body.svg?branch=master)](https://travis-ci.org/stream-utils/raw-body)\n    5: [![Coverage Status](https://img.shields.io/coveralls/stream-utils/raw-body.svg?branch=master)](https://coveralls.io/r/stream-utils/raw-body)\n    6  \n    7: Gets the entire buffer of a stream either as a `Buffer` or a string.\n    8: Validates the stream's length against an expected length and maximum limit.\n    9  Ideal for parsing request bodies.\n   10  \n   ..\n   42  ```\n   43  \n   44: ### getRawBody(stream, [options], [callback])\n   45  \n   46  Returns a thunk for yielding with generators.\n   ..\n   48  Options:\n   49  \n   50: - `length` - The length length of the stream.\n   51:   If the contents of the stream do not add up to this length,\n   52    an `400` error code is returned.\n   53  - `limit` - The byte limit of the body.\n   ..\n   66  \n   67      - `limit` - the limit in bytes\n   68:     - `length` and `expected` - the expected length of the stream\n   69      - `received` - the received bytes\n   70      - `encoding` - the invalid encoding\n   71      - `status` and `statusCode` - the corresponding status code for the error\n   72:     - `type` - either `entity.too.large`, `request.size.invalid`, `stream.encoding.set`, or `encoding.unsupported`\n   73  \n   74  - `res` - the result, either as a `String` if an encoding was set or a `Buffer` otherwise.\n   75  \n   76: If an error occurs, the stream will be paused, everything unpiped,\n   77: and you are responsible for correctly disposing the stream.\n   78  For HTTP requests, no handling is required if you send a response.\n   79: For streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.\n   80  \n   81  ## License\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\Changelog.md:\n    3  \n    4   * added encodings UTF-7 (RFC2152) and UTF-7-IMAP (RFC3501 Section 5.1.3)\n    5:  * fixed streaming base64 encoding\n    6  \n    7  # 0.4.3 / 2014-06-14\n    .\n   22   * code is rewritten from scratch\n   23   * all widespread encodings are supported\n   24:  * streaming interface added\n   25   * browserify compatibility added\n   26   * (optional) extend core primitive encodings to make usage even simpler\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\package.json:\n   77    \"browser\": {\n   78      \"./extend-node\": false,\n   79:     \"./streams\": false\n   80    },\n   81    \"devDependencies\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\README.md:\n    7   * Faster than [node-iconv](https://github.com/bnoordhuis/node-iconv) (see below for performance comparison).\n    8   * Intuitive encode/decode API\n    9:  * Streaming support for Node v0.10+\n   10:  * Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings.\n   11   * In-browser usage via [Browserify](https://github.com/substack/node-browserify) (~180k gzip compressed with Buffer shim included).\n   12   * License: MIT.\n   ..\n   29  ```\n   30  \n   31: ### Streaming API (Node v0.10+)\n   32  ```javascript\n   33  \n   34: // Decode stream (from binary stream to js strings)\n   35  http.createServer(function(req, res) {\n   36:     var converterStream = iconv.decodeStream('win1251');\n   37:     req.pipe(converterStream);\n   38  \n   39:     converterStream.on('data', function(str) {\n   40          console.log(str); // Do something with decoded strings, chunk-by-chunk.\n   41      });\n   42  });\n   43  \n   44: // Convert encoding streaming example\n   45: fs.createReadStream('file-in-win1251.txt')\n   46:     .pipe(iconv.decodeStream('win1251'))\n   47:     .pipe(iconv.encodeStream('ucs2'))\n   48:     .pipe(fs.createWriteStream('file-in-ucs2.txt'));\n   49  \n   50: // Sugar: all encode/decode streams have .collect(cb) method to accumulate data.\n   51  http.createServer(function(req, res) {\n   52:     req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {\n   53          assert(typeof body == 'string');\n   54          console.log(body); // full request body string\n   ..\n   76  });\n   77  \n   78: fs.createReadStream(\"file.txt\", \"shift_jis\");\n   79  \n   80  // External modules are also supported (if they use Node primitives, which they probably do).\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\README.md~:\n   49  ## TODO\n   50  \n   51: *   Support streaming character conversion, something like util.pipe(req, iconv.fromEncodingStream('latin1')).\n   52  *   Add more encodings.\n   53  *   Add transliteration (best fit char).\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\encodings\\utf7.js:\n   54          base64Accum = this.base64Accum;\n   55  \n   56:     // The decoder is more involved as we must handle chunks in stream.\n   57  \n   58      for (var i = 0; i < buf.length; i++) {\n   ..\n  224          base64Accum = this.base64Accum;\n  225  \n  226:     // The decoder is more involved as we must handle chunks in stream.\n  227      // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n  228  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\lib\\extend-node.js:\n  164  \n  165          // -- Readable -------------------------------------------------------------\n  166:         if (iconv.supportsStreams) {\n  167:             var Readable = require('stream').Readable;\n  168  \n  169              original.ReadableSetEncoding = Readable.prototype.setEncoding;\n  ...\n  199          Buffer.prototype.write = original.BufferWrite;\n  200  \n  201:         if (iconv.supportsStreams) {\n  202:             var Readable = require('stream').Readable;\n  203  \n  204              Readable.prototype.setEncoding = original.ReadableSetEncoding;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\lib\\index.js:\n  111  if (nodeVer) {\n  112  \n  113:     // Load streaming support in Node v0.10+\n  114      var nodeVerArr = nodeVer.split(\".\").map(Number);\n  115      if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n  116:         require(\"./streams\")(iconv);\n  117      }\n  118  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\raw-body\\node_modules\\iconv-lite\\lib\\streams.js:\n    1: var Transform = require(\"stream\").Transform;\n    2  \n    3  \n    .\n    6      \n    7      // Additional Public API.\n    8:     iconv.encodeStream = function encodeStream(encoding, options) {\n    9:         return new IconvLiteEncoderStream(iconv.getCodec(encoding).encoder(options), options);\n   10      }\n   11  \n   12:     iconv.decodeStream = function decodeStream(encoding, options) {\n   13:         return new IconvLiteDecoderStream(iconv.getCodec(encoding).decoder(options), options);\n   14      }\n   15  \n   16:     iconv.supportsStreams = true;\n   17  \n   18  \n   19      // Not published yet.\n   20:     iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n   21:     iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n   22:     iconv._collect = IconvLiteDecoderStream.prototype.collect;\n   23  };\n   24  \n   25  \n   26: // == Encoder stream =======================================================\n   27: function IconvLiteEncoderStream(conv, options) {\n   28      this.conv = conv;\n   29      options = options || {};\n   ..\n   32  }\n   33  \n   34: IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n   35:     constructor: { value: IconvLiteEncoderStream }\n   36  });\n   37  \n   38: IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n   39      if (typeof chunk != 'string')\n   40:         return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n   41      try {\n   42          var res = this.conv.write(chunk);\n   ..\n   49  }\n   50  \n   51: IconvLiteEncoderStream.prototype._flush = function(done) {\n   52      try {\n   53          var res = this.conv.end();\n   ..\n   60  }\n   61  \n   62: IconvLiteEncoderStream.prototype.collect = function(cb) {\n   63      var chunks = [];\n   64      this.on('error', cb);\n   ..\n   71  \n   72  \n   73: // == Decoder stream =======================================================\n   74: function IconvLiteDecoderStream(conv, options) {\n   75      this.conv = conv;\n   76      options = options || {};\n   ..\n   79  }\n   80  \n   81: IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n   82:     constructor: { value: IconvLiteDecoderStream }\n   83  });\n   84  \n   85: IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n   86      if (!Buffer.isBuffer(chunk))\n   87:         return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n   88      try {\n   89          var res = this.conv.write(chunk);\n   ..\n   96  }\n   97  \n   98: IconvLiteDecoderStream.prototype._flush = function(done) {\n   99      try {\n  100          var res = this.conv.end();\n  ...\n  107  }\n  108  \n  109: IconvLiteDecoderStream.prototype.collect = function(cb) {\n  110      var res = '';\n  111      this.on('error', cb);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-index\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-index\\node_modules\\http-errors\\node_modules\\statuses\\package.json:\n   28      \"mocha\": \"1\",\n   29      \"request\": \"^2.44.0\",\n   30:     \"stream-to-array\": \"^2.0.2\"\n   31    },\n   32    \"scripts\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-index\\node_modules\\mime-types\\README.md:\n   12  \n   13  - __No fallbacks.__ Instead of naively returning the first available type, `mime-types` simply returns `false`,\n   14:   so do `var type = mime.lookup('unrecognized') || 'application/octet-stream'`.\n   15  - No `new Mime()` business, so you could do `var lookup = require('mime-types').lookup`.\n   16  - Additional mime types are added such as jade and stylus via [mime-db](https://github.com/jshttp/mime-db)\n   ..\n   65  \n   66  ```js\n   67: mime.extension('application/octet-stream') // 'bin'\n   68  ```\n   69  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-index\\node_modules\\mime-types\\node_modules\\mime-db\\db.json:\n  640      \"source\": \"apache\"\n  641    },\n  642:   \"application/octet-stream\": {\n  643      \"source\": \"iana\",\n  644      \"compressible\": false,\n  ...\n 1316      \"source\": \"iana\"\n 1317    },\n 1318:   \"application/vnd.century-systems.tcp_stream\": {\n 1319      \"source\": \"iana\"\n 1320    },\n ....\n 2707      \"source\": \"iana\"\n 2708    },\n 2709:   \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n 2710      \"source\": \"iana\"\n 2711    },\n ....\n 2792      \"source\": \"iana\"\n 2793    },\n 2794:   \"application/vnd.oipf.contentaccessstreaming+xml\": {\n 2795      \"source\": \"iana\"\n 2796    },\n ....\n 3335      \"source\": \"iana\"\n 3336    },\n 3337:   \"application/vnd.radisys.msml-audit-stream+xml\": {\n 3338      \"source\": \"iana\"\n 3339    },\n ....\n 3592      \"extensions\": [\"sm\"]\n 3593    },\n 3594:   \"application/vnd.street-stream\": {\n 3595      \"source\": \"iana\"\n 3596    },\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-index\\node_modules\\mime-types\\node_modules\\mime-db\\package.json:\n   20      \"istanbul\": \"0.3.2\",\n   21      \"mocha\": \"~1.21.4\",\n   22:     \"stream-to-array\": \"2\"\n   23    },\n   24    \"engines\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\HISTORY.md:\n   62  \n   63    * deps: send@0.8.2\n   64:     - Work around `fd` leak in Node.js 0.10 for `fs.ReadStream`\n   65  \n   66  1.5.1 / 2014-08-09\n   ..\n  165      - Calculate ETag with md5 for reduced collisions\n  166      - Fix wrong behavior when index file matches directory\n  167:     - Ignore stream errors after request ends\n  168      - Skip directories in index file search\n  169      - deps: debug@0.8.1\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\index.js:\n   70      }\n   71  \n   72:     // create send stream\n   73:     var stream = send(req, path, opts)\n   74  \n   75      if (redirect) {\n   76        // redirect relative to originalUrl\n   77:       stream.on('directory', function redirect() {\n   78          if (hasTrailingSlash) {\n   79            return next()\n   ..\n   91      } else {\n   92        // forward to next middleware on directory\n   93:       stream.on('directory', next)\n   94      }\n   95  \n   96      // add headers listener\n   97      if (setHeaders) {\n   98:       stream.on('headers', setHeaders)\n   99      }\n  100  \n  101      // forward non-404 errors\n  102:     stream.on('error', function error(err) {\n  103        next(err.status === 404 ? null : err)\n  104      })\n  105  \n  106      // pipe\n  107:     stream.pipe(res)\n  108    }\n  109  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\History.md:\n   60  ==================\n   61  \n   62:   * Work around `fd` leak in Node.js 0.10 for `fs.ReadStream`\n   63    * deps: dethroy@1.0.2\n   64  \n   ..\n  155   * Calculate ETag with md5 for reduced collisions\n  156   * Fix wrong behavior when index file matches directory\n  157:  * Ignore stream errors after request ends\n  158     - Goodbye `EBADF, read`\n  159   * Skip directories in index file search\n  ...\n  199  ==================\n  200  \n  201:   * add options parameter to send() that is passed to fs.createReadStream() [kanongil]\n  202  \n  203  0.0.4 / 2012-08-16 \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\index.js:\n    9  var escapeHtml = require('escape-html')\n   10    , parseRange = require('range-parser')\n   11:   , Stream = require('stream')\n   12    , mime = require('mime')\n   13    , fresh = require('fresh')\n   ..\n   53  \n   54  /**\n   55:  * Return a `SendStream` for `req` and `path`.\n   56   *\n   57   * @param {Request} req\n   58   * @param {String} path\n   59   * @param {Object} options\n   60:  * @return {SendStream}\n   61   * @api public\n   62   */\n   63  \n   64  function send(req, path, options) {\n   65:   return new SendStream(req, path, options);\n   66  }\n   67  \n   68  /**\n   69:  * Initialize a `SendStream` with the given `path`.\n   70   *\n   71   * @param {Request} req\n   ..\n   75   */\n   76  \n   77: function SendStream(req, path, options) {\n   78    var self = this;\n   79    options = options || {};\n   ..\n  135  \n  136  /**\n  137:  * Inherits from `Stream.prototype`.\n  138   */\n  139  \n  140: SendStream.prototype.__proto__ = Stream.prototype;\n  141  \n  142  /**\n  ...\n  144   *\n  145   * @param {Boolean} val\n  146:  * @return {SendStream}\n  147   * @api public\n  148   */\n  149  \n  150: SendStream.prototype.etag = deprecate.function(function etag(val) {\n  151    val = Boolean(val);\n  152    debug('etag %s', val);\n  ...\n  159   *\n  160   * @param {Boolean} path\n  161:  * @return {SendStream}\n  162   * @api public\n  163   */\n  164  \n  165: SendStream.prototype.hidden = deprecate.function(function hidden(val) {\n  166    val = Boolean(val);\n  167    debug('hidden %s', val);\n  ...\n  176   *\n  177   * @param {String|Boolean|Array} paths\n  178:  * @return {SendStream}\n  179   * @api public\n  180   */\n  181  \n  182: SendStream.prototype.index = deprecate.function(function index(paths) {\n  183    var index = !paths ? [] : normalizeList(paths);\n  184    debug('index %o', paths);\n  ...\n  191   *\n  192   * @param {String} path\n  193:  * @return {SendStream}\n  194   * @api public\n  195   */\n  196  \n  197: SendStream.prototype.root = function(path){\n  198    path = String(path);\n  199    this._root = resolve(path)\n  ...\n  201  };\n  202  \n  203: SendStream.prototype.from = deprecate.function(SendStream.prototype.root,\n  204    'send.from: pass root as option');\n  205  \n  206: SendStream.prototype.root = deprecate.function(SendStream.prototype.root,\n  207    'send.root: pass root as option');\n  208  \n  ...\n  211   *\n  212   * @param {Number} maxAge\n  213:  * @return {SendStream}\n  214   * @api public\n  215   */\n  216  \n  217: SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {\n  218    maxAge = typeof maxAge === 'string'\n  219      ? ms(maxAge)\n  ...\n  233   */\n  234  \n  235: SendStream.prototype.error = function(status, err){\n  236    var res = this.res;\n  237    var msg = http.STATUS_CODES[status];\n  ...\n  259   */\n  260  \n  261: SendStream.prototype.hasTrailingSlash = function(){\n  262    return '/' == this.path[this.path.length - 1];\n  263  };\n  ...\n  270   */\n  271  \n  272: SendStream.prototype.isConditionalGET = function(){\n  273    return this.req.headers['if-none-match']\n  274      || this.req.headers['if-modified-since'];\n  ...\n  281   */\n  282  \n  283: SendStream.prototype.removeContentHeaderFields = function(){\n  284    var res = this.res;\n  285    Object.keys(res._headers).forEach(function(field){\n  ...\n  296   */\n  297  \n  298: SendStream.prototype.notModified = function(){\n  299    var res = this.res;\n  300    debug('not modified');\n  ...\n  310   */\n  311  \n  312: SendStream.prototype.headersAlreadySent = function headersAlreadySent(){\n  313    var err = new Error('Can\\'t set headers after they are sent.');\n  314    debug('headers already sent');\n  ...\n  324   */\n  325  \n  326: SendStream.prototype.isCachable = function(){\n  327    var res = this.res;\n  328    return (res.statusCode >= 200 && res.statusCode < 300) || 304 == res.statusCode;\n  ...\n  336   */\n  337  \n  338: SendStream.prototype.onStatError = function(err){\n  339    var notfound = ['ENOENT', 'ENAMETOOLONG', 'ENOTDIR'];\n  340    if (~notfound.indexOf(err.code)) return this.error(404, err);\n  ...\n  349   */\n  350  \n  351: SendStream.prototype.isFresh = function(){\n  352    return fresh(this.req.headers, this.res._headers);\n  353  };\n  ...\n  360   */\n  361  \n  362: SendStream.prototype.isRangeFresh = function isRangeFresh(){\n  363    var ifRange = this.req.headers['if-range'];\n  364  \n  ...\n  377   */\n  378  \n  379: SendStream.prototype.redirect = function(path){\n  380    if (listenerCount(this, 'directory') !== 0) {\n  381      return this.emit('directory');\n  ...\n  394   * Pipe to `res.\n  395   *\n  396:  * @param {Stream} res\n  397:  * @return {Stream} res\n  398   * @api public\n  399   */\n  400  \n  401: SendStream.prototype.pipe = function(res){\n  402    var self = this\n  403      , args = arguments\n  ...\n  482   */\n  483  \n  484: SendStream.prototype.send = function(path, stat){\n  485    var options = this.options;\n  486    var len = stat.size;\n  ...\n  559    if ('HEAD' == req.method) return res.end();\n  560  \n  561:   this.stream(path, options);\n  562  };\n  563  \n  ...\n  568   * @api private\n  569   */\n  570: SendStream.prototype.sendFile = function sendFile(path) {\n  571    var i = 0\n  572    var self = this\n  ...\n  611   * @api private\n  612   */\n  613: SendStream.prototype.sendIndex = function sendIndex(path){\n  614    var i = -1;\n  615    var self = this;\n  ...\n  636  \n  637  /**\n  638:  * Stream `path` to the response.\n  639   *\n  640   * @param {String} path\n  ...\n  643   */\n  644  \n  645: SendStream.prototype.stream = function(path, options){\n  646    // TODO: this is all lame, refactor meeee\n  647    var finished = false;\n  ...\n  651  \n  652    // pipe\n  653:   var stream = fs.createReadStream(path, options);\n  654:   this.emit('stream', stream);\n  655:   stream.pipe(res);\n  656  \n  657    // response finished, done with the fd\n  658    onFinished(res, function onfinished(){\n  659      finished = true;\n  660:     destroy(stream);\n  661    });\n  662  \n  663    // error handling code-smell\n  664:   stream.on('error', function onerror(err){\n  665      // request already finished\n  666      if (finished) return;\n  667  \n  668:     // clean up stream\n  669      finished = true;\n  670:     destroy(stream);\n  671  \n  672      // error\n  ...\n  675  \n  676    // end\n  677:   stream.on('end', function onend(){\n  678      self.emit('end');\n  679    });\n  ...\n  688   */\n  689  \n  690: SendStream.prototype.type = function(path){\n  691    var res = this.res;\n  692    if (res.getHeader('Content-Type')) return;\n  ...\n  706   */\n  707  \n  708: SendStream.prototype.setHeader = function setHeader(path, stat){\n  709    var res = this.res;\n  710  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\package.json:\n    1  {\n    2    \"name\": \"send\",\n    3:   \"description\": \"Better streaming static file server with Range and conditional-GET support\",\n    4    \"version\": \"0.10.1\",\n    5    \"author\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\Readme.md:\n    7  [![Gittip][gittip-image]][gittip-url]\n    8  \n    9:   Send is Connect's `static()` extracted for generalized use, a streaming static file\n   10    server supporting partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\n   11  \n   ..\n   24  ### send(req, path, [options])\n   25  \n   26: Create a new `SendStream` for the given path to send to a `res`. The `req` is\n   27  the Node.js HTTP request and the `path` is a urlencoded path to send (urlencoded,\n   28  not the actual file-system path).\n   ..\n   79  ### Events\n   80  \n   81: The `SendStream` is an event emitter and will emit the following events:\n   82  \n   83    - `error` an error occurred `(err)`\n   ..\n   85    - `file` a file was requested `(path, stat)`\n   86    - `headers` the headers are about to be set on a file `(res, path, stat)`\n   87:   - `stream` file streaming has started `(stream)`\n   88:   - `end` streaming has completed\n   89  \n   90  ### .pipe\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\debug\\node.js:\n   34  \n   35  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n   36: var stream = 1 === fd ? process.stdout :\n   37               2 === fd ? process.stderr :\n   38:              createWritableStdioStream(fd);\n   39  \n   40  /**\n   ..\n  104  \n  105  function log() {\n  106:   return stream.write(util.format.apply(this, arguments) + '\\n');\n  107  }\n  108  \n  ...\n  142   */\n  143  \n  144: function createWritableStdioStream (fd) {\n  145:   var stream;\n  146    var tty_wrap = process.binding('tty_wrap');\n  147  \n  148:   // Note stream._type is used for test-module-load-list.js\n  149  \n  150    switch (tty_wrap.guessHandleType(fd)) {\n  151      case 'TTY':\n  152:       stream = new tty.WriteStream(fd);\n  153:       stream._type = 'tty';\n  154  \n  155:       // Hack to have stream not keep the event loop alive.\n  156        // See https://github.com/joyent/node/issues/1726\n  157:       if (stream._handle && stream._handle.unref) {\n  158:         stream._handle.unref();\n  159        }\n  160        break;\n  ...\n  162      case 'FILE':\n  163        var fs = require('fs');\n  164:       stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  165:       stream._type = 'fs';\n  166        break;\n  167  \n  ...\n  169      case 'TCP':\n  170        var net = require('net');\n  171:       stream = new net.Socket({\n  172          fd: fd,\n  173          readable: false,\n  ...\n  176  \n  177        // FIXME Should probably have an option in net.Socket to create a\n  178:       // stream from an existing fd which is writable only. But for now\n  179        // we'll just add this hack and set the `readable` member to false.\n  180        // Test: ./node test/fixtures/echo.js < /etc/passwd\n  181:       stream.readable = false;\n  182:       stream.read = null;\n  183:       stream._type = 'pipe';\n  184  \n  185:       // FIXME Hack to have stream not keep the event loop alive.\n  186        // See https://github.com/joyent/node/issues/1726\n  187:       if (stream._handle && stream._handle.unref) {\n  188:         stream._handle.unref();\n  189        }\n  190        break;\n  ...\n  192      default:\n  193        // Probably an error on in uv_guess_handle()\n  194:       throw new Error('Implement me. Unknown stream file type!');\n  195    }\n  196  \n  197    // For supporting legacy API we put the FD here.\n  198:   stream.fd = fd;\n  199  \n  200:   stream._isStdio = true;\n  201  \n  202:   return stream;\n  203  }\n  204  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\destroy\\index.js:\n    1: var ReadStream = require('fs').ReadStream\n    2: var Stream = require('stream')\n    3  \n    4: module.exports = function destroy(stream) {\n    5:   if (stream instanceof ReadStream) {\n    6:     return destroyReadStream(stream)\n    7    }\n    8  \n    9:   if (!(stream instanceof Stream)) {\n   10:     return stream\n   11    }\n   12  \n   13:   if (typeof stream.destroy === 'function') {\n   14:     stream.destroy()\n   15    }\n   16  \n   17:   return stream\n   18  }\n   19  \n   20: function destroyReadStream(stream) {\n   21:   stream.destroy()\n   22  \n   23:   if (typeof stream.close === 'function') {\n   24      // node.js core bug work-around\n   25:     stream.on('open', onopenClose)\n   26    }\n   27  \n   28:   return stream\n   29  }\n   30  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\destroy\\package.json:\n    1  {\n    2    \"name\": \"destroy\",\n    3:   \"description\": \"destroy a stream if possible\",\n    4    \"version\": \"1.0.3\",\n    5    \"author\": {\n    .\n   17    \"repository\": {\n   18      \"type\": \"git\",\n   19:     \"url\": \"https://github.com/stream-utils/destroy\"\n   20    },\n   21    \"devDependencies\": {\n   ..\n   32    ],\n   33    \"keywords\": [\n   34:     \"stream\",\n   35:     \"streams\",\n   36      \"destroy\",\n   37      \"cleanup\",\n   ..\n   41    \"gitHead\": \"50af95ece4a70202f9301bc3edc8f9fdbbad0f26\",\n   42    \"bugs\": {\n   43:     \"url\": \"https://github.com/stream-utils/destroy/issues\"\n   44    },\n   45:   \"homepage\": \"https://github.com/stream-utils/destroy\",\n   46    \"_id\": \"destroy@1.0.3\",\n   47    \"_shasum\": \"b433b4724e71fd8551d9885174851c5fc377e2c9\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\destroy\\README.md:\n    9  [![Gittip][gittip-image]][gittip-url]\n   10  \n   11: Destroy a stream.\n   12  \n   13  ## API\n   ..\n   17  \n   18  var fs = require('fs')\n   19: var stream = fs.createReadStream('package.json')\n   20: destroy(stream)\n   21  ```\n   22  \n   23  [npm-image]: https://img.shields.io/npm/v/destroy.svg?style=flat-square\n   24  [npm-url]: https://npmjs.org/package/destroy\n   25: [github-tag]: http://img.shields.io/github/tag/stream-utils/destroy.svg?style=flat-square\n   26: [github-url]: https://github.com/stream-utils/destroy/tags\n   27: [travis-image]: https://img.shields.io/travis/stream-utils/destroy.svg?style=flat-square\n   28: [travis-url]: https://travis-ci.org/stream-utils/destroy\n   29: [coveralls-image]: https://img.shields.io/coveralls/stream-utils/destroy.svg?style=flat-square\n   30: [coveralls-url]: https://coveralls.io/r/stream-utils/destroy?branch=master\n   31: [david-image]: http://img.shields.io/david/stream-utils/destroy.svg?style=flat-square\n   32: [david-url]: https://david-dm.org/stream-utils/destroy\n   33  [license-image]: http://img.shields.io/npm/l/destroy.svg?style=flat-square\n   34  [license-url]: LICENSE.md\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\mime\\package.json:\n   26    },\n   27    \"version\": \"1.2.11\",\n   28:   \"readme\": \"# mime\\n\\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\\n\\n## Install\\n\\nInstall with [npm](http://github.com/isaacs/npm):\\n\\n    npm install mime\\n\\n## API - Queries\\n\\n### mime.lookup(path)\\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\\n\\n    var mime = require('mime');\\n\\n    mime.lookup('/path/to/file.txt');         // => 'text/plain'\\n    mime.lookup('file.txt');                  // => 'text/plain'\\n    mime.lookup('.TXT');                      // => 'text/plain'\\n    mime.lookup('htm');                       // => 'text/html'\\n\\n### mime.default_type\\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\\n\\n### mime.extension(type)\\nGet the default extension for `type`\\n\\n    mime.extension('text/html');                 // => 'html'\\n    mime.extension('application/octet-stream');  // => 'bin'\\n\\n### mime.charsets.lookup()\\n\\nMap mime-type to charset\\n\\n    mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n\\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\\n\\n## API - Defining Custom Types\\n\\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\\n\\n### mime.define()\\n\\nAdd custom mime/extension mappings\\n\\n    mime.define({\\n        'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n        'application/x-my-type': ['x-mt', 'x-mtt'],\\n        // etc ...\\n    });\\n\\n    mime.lookup('x-sft');                 // => 'text/x-some-format'\\n\\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\\n\\n    mime.extension('text/x-some-format'); // => 'x-sf'\\n\\n### mime.load(filepath)\\n\\nLoad mappings from an Apache \\\".types\\\" format file\\n\\n    mime.load('./my_project.types');\\n\\nThe .types file format is simple -  See the `types` dir for examples.\\n\",\n   29    \"readmeFilename\": \"README.md\",\n   30    \"bugs\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\mime\\README.md:\n   12  \n   13  ### mime.lookup(path)\n   14: Get the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n   15  \n   16      var mime = require('mime');\n   ..\n   22  \n   23  ### mime.default_type\n   24: Sets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n   25  \n   26  ### mime.extension(type)\n   ..\n   28  \n   29      mime.extension('text/html');                 // => 'html'\n   30:     mime.extension('application/octet-stream');  // => 'bin'\n   31  \n   32  ### mime.charsets.lookup()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\mime\\test.js:\n   27  eq('text/plain', mime.lookup('/txt'));         // extension-less ()\n   28  eq('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\n   29: eq('application/octet-stream', mime.lookup('text.nope')); // unrecognized\n   30  eq('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n   31  \n   ..\n   36  eq('txt', mime.extension(mime.types.text));\n   37  eq('html', mime.extension(mime.types.htm));\n   38: eq('bin', mime.extension('application/octet-stream'));\n   39: eq('bin', mime.extension('application/octet-stream '));\n   40  eq('html', mime.extension(' text/html; charset=UTF-8'));\n   41  eq('html', mime.extension('text/html; charset=UTF-8 '));\n   ..\n   51  \n   52  eq('application/font-woff', mime.lookup('file.woff'));\n   53: eq('application/octet-stream', mime.lookup('file.buffer'));\n   54  eq('audio/mp4', mime.lookup('file.m4a'));\n   55  eq('font/opentype', mime.lookup('file.otf'));\n   ..\n   61  eq('UTF-8', mime.charsets.lookup('text/plain'));\n   62  eq(undefined, mime.charsets.lookup(mime.types.js));\n   63: eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n   64  \n   65  //\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\mime\\types\\mime.types:\n  152  # application/ocsp-request\n  153  # application/ocsp-response\n  154: application/octet-stream	bin dms lrf mar so dist distz pkg bpk dump elc deploy\n  155  application/oda					oda\n  156  application/oebps-package+xml			opf\n  ...\n  653  # application/vnd.ntt-local.file-transfer\n  654  # application/vnd.ntt-local.sip-ta_remote\n  655: # application/vnd.ntt-local.sip-ta_tcp_stream\n  656  application/vnd.oasis.opendocument.chart		odc\n  657  application/vnd.oasis.opendocument.chart-template	otc\n  ...\n  674  # application/vnd.oftn.l10n+json\n  675  # application/vnd.oipf.contentaccessdownload+xml\n  676: # application/vnd.oipf.contentaccessstreaming+xml\n  677  # application/vnd.oipf.cspg-hexbinary\n  678  # application/vnd.oipf.dae.svg+xml\n  ...\n  836  # application/vnd.radisys.msml-audit-conn+xml\n  837  # application/vnd.radisys.msml-audit-dialog+xml\n  838: # application/vnd.radisys.msml-audit-stream+xml\n  839  # application/vnd.radisys.msml-conf+xml\n  840  # application/vnd.radisys.msml-dialog+xml\n  ...\n  902  application/vnd.stepmania.package		smzip\n  903  application/vnd.stepmania.stepchart		sm\n  904: # application/vnd.street-stream\n  905  application/vnd.sun.xml.calc			sxc\n  906  application/vnd.sun.xml.calc.template		stc\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\mime\\types\\node.types:\n   25  # Why: semi-standard extension w/in the node community\n   26  # Added by: tootallnate\n   27: application/octet-stream  buffer\n   28  \n   29  # What: The \"protected\" MP-4 formats used by iTunes.\n   30: # Why: Required for streaming music to browsers (?)\n   31  # Added by: broofa\n   32  application/mp4  m4p\n   ..\n   39  \n   40  # What: EventSource mime type\n   41: # Why: mime type of Server-Sent Events stream\n   42: # http://www.w3.org/TR/eventsource/#text-event-stream\n   43  # Added by: francois2metz\n   44: text/event-stream  event-stream\n   45  \n   46  # What: Mozilla App manifest mime type\n   ..\n   65  text/plain  ini\n   66  \n   67: # What: DASH Adaptive Streaming manifest\n   68: # Why: https://developer.mozilla.org/en-US/docs/DASH_Adaptive_Streaming_for_HTML_5_Video\n   69  # Added by: eelcocramer\n   70  application/dash+xml mdp\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\serve-static\\node_modules\\send\\node_modules\\on-finished\\README.md:\n   79  \n   80  http.createServer(function onRequest(req, res) {\n   81:   var stream = fs.createReadStream('package.json')\n   82:   stream.pipe(res)\n   83    onFinished(res, function (err) {\n   84:     destroy(stream)\n   85    })\n   86  })\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\README.md:\n  229      - **Parameters** (same as `upgrade` event)\n  230        - `http.ServerRequest`: a node request object\n  231:       - `net.Stream`: TCP socket for the request\n  232        - `Buffer`: legacy tail bytes\n  233      - **Returns** `Server` for chaining\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\lib\\transport.js:\n   82  \n   83  /**\n   84:  * Called with parsed out a packets from the data stream.\n   85   *\n   86   * @param {Object} packet\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\lib\\transports\\polling-xhr.js:\n   60    var contentType = isString\n   61      ? 'text/plain; charset=UTF-8'\n   62:     : 'application/octet-stream';\n   63    var contentLength = '' + (isString ? Buffer.byteLength(data) : data.length);\n   64  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\lib\\transports\\polling.js:\n  118    }\n  119  \n  120:   var isBinary = 'application/octet-stream' == req.headers['content-type'];\n  121  \n  122    this.dataReq = req;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\node_modules\\ws\\History.md:\n  111  v0.4.15 - May 20th 2012\n  112  =====================\n  113: * Enable fauxe streaming for hixie tansport. [einaros]\n  114  * Allow hixie sender to deal with buffers. [einaros/pigne]\n  115  * Allow error code 1011. [einaros]\n  ...\n  174  * Added browser based file upload example. [einaros]\n  175  * Added server-to-browser status push example. [einaros]\n  176: * Exposed pause() and resume() on WebSocket object, to enable client stream shaping. [einaros]\n  177  \n  178  v0.4.5 - Feb 7th 2012\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\node_modules\\ws\\doc\\ws.md:\n   44  `function (headers) { }`\n   45  \n   46: Emitted with the object of HTTP headers that are going to be written to the `Stream` as part of the handshake.\n   47  \n   48  ### Event: 'connection'\n   ..\n  104  ### websocket.pause()\n  105  \n  106: Pause the client stream\n  107  \n  108  ### websocket.ping([data], [options], [dontFailWhenClosed])\n  ...\n  117  ### websocket.resume()\n  118  \n  119: Resume the client stream\n  120  \n  121  ### websocket.send(data, [options], [callback])\n  ...\n  123  Sends `data` through the connection. `options` can be an object with members `mask` and `binary`. The optional `callback` is executed after the send completes.\n  124  \n  125: ### websocket.stream([options], callback)\n  126  \n  127: Streams data through calls to a user supplied function. `options` can be an object with members `mask` and `binary`.  `callback` is executed on successive ticks of which send is `function (data, final)`.\n  128  \n  129  ### websocket.terminate()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\node_modules\\ws\\lib\\WebSocket.js:\n  110  \n  111  /**\n  112:  * Pause the client stream\n  113   *\n  114   * @api public\n  ...\n  159  \n  160  /**\n  161:  * Resume the client stream\n  162   *\n  163   * @api public\n  ...\n  208    }\n  209    if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  210:   if (data instanceof fs.ReadStream) {\n  211      startQueue(this);\n  212      var self = this;\n  213:     sendStream(this, data, options, function(error) {\n  214        process.nextTick(function() { executeQueueSends(self); });\n  215        if (typeof cb == 'function') cb(error);\n  ...\n  220  \n  221  /**\n  222:  * Streams data through calls to a user supplied function\n  223   *\n  224   * @param {Object} Members - mask: boolean, binary: boolean\n  ...\n  227   */\n  228  \n  229: WebSocket.prototype.stream = function(options, cb) {\n  230    if (typeof options == 'function') {\n  231      cb = options;\n  ...\n  240    }\n  241    if (this._queue) {\n  242:     this._queue.push(function() { self.stream(options, cb); });\n  243      return;\n  244    }\n  ...\n  745  }\n  746  \n  747: function sendStream(instance, stream, options, cb) {\n  748:   stream.on('data', function(data) {\n  749      if (instance.readyState != WebSocket.OPEN) {\n  750        if (typeof cb == 'function') cb(new Error('not opened'));\n  ...\n  758      instance._sender.send(data, options);\n  759    });\n  760:   stream.on('end', function() {\n  761      if (instance.readyState != WebSocket.OPEN) {\n  762        if (typeof cb == 'function') cb(new Error('not opened'));\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\node_modules\\ws\\test\\Sender.hixie.test.js:\n   78      });\n   79  */\n   80:     it('can fauxe stream data', function(done) {\n   81        var received = [];\n   82        var socket = {\n   ..\n  114      });\n  115  \n  116:     it('sends a message end marker if fauxe streaming has started, before hixie close frame', function(done) {\n  117        var received = [];\n  118        var socket = {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\engine.io\\node_modules\\ws\\test\\WebSocket.test.js:\n  378  \n  379    describe('#pause and #resume', function() {\n  380:     it('pauses the underlying stream', function(done) {\n  381        // this test is sort-of racecondition'y, since an unlikely slow connection\n  382:       // to localhost can cause the test to succeed even when the stream pausing\n  383        // isn't working as intended. that is an extremely unlikely scenario, though\n  384        // and an acceptable risk for the test.\n  ...\n  789      });\n  790  \n  791:     it('with binary stream will send fragmented data', function(done) {\n  792        server.createServer(++port, function(srv) {\n  793          var ws = new WebSocket('ws://localhost:' + port);\n  794          var callbackFired = false;\n  795          ws.on('open', function() {\n  796:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  797:           fileStream.bufferSize = 100;\n  798:           ws.send(fileStream, {binary: true}, function(error) {\n  799              assert.equal(null, error);\n  800              callbackFired = true;\n  ...\n  814      });\n  815  \n  816:     it('with text stream will send fragmented data', function(done) {\n  817        server.createServer(++port, function(srv) {\n  818          var ws = new WebSocket('ws://localhost:' + port);\n  819          var callbackFired = false;\n  820          ws.on('open', function() {\n  821:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  822:           fileStream.setEncoding('utf8');\n  823:           fileStream.bufferSize = 100;\n  824:           ws.send(fileStream, {binary: false}, function(error) {\n  825              assert.equal(null, error);\n  826              callbackFired = true;\n  ...\n  844          var ws = new WebSocket('ws://localhost:' + port);\n  845          ws.on('open', function() {\n  846:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  847:           fileStream.setEncoding('utf8');\n  848:           fileStream.bufferSize = 100;\n  849:           ws.send(fileStream);\n  850            ws.send('foobar');\n  851            ws.send('baz');\n  ...\n  873      });\n  874  \n  875:     it('will cause intermittent stream to be delayed in order', function(done) {\n  876        server.createServer(++port, function(srv) {\n  877          var ws = new WebSocket('ws://localhost:' + port);\n  878          ws.on('open', function() {\n  879:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  880:           fileStream.setEncoding('utf8');\n  881:           fileStream.bufferSize = 100;\n  882:           ws.send(fileStream);\n  883            var i = 0;\n  884:           ws.stream(function(error, send) {\n  885              assert.ok(!error);\n  886              if (++i == 1) send('foo');\n  ...\n  910          var ws = new WebSocket('ws://localhost:' + port);\n  911          ws.on('open', function() {\n  912:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  913:           fileStream.setEncoding('utf8');\n  914:           fileStream.bufferSize = 100;\n  915:           ws.send(fileStream);\n  916            ws.ping('foobar');\n  917          });\n  ...\n  941          var ws = new WebSocket('ws://localhost:' + port);\n  942          ws.on('open', function() {\n  943:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  944:           fileStream.setEncoding('utf8');\n  945:           fileStream.bufferSize = 100;\n  946:           ws.send(fileStream);\n  947            ws.pong('foobar');\n  948          });\n  ...\n  972          var ws = new WebSocket('ws://localhost:' + port);\n  973          ws.on('open', function() {\n  974:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  975:           fileStream.setEncoding('utf8');\n  976:           fileStream.bufferSize = 100;\n  977:           ws.send(fileStream);\n  978            ws.close(1000, 'foobar');\n  979          });\n  ...\n  996    });\n  997  \n  998:   describe('#stream', function() {\n  999:     it('very long binary data can be streamed', function(done) {\n 1000        server.createServer(++port, function(srv) {\n 1001          var ws = new WebSocket('ws://localhost:' + port);\n ....\n 1006            var blockSize = 800;\n 1007            var bufLen = buffer.length;\n 1008:           ws.stream({binary: true}, function(error, send) {\n 1009              assert.ok(!error);\n 1010              var start = i * blockSize;\n ....\n 1030          var ws = new WebSocket('ws://localhost:' + port);\n 1031          ws.on('error', function() {});\n 1032:         ws.stream(function(error) {\n 1033            assert.ok(error instanceof Error);\n 1034            ws.terminate();\n ....\n 1045          ws.on('open', function() {\n 1046            try {\n 1047:             ws.stream();\n 1048            }\n 1049            catch (e) {\n ....\n 1062          ws.on('open', function() {\n 1063            var i = 0;\n 1064:           ws.stream(function(error, send) {\n 1065              assert.ok(!error);\n 1066              if (++i == 1) {\n ....\n 1096      });\n 1097  \n 1098:     it('will cause intermittent stream to be delayed in order', function(done) {\n 1099        server.createServer(++port, function(srv) {\n 1100          var ws = new WebSocket('ws://localhost:' + port);\n ....\n 1102          ws.on('open', function() {\n 1103            var i = 0;\n 1104:           ws.stream(function(error, send) {\n 1105              assert.ok(!error);\n 1106              if (++i == 1) {\n 1107                send(payload.substr(0, 5));\n 1108                var i2 = 0;\n 1109:               ws.stream(function(error, send) {\n 1110                  assert.ok(!error);\n 1111                  if (++i2 == 1) send('foo');\n ....\n 1148          ws.on('open', function() {\n 1149            var i = 0;\n 1150:           ws.stream(function(error, send) {\n 1151              assert.ok(!error);\n 1152              if (++i == 1) {\n ....\n 1186          ws.on('open', function() {\n 1187            var i = 0;\n 1188:           ws.stream(function(error, send) {\n 1189              assert.ok(!error);\n 1190              if (++i == 1) {\n ....\n 1225          ws.on('open', function() {\n 1226            var i = 0;\n 1227:           ws.stream(function(error, send) {\n 1228              if (++i == 1) {\n 1229                send(payload.substr(0, 5));\n ....\n 1258  \n 1259    describe('#close', function() {\n 1260:     it('will raise error callback, if any, if called during send stream', function(done) {\n 1261        server.createServer(++port, function(srv) {\n 1262          var ws = new WebSocket('ws://localhost:' + port);\n 1263          var errorGiven = false;\n 1264          ws.on('open', function() {\n 1265:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n 1266:           fileStream.setEncoding('utf8');\n 1267:           fileStream.bufferSize = 100;\n 1268:           ws.send(fileStream, function(error) {\n 1269              errorGiven = error != null;\n 1270            });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\socket.io.js:\n 2702        try {\n 2703          if (this.isBinary) {\n 2704:           xhr.setRequestHeader('Content-type', 'application/octet-stream');\n 2705          } else {\n 2706            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n ....\n 2828        contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n 2829      } catch (e) {}\n 2830:     if (contentType === 'application/octet-stream') {\n 2831        data = this.xhr.response;\n 2832      } else {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\engine.io.js:\n 1315        try {\n 1316          if (this.isBinary) {\n 1317:           xhr.setRequestHeader('Content-type', 'application/octet-stream');\n 1318          } else {\n 1319            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n ....\n 1441        contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n 1442      } catch (e) {}\n 1443:     if (contentType === 'application/octet-stream') {\n 1444        data = this.xhr.response;\n 1445      } else {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\lib\\transports\\polling-xhr.js:\n  164        try {\n  165          if (this.isBinary) {\n  166:           xhr.setRequestHeader('Content-type', 'application/octet-stream');\n  167          } else {\n  168            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n  ...\n  290        contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n  291      } catch (e) {}\n  292:     if (contentType === 'application/octet-stream') {\n  293        data = this.xhr.response;\n  294      } else {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\has-cors\\node_modules\\global\\test\\mocha.js:\n 1215  \n 1216  /**\n 1217:  * Check if both stdio streams are associated with a tty.\n 1218   */\n 1219  \n ....\n 1984  exports.JSONCov = require('./json-cov');\n 1985  exports.HTMLCov = require('./html-cov');\n 1986: exports.JSONStream = require('./json-stream');\n 1987  exports.Teamcity = require('./teamcity');\n 1988  \n ....\n 2142  }); // module: reporters/json-cov.js\n 2143  \n 2144: require.register(\"reporters/json-stream.js\", function(module, exports, require){\n 2145  \n 2146  /**\n ....\n 2204    }\n 2205  }\n 2206: }); // module: reporters/json-stream.js\n 2207  \n 2208  require.register(\"reporters/json.js\", function(module, exports, require){\n ....\n 2327      , width = Base.window.width * .75 | 0\n 2328      , total = runner.total\n 2329:     , stream = process.stdout\n 2330      , plane = color('plane', '✈')\n 2331      , crashed = -1\n ....\n 2338  \n 2339    runner.on('start', function(){\n 2340:     stream.write('\\n  ');\n 2341      cursor.hide();\n 2342    });\n ....\n 2355  \n 2356      // render landing strip\n 2357:     stream.write('\\u001b[4F\\n\\n');\n 2358:     stream.write(runway());\n 2359:     stream.write('\\n  ');\n 2360:     stream.write(color('runway', Array(col).join('⋅')));\n 2361:     stream.write(plane)\n 2362:     stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n 2363:     stream.write(runway());\n 2364:     stream.write('\\u001b[0m');\n 2365    });\n 2366  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\History.md:\n  111  v0.4.15 - May 20th 2012\n  112  =====================\n  113: * Enable fauxe streaming for hixie tansport. [einaros]\n  114  * Allow hixie sender to deal with buffers. [einaros/pigne]\n  115  * Allow error code 1011. [einaros]\n  ...\n  174  * Added browser based file upload example. [einaros]\n  175  * Added server-to-browser status push example. [einaros]\n  176: * Exposed pause() and resume() on WebSocket object, to enable client stream shaping. [einaros]\n  177  \n  178  v0.4.5 - Feb 7th 2012\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\doc\\ws.md:\n   44  `function (headers) { }`\n   45  \n   46: Emitted with the object of HTTP headers that are going to be written to the `Stream` as part of the handshake.\n   47  \n   48  ### Event: 'connection'\n   ..\n  104  ### websocket.pause()\n  105  \n  106: Pause the client stream\n  107  \n  108  ### websocket.ping([data], [options], [dontFailWhenClosed])\n  ...\n  117  ### websocket.resume()\n  118  \n  119: Resume the client stream\n  120  \n  121  ### websocket.send(data, [options], [callback])\n  ...\n  123  Sends `data` through the connection. `options` can be an object with members `mask` and `binary`. The optional `callback` is executed after the send completes.\n  124  \n  125: ### websocket.stream([options], callback)\n  126  \n  127: Streams data through calls to a user supplied function. `options` can be an object with members `mask` and `binary`.  `callback` is executed on successive ticks of which send is `function (data, final)`.\n  128  \n  129  ### websocket.terminate()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\lib\\WebSocket.js:\n  110  \n  111  /**\n  112:  * Pause the client stream\n  113   *\n  114   * @api public\n  ...\n  159  \n  160  /**\n  161:  * Resume the client stream\n  162   *\n  163   * @api public\n  ...\n  208    }\n  209    if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  210:   if (data instanceof fs.ReadStream) {\n  211      startQueue(this);\n  212      var self = this;\n  213:     sendStream(this, data, options, function(error) {\n  214        process.nextTick(function() { executeQueueSends(self); });\n  215        if (typeof cb == 'function') cb(error);\n  ...\n  220  \n  221  /**\n  222:  * Streams data through calls to a user supplied function\n  223   *\n  224   * @param {Object} Members - mask: boolean, binary: boolean\n  ...\n  227   */\n  228  \n  229: WebSocket.prototype.stream = function(options, cb) {\n  230    if (typeof options == 'function') {\n  231      cb = options;\n  ...\n  240    }\n  241    if (this._queue) {\n  242:     this._queue.push(function() { self.stream(options, cb); });\n  243      return;\n  244    }\n  ...\n  745  }\n  746  \n  747: function sendStream(instance, stream, options, cb) {\n  748:   stream.on('data', function(data) {\n  749      if (instance.readyState != WebSocket.OPEN) {\n  750        if (typeof cb == 'function') cb(new Error('not opened'));\n  ...\n  758      instance._sender.send(data, options);\n  759    });\n  760:   stream.on('end', function() {\n  761      if (instance.readyState != WebSocket.OPEN) {\n  762        if (typeof cb == 'function') cb(new Error('not opened'));\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\test\\Sender.hixie.test.js:\n   78      });\n   79  */\n   80:     it('can fauxe stream data', function(done) {\n   81        var received = [];\n   82        var socket = {\n   ..\n  114      });\n  115  \n  116:     it('sends a message end marker if fauxe streaming has started, before hixie close frame', function(done) {\n  117        var received = [];\n  118        var socket = {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\test\\WebSocket.test.js:\n  378  \n  379    describe('#pause and #resume', function() {\n  380:     it('pauses the underlying stream', function(done) {\n  381        // this test is sort-of racecondition'y, since an unlikely slow connection\n  382:       // to localhost can cause the test to succeed even when the stream pausing\n  383        // isn't working as intended. that is an extremely unlikely scenario, though\n  384        // and an acceptable risk for the test.\n  ...\n  789      });\n  790  \n  791:     it('with binary stream will send fragmented data', function(done) {\n  792        server.createServer(++port, function(srv) {\n  793          var ws = new WebSocket('ws://localhost:' + port);\n  794          var callbackFired = false;\n  795          ws.on('open', function() {\n  796:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  797:           fileStream.bufferSize = 100;\n  798:           ws.send(fileStream, {binary: true}, function(error) {\n  799              assert.equal(null, error);\n  800              callbackFired = true;\n  ...\n  814      });\n  815  \n  816:     it('with text stream will send fragmented data', function(done) {\n  817        server.createServer(++port, function(srv) {\n  818          var ws = new WebSocket('ws://localhost:' + port);\n  819          var callbackFired = false;\n  820          ws.on('open', function() {\n  821:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  822:           fileStream.setEncoding('utf8');\n  823:           fileStream.bufferSize = 100;\n  824:           ws.send(fileStream, {binary: false}, function(error) {\n  825              assert.equal(null, error);\n  826              callbackFired = true;\n  ...\n  844          var ws = new WebSocket('ws://localhost:' + port);\n  845          ws.on('open', function() {\n  846:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  847:           fileStream.setEncoding('utf8');\n  848:           fileStream.bufferSize = 100;\n  849:           ws.send(fileStream);\n  850            ws.send('foobar');\n  851            ws.send('baz');\n  ...\n  873      });\n  874  \n  875:     it('will cause intermittent stream to be delayed in order', function(done) {\n  876        server.createServer(++port, function(srv) {\n  877          var ws = new WebSocket('ws://localhost:' + port);\n  878          ws.on('open', function() {\n  879:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  880:           fileStream.setEncoding('utf8');\n  881:           fileStream.bufferSize = 100;\n  882:           ws.send(fileStream);\n  883            var i = 0;\n  884:           ws.stream(function(error, send) {\n  885              assert.ok(!error);\n  886              if (++i == 1) send('foo');\n  ...\n  910          var ws = new WebSocket('ws://localhost:' + port);\n  911          ws.on('open', function() {\n  912:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  913:           fileStream.setEncoding('utf8');\n  914:           fileStream.bufferSize = 100;\n  915:           ws.send(fileStream);\n  916            ws.ping('foobar');\n  917          });\n  ...\n  941          var ws = new WebSocket('ws://localhost:' + port);\n  942          ws.on('open', function() {\n  943:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  944:           fileStream.setEncoding('utf8');\n  945:           fileStream.bufferSize = 100;\n  946:           ws.send(fileStream);\n  947            ws.pong('foobar');\n  948          });\n  ...\n  972          var ws = new WebSocket('ws://localhost:' + port);\n  973          ws.on('open', function() {\n  974:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  975:           fileStream.setEncoding('utf8');\n  976:           fileStream.bufferSize = 100;\n  977:           ws.send(fileStream);\n  978            ws.close(1000, 'foobar');\n  979          });\n  ...\n  996    });\n  997  \n  998:   describe('#stream', function() {\n  999:     it('very long binary data can be streamed', function(done) {\n 1000        server.createServer(++port, function(srv) {\n 1001          var ws = new WebSocket('ws://localhost:' + port);\n ....\n 1006            var blockSize = 800;\n 1007            var bufLen = buffer.length;\n 1008:           ws.stream({binary: true}, function(error, send) {\n 1009              assert.ok(!error);\n 1010              var start = i * blockSize;\n ....\n 1030          var ws = new WebSocket('ws://localhost:' + port);\n 1031          ws.on('error', function() {});\n 1032:         ws.stream(function(error) {\n 1033            assert.ok(error instanceof Error);\n 1034            ws.terminate();\n ....\n 1045          ws.on('open', function() {\n 1046            try {\n 1047:             ws.stream();\n 1048            }\n 1049            catch (e) {\n ....\n 1062          ws.on('open', function() {\n 1063            var i = 0;\n 1064:           ws.stream(function(error, send) {\n 1065              assert.ok(!error);\n 1066              if (++i == 1) {\n ....\n 1096      });\n 1097  \n 1098:     it('will cause intermittent stream to be delayed in order', function(done) {\n 1099        server.createServer(++port, function(srv) {\n 1100          var ws = new WebSocket('ws://localhost:' + port);\n ....\n 1102          ws.on('open', function() {\n 1103            var i = 0;\n 1104:           ws.stream(function(error, send) {\n 1105              assert.ok(!error);\n 1106              if (++i == 1) {\n 1107                send(payload.substr(0, 5));\n 1108                var i2 = 0;\n 1109:               ws.stream(function(error, send) {\n 1110                  assert.ok(!error);\n 1111                  if (++i2 == 1) send('foo');\n ....\n 1148          ws.on('open', function() {\n 1149            var i = 0;\n 1150:           ws.stream(function(error, send) {\n 1151              assert.ok(!error);\n 1152              if (++i == 1) {\n ....\n 1186          ws.on('open', function() {\n 1187            var i = 0;\n 1188:           ws.stream(function(error, send) {\n 1189              assert.ok(!error);\n 1190              if (++i == 1) {\n ....\n 1225          ws.on('open', function() {\n 1226            var i = 0;\n 1227:           ws.stream(function(error, send) {\n 1228              if (++i == 1) {\n 1229                send(payload.substr(0, 5));\n ....\n 1258  \n 1259    describe('#close', function() {\n 1260:     it('will raise error callback, if any, if called during send stream', function(done) {\n 1261        server.createServer(++port, function(srv) {\n 1262          var ws = new WebSocket('ws://localhost:' + port);\n 1263          var errorGiven = false;\n 1264          ws.on('open', function() {\n 1265:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n 1266:           fileStream.setEncoding('utf8');\n 1267:           fileStream.bufferSize = 100;\n 1268:           ws.send(fileStream, function(error) {\n 1269              errorGiven = error != null;\n 1270            });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\socket.io.js:\n 2702        try {\n 2703          if (this.isBinary) {\n 2704:           xhr.setRequestHeader('Content-type', 'application/octet-stream');\n 2705          } else {\n 2706            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n ....\n 2828        contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n 2829      } catch (e) {}\n 2830:     if (contentType === 'application/octet-stream') {\n 2831        data = this.xhr.response;\n 2832      } else {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\engine.io.js:\n 1315        try {\n 1316          if (this.isBinary) {\n 1317:           xhr.setRequestHeader('Content-type', 'application/octet-stream');\n 1318          } else {\n 1319            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n ....\n 1441        contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n 1442      } catch (e) {}\n 1443:     if (contentType === 'application/octet-stream') {\n 1444        data = this.xhr.response;\n 1445      } else {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\lib\\transports\\polling-xhr.js:\n  164        try {\n  165          if (this.isBinary) {\n  166:           xhr.setRequestHeader('Content-type', 'application/octet-stream');\n  167          } else {\n  168            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n  ...\n  290        contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n  291      } catch (e) {}\n  292:     if (contentType === 'application/octet-stream') {\n  293        data = this.xhr.response;\n  294      } else {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\has-cors\\node_modules\\global\\test\\mocha.js:\n 1215  \n 1216  /**\n 1217:  * Check if both stdio streams are associated with a tty.\n 1218   */\n 1219  \n ....\n 1984  exports.JSONCov = require('./json-cov');\n 1985  exports.HTMLCov = require('./html-cov');\n 1986: exports.JSONStream = require('./json-stream');\n 1987  exports.Teamcity = require('./teamcity');\n 1988  \n ....\n 2142  }); // module: reporters/json-cov.js\n 2143  \n 2144: require.register(\"reporters/json-stream.js\", function(module, exports, require){\n 2145  \n 2146  /**\n ....\n 2204    }\n 2205  }\n 2206: }); // module: reporters/json-stream.js\n 2207  \n 2208  require.register(\"reporters/json.js\", function(module, exports, require){\n ....\n 2327      , width = Base.window.width * .75 | 0\n 2328      , total = runner.total\n 2329:     , stream = process.stdout\n 2330      , plane = color('plane', '✈')\n 2331      , crashed = -1\n ....\n 2338  \n 2339    runner.on('start', function(){\n 2340:     stream.write('\\n  ');\n 2341      cursor.hide();\n 2342    });\n ....\n 2355  \n 2356      // render landing strip\n 2357:     stream.write('\\u001b[4F\\n\\n');\n 2358:     stream.write(runway());\n 2359:     stream.write('\\n  ');\n 2360:     stream.write(color('runway', Array(col).join('⋅')));\n 2361:     stream.write(plane)\n 2362:     stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n 2363:     stream.write(runway());\n 2364:     stream.write('\\u001b[0m');\n 2365    });\n 2366  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\History.md:\n  111  v0.4.15 - May 20th 2012\n  112  =====================\n  113: * Enable fauxe streaming for hixie tansport. [einaros]\n  114  * Allow hixie sender to deal with buffers. [einaros/pigne]\n  115  * Allow error code 1011. [einaros]\n  ...\n  174  * Added browser based file upload example. [einaros]\n  175  * Added server-to-browser status push example. [einaros]\n  176: * Exposed pause() and resume() on WebSocket object, to enable client stream shaping. [einaros]\n  177  \n  178  v0.4.5 - Feb 7th 2012\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\doc\\ws.md:\n   44  `function (headers) { }`\n   45  \n   46: Emitted with the object of HTTP headers that are going to be written to the `Stream` as part of the handshake.\n   47  \n   48  ### Event: 'connection'\n   ..\n  104  ### websocket.pause()\n  105  \n  106: Pause the client stream\n  107  \n  108  ### websocket.ping([data], [options], [dontFailWhenClosed])\n  ...\n  117  ### websocket.resume()\n  118  \n  119: Resume the client stream\n  120  \n  121  ### websocket.send(data, [options], [callback])\n  ...\n  123  Sends `data` through the connection. `options` can be an object with members `mask` and `binary`. The optional `callback` is executed after the send completes.\n  124  \n  125: ### websocket.stream([options], callback)\n  126  \n  127: Streams data through calls to a user supplied function. `options` can be an object with members `mask` and `binary`.  `callback` is executed on successive ticks of which send is `function (data, final)`.\n  128  \n  129  ### websocket.terminate()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\lib\\WebSocket.js:\n  110  \n  111  /**\n  112:  * Pause the client stream\n  113   *\n  114   * @api public\n  ...\n  159  \n  160  /**\n  161:  * Resume the client stream\n  162   *\n  163   * @api public\n  ...\n  208    }\n  209    if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  210:   if (data instanceof fs.ReadStream) {\n  211      startQueue(this);\n  212      var self = this;\n  213:     sendStream(this, data, options, function(error) {\n  214        process.nextTick(function() { executeQueueSends(self); });\n  215        if (typeof cb == 'function') cb(error);\n  ...\n  220  \n  221  /**\n  222:  * Streams data through calls to a user supplied function\n  223   *\n  224   * @param {Object} Members - mask: boolean, binary: boolean\n  ...\n  227   */\n  228  \n  229: WebSocket.prototype.stream = function(options, cb) {\n  230    if (typeof options == 'function') {\n  231      cb = options;\n  ...\n  240    }\n  241    if (this._queue) {\n  242:     this._queue.push(function() { self.stream(options, cb); });\n  243      return;\n  244    }\n  ...\n  745  }\n  746  \n  747: function sendStream(instance, stream, options, cb) {\n  748:   stream.on('data', function(data) {\n  749      if (instance.readyState != WebSocket.OPEN) {\n  750        if (typeof cb == 'function') cb(new Error('not opened'));\n  ...\n  758      instance._sender.send(data, options);\n  759    });\n  760:   stream.on('end', function() {\n  761      if (instance.readyState != WebSocket.OPEN) {\n  762        if (typeof cb == 'function') cb(new Error('not opened'));\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\test\\Sender.hixie.test.js:\n   78      });\n   79  */\n   80:     it('can fauxe stream data', function(done) {\n   81        var received = [];\n   82        var socket = {\n   ..\n  114      });\n  115  \n  116:     it('sends a message end marker if fauxe streaming has started, before hixie close frame', function(done) {\n  117        var received = [];\n  118        var socket = {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_modules\\ws\\test\\WebSocket.test.js:\n  378  \n  379    describe('#pause and #resume', function() {\n  380:     it('pauses the underlying stream', function(done) {\n  381        // this test is sort-of racecondition'y, since an unlikely slow connection\n  382:       // to localhost can cause the test to succeed even when the stream pausing\n  383        // isn't working as intended. that is an extremely unlikely scenario, though\n  384        // and an acceptable risk for the test.\n  ...\n  789      });\n  790  \n  791:     it('with binary stream will send fragmented data', function(done) {\n  792        server.createServer(++port, function(srv) {\n  793          var ws = new WebSocket('ws://localhost:' + port);\n  794          var callbackFired = false;\n  795          ws.on('open', function() {\n  796:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  797:           fileStream.bufferSize = 100;\n  798:           ws.send(fileStream, {binary: true}, function(error) {\n  799              assert.equal(null, error);\n  800              callbackFired = true;\n  ...\n  814      });\n  815  \n  816:     it('with text stream will send fragmented data', function(done) {\n  817        server.createServer(++port, function(srv) {\n  818          var ws = new WebSocket('ws://localhost:' + port);\n  819          var callbackFired = false;\n  820          ws.on('open', function() {\n  821:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  822:           fileStream.setEncoding('utf8');\n  823:           fileStream.bufferSize = 100;\n  824:           ws.send(fileStream, {binary: false}, function(error) {\n  825              assert.equal(null, error);\n  826              callbackFired = true;\n  ...\n  844          var ws = new WebSocket('ws://localhost:' + port);\n  845          ws.on('open', function() {\n  846:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  847:           fileStream.setEncoding('utf8');\n  848:           fileStream.bufferSize = 100;\n  849:           ws.send(fileStream);\n  850            ws.send('foobar');\n  851            ws.send('baz');\n  ...\n  873      });\n  874  \n  875:     it('will cause intermittent stream to be delayed in order', function(done) {\n  876        server.createServer(++port, function(srv) {\n  877          var ws = new WebSocket('ws://localhost:' + port);\n  878          ws.on('open', function() {\n  879:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  880:           fileStream.setEncoding('utf8');\n  881:           fileStream.bufferSize = 100;\n  882:           ws.send(fileStream);\n  883            var i = 0;\n  884:           ws.stream(function(error, send) {\n  885              assert.ok(!error);\n  886              if (++i == 1) send('foo');\n  ...\n  910          var ws = new WebSocket('ws://localhost:' + port);\n  911          ws.on('open', function() {\n  912:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  913:           fileStream.setEncoding('utf8');\n  914:           fileStream.bufferSize = 100;\n  915:           ws.send(fileStream);\n  916            ws.ping('foobar');\n  917          });\n  ...\n  941          var ws = new WebSocket('ws://localhost:' + port);\n  942          ws.on('open', function() {\n  943:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  944:           fileStream.setEncoding('utf8');\n  945:           fileStream.bufferSize = 100;\n  946:           ws.send(fileStream);\n  947            ws.pong('foobar');\n  948          });\n  ...\n  972          var ws = new WebSocket('ws://localhost:' + port);\n  973          ws.on('open', function() {\n  974:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n  975:           fileStream.setEncoding('utf8');\n  976:           fileStream.bufferSize = 100;\n  977:           ws.send(fileStream);\n  978            ws.close(1000, 'foobar');\n  979          });\n  ...\n  996    });\n  997  \n  998:   describe('#stream', function() {\n  999:     it('very long binary data can be streamed', function(done) {\n 1000        server.createServer(++port, function(srv) {\n 1001          var ws = new WebSocket('ws://localhost:' + port);\n ....\n 1006            var blockSize = 800;\n 1007            var bufLen = buffer.length;\n 1008:           ws.stream({binary: true}, function(error, send) {\n 1009              assert.ok(!error);\n 1010              var start = i * blockSize;\n ....\n 1030          var ws = new WebSocket('ws://localhost:' + port);\n 1031          ws.on('error', function() {});\n 1032:         ws.stream(function(error) {\n 1033            assert.ok(error instanceof Error);\n 1034            ws.terminate();\n ....\n 1045          ws.on('open', function() {\n 1046            try {\n 1047:             ws.stream();\n 1048            }\n 1049            catch (e) {\n ....\n 1062          ws.on('open', function() {\n 1063            var i = 0;\n 1064:           ws.stream(function(error, send) {\n 1065              assert.ok(!error);\n 1066              if (++i == 1) {\n ....\n 1096      });\n 1097  \n 1098:     it('will cause intermittent stream to be delayed in order', function(done) {\n 1099        server.createServer(++port, function(srv) {\n 1100          var ws = new WebSocket('ws://localhost:' + port);\n ....\n 1102          ws.on('open', function() {\n 1103            var i = 0;\n 1104:           ws.stream(function(error, send) {\n 1105              assert.ok(!error);\n 1106              if (++i == 1) {\n 1107                send(payload.substr(0, 5));\n 1108                var i2 = 0;\n 1109:               ws.stream(function(error, send) {\n 1110                  assert.ok(!error);\n 1111                  if (++i2 == 1) send('foo');\n ....\n 1148          ws.on('open', function() {\n 1149            var i = 0;\n 1150:           ws.stream(function(error, send) {\n 1151              assert.ok(!error);\n 1152              if (++i == 1) {\n ....\n 1186          ws.on('open', function() {\n 1187            var i = 0;\n 1188:           ws.stream(function(error, send) {\n 1189              assert.ok(!error);\n 1190              if (++i == 1) {\n ....\n 1225          ws.on('open', function() {\n 1226            var i = 0;\n 1227:           ws.stream(function(error, send) {\n 1228              if (++i == 1) {\n 1229                send(payload.substr(0, 5));\n ....\n 1258  \n 1259    describe('#close', function() {\n 1260:     it('will raise error callback, if any, if called during send stream', function(done) {\n 1261        server.createServer(++port, function(srv) {\n 1262          var ws = new WebSocket('ws://localhost:' + port);\n 1263          var errorGiven = false;\n 1264          ws.on('open', function() {\n 1265:           var fileStream = fs.createReadStream('test/fixtures/textfile');\n 1266:           fileStream.setEncoding('utf8');\n 1267:           fileStream.bufferSize = 100;\n 1268:           ws.send(fileStream, function(error) {\n 1269              errorGiven = error != null;\n 1270            });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\README.md:\n  240  \n  241  If you want to do some fancy stuff to the file before sending it, you\n  242: can attach a `res.filter = myFilterStream` thing to the response\n  243  object before passing it to the mount function.\n  244  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\st.js:\n  363  \n  364    var mt = mime.lookup(path.extname(p))\n  365:   if (mt !== 'application/octet-stream') {\n  366      res.setHeader('content-type', mt)\n  367    }\n  ...\n  372      this.cachedFile(p, stat, etag, req, res)\n  373    } else {\n  374:     this.streamFile(p, fd, stat, etag, req, res, end)\n  375    }\n  376  }\n  ...\n  396  }\n  397  \n  398: Mount.prototype.streamFile = function (p, fd, stat, etag, req, res, end) {\n  399:   var streamOpt = { fd: fd, start: 0, end: stat.size }\n  400:   var stream = fs.createReadStream(p, streamOpt)\n  401:   stream.destroy = function () {}\n  402  \n  403    // gzip only if not explicitly turned off or client doesn't accept it\n  ...\n  412    // too late to effectively handle any errors.\n  413    // just kill the connection if that happens.\n  414:   stream.on('error', function(e) {\n  415      console.error('Error serving %s fd=%d\\n%s', p, fd, e.stack || e.message)\n  416      res.socket.destroy()\n  ...\n  418    })\n  419  \n  420:   if (res.filter) stream = stream.pipe(res.filter)\n  421  \n  422    res.statusCode = 200\n  ...\n  425      // we don't know how long it'll be, since it will be compressed.\n  426      res.setHeader('content-encoding', 'gzip')\n  427:     stream.pipe(gzstr).pipe(res)\n  428    } else {\n  429      if (!res.filter) res.setHeader('content-length', stat.size)\n  430:     stream.pipe(res)\n  431      if (gzstr)\n  432:       stream.pipe(gzstr) // for cache\n  433    }\n  434  \n  435:   stream.on('end', function () {\n  436      process.nextTick(end)\n  437    })\n  ...\n  442      var calls = 0\n  443  \n  444:     // called by bl() for both the raw stream and gzipped stream if we're\n  445      // caching gzipped data\n  446      var collectEnd = function () {\n  ...\n  456      var gzbufs\n  457  \n  458:     stream.pipe(bufs)\n  459  \n  460      if (gzstr) {\n  ...\n  571  Mount.prototype._loadContent = function () {\n  572    // this function should never be called.\n  573:   // we check if the thing is in the cache, and if not, stream it in\n  574    // manually.  this.cache.content.get() should not ever happen.\n  575    throw new Error('This should not ever happen')\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\bl.js:\n    1: var DuplexStream = require('readable-stream').Duplex\n    2    , util         = require('util')\n    3  \n    .\n   34    }\n   35  \n   36:   DuplexStream.call(this)\n   37  }\n   38  \n   39: util.inherits(BufferList, DuplexStream)\n   40  \n   41  BufferList.prototype._offset = function (offset) {\n   ..\n   70  \n   71  BufferList.prototype.end = function (chunk) {\n   72:   DuplexStream.prototype.end.call(this, chunk)\n   73  \n   74    if (this._callback) {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\package.json:\n    2    \"name\": \"bl\",\n    3    \"version\": \"0.8.2\",\n    4:   \"description\": \"Buffer List: collect buffers and access with a standard readable Buffer interface, streamable too!\",\n    5    \"main\": \"bl.js\",\n    6    \"scripts\": {\n    .\n   20      \"buffer\",\n   21      \"buffers\",\n   22:     \"stream\",\n   23      \"awesomesauce\"\n   24    ],\n   25    \"license\": \"MIT\",\n   26    \"dependencies\": {\n   27:     \"readable-stream\": \"~1.0.26\"\n   28    },\n   29    \"devDependencies\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\README.md:\n    3  [![Build Status](https://secure.travis-ci.org/rvagg/bl.png)](http://travis-ci.org/rvagg/bl)\n    4  \n    5: **A Node.js Buffer list collector, reader and streamer thingy.**\n    6  \n    7  [![NPM](https://nodei.co/npm/bl.png?downloads=true)](https://nodei.co/npm/bl/)\n    8  [![NPM](https://nodei.co/npm-dl/bl.png?months=6)](https://nodei.co/npm/bl/)\n    9  \n   10: **bl** is a storage object for collections of Node Buffers, exposing them with the main Buffer readable API. Also works as a duplex stream so you can collect buffers from a stream that emits them and emit buffers to a stream that consumes them!\n   11  \n   12  The original buffers are kept intact and copies are only done as necessary. Any reads that require the use of a single original buffer will return a slice of that buffer only (which references the same memory as the original buffer). Reads that span buffers perform concatenation as required and return the results transparently.\n   ..\n   40  ```\n   41  \n   42: Give it a callback in the constructor and use it just like **[concat-stream](https://github.com/maxogden/node-concat-stream)**:\n   43  \n   44  ```js\n   ..\n   46      , fs = require('fs')\n   47  \n   48: fs.createReadStream('README.md')\n   49    .pipe(bl(function (err, data) { // note 'new' isn't strictly required\n   50      // `data` is a complete Buffer object containing the full data\n   ..\n   53  ```\n   54  \n   55: Note that when you use the *callback* method like this, the resulting `data` parameter is a concatenation of all `Buffer` objects in the list. If you want to avoid the overhead of this concatenation (in cases of extreme performance consciousness), then avoid the *callback* method and just listen to `'end'` instead, like a standard Stream.\n   56  \n   57  Or to fetch a URL using [hyperquest](https://github.com/substack/hyperquest) (should work with [request](http://github.com/mikeal/request) and even plain Node http too!):\n   ..\n   66  ```\n   67  \n   68: Or, use it as a readable stream to recompose a list of Buffers to an output source:\n   69  \n   70  ```js\n   ..\n   78  bl.append(new Buffer('j'))\n   79  \n   80: bl.pipe(fs.createWriteStream('gibberish.txt'))\n   81  ```\n   82  \n   ..\n   93    * <a href=\"#toString\"><code>bl.<b>toString([encoding, [ start, [ end ]]])</b></code></a>\n   94    * <a href=\"#readXX\"><code>bl.<b>readDoubleBE()</b></code>, <code>bl.<b>readDoubleLE()</b></code>, <code>bl.<b>readFloatBE()</b></code>, <code>bl.<b>readFloatLE()</b></code>, <code>bl.<b>readInt32BE()</b></code>, <code>bl.<b>readInt32LE()</b></code>, <code>bl.<b>readUInt32BE()</b></code>, <code>bl.<b>readUInt32LE()</b></code>, <code>bl.<b>readInt16BE()</b></code>, <code>bl.<b>readInt16LE()</b></code>, <code>bl.<b>readUInt16BE()</b></code>, <code>bl.<b>readUInt16LE()</b></code>, <code>bl.<b>readInt8()</b></code>, <code>bl.<b>readUInt8()</b></code></a>\n   95:   * <a href=\"#streams\">Streams</a>\n   96  \n   97  --------------------------------------------------------\n   98  <a name=\"ctor\"></a>\n   99  ### new BufferList([ callback | buffer | buffer array ])\n  100: The constructor takes an optional callback, if supplied, the callback will be called with an error argument followed by a reference to the **bl** instance, when `bl.end()` is called (i.e. from a piped stream). This is a convenient method of collecting the entire contents of a stream, particularly when the stream is *chunky*, such as a network stream.\n  101  \n  102  Normally, no arguments are required for the constructor, but you can initialise the list by passing in a single `Buffer` object or an array of `Buffer` object.\n  ...\n  177  \n  178  --------------------------------------------------------\n  179: <a name=\"streams\"></a>\n  180: ### Streams\n  181: **bl** is a Node **[Duplex Stream](http://nodejs.org/docs/latest/api/stream.html#stream_class_stream_duplex)**, so it can be read from and written to like a standard Node stream. You can also `pipe()` to and from a **bl** instance.\n  182  \n  183  --------------------------------------------------------\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\duplex.js:\n    1: module.exports = require(\"./lib/_stream_duplex.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\package.json:\n    1  {\n    2:   \"name\": \"readable-stream\",\n    3    \"version\": \"1.0.33\",\n    4:   \"description\": \"Streams2, a user-land copy of the stream library from Node.js v0.10.x\",\n    5    \"main\": \"readable.js\",\n    6    \"dependencies\": {\n    .\n   18    \"repository\": {\n   19      \"type\": \"git\",\n   20:     \"url\": \"git://github.com/isaacs/readable-stream\"\n   21    },\n   22    \"keywords\": [\n   23      \"readable\",\n   24:     \"stream\",\n   25      \"pipe\"\n   26    ],\n   ..\n   36    \"gitHead\": \"0bf97a117c5646556548966409ebc57a6dda2638\",\n   37    \"bugs\": {\n   38:     \"url\": \"https://github.com/isaacs/readable-stream/issues\"\n   39    },\n   40:   \"homepage\": \"https://github.com/isaacs/readable-stream\",\n   41:   \"_id\": \"readable-stream@1.0.33\",\n   42    \"_shasum\": \"3a360dd66c1b1d7fd4705389860eda1d0f61126c\",\n   43:   \"_from\": \"readable-stream@~1.0.26\",\n   44    \"_npmVersion\": \"1.4.28\",\n   45    \"_npmUser\": {\n   ..\n   63    \"dist\": {\n   64      \"shasum\": \"3a360dd66c1b1d7fd4705389860eda1d0f61126c\",\n   65:     \"tarball\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-1.0.33.tgz\"\n   66    },\n   67    \"directories\": {},\n   68:   \"_resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.33.tgz\",\n   69    \"readme\": \"ERROR: No README data found!\"\n   70  }\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\passthrough.js:\n    1: module.exports = require(\"./lib/_stream_passthrough.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\readable.js:\n    1: var Stream = require('stream'); // hack to fix a circular dependency issue when used with browserify\n    2: exports = module.exports = require('./lib/_stream_readable.js');\n    3: exports.Stream = Stream;\n    4  exports.Readable = exports;\n    5: exports.Writable = require('./lib/_stream_writable.js');\n    6: exports.Duplex = require('./lib/_stream_duplex.js');\n    7: exports.Transform = require('./lib/_stream_transform.js');\n    8: exports.PassThrough = require('./lib/_stream_passthrough.js');\n    9  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\README.md:\n    1: # readable-stream\n    2  \n    3: ***Node-core streams for userland***\n    4  \n    5: [![NPM](https://nodei.co/npm/readable-stream.png?downloads=true&downloadRank=true)](https://nodei.co/npm/readable-stream/)\n    6: [![NPM](https://nodei.co/npm-dl/readable-stream.png?&months=6&height=3)](https://nodei.co/npm/readable-stream/)\n    7  \n    8: This package is a mirror of the Streams2 and Streams3 implementations in Node-core.\n    9  \n   10: If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use **readable-stream** *only* and avoid the *\"stream\"* module in Node-core.\n   11  \n   12: **readable-stream** comes in two major versions, v1.0.x and v1.1.x. The former tracks the Streams2 implementation in Node 0.10, including bug-fixes and minor improvements as they are added. The latter tracks Streams3 as it develops in Node 0.11; we will likely see a v1.2.x branch for Node 0.12.\n   13  \n   14: **readable-stream** uses proper patch-level versioning so if you pin to `\"~1.0.0\"` you’ll get the latest Node 0.10 Streams2 implementation, including any fixes and minor non-breaking improvements. The patch-level versions of 1.0.x and 1.1.x should mirror the patch-level versions of Node-core releases. You should prefer the **1.0.x** releases for now and when you’re ready to start using Streams3, pin to `\"~1.1.0\"`\n   15  \n   16  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\transform.js:\n    1: module.exports = require(\"./lib/_stream_transform.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\writable.js:\n    1: module.exports = require(\"./lib/_stream_writable.js\")\n    2  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\lib\\_stream_duplex.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a duplex stream is just a stream that is both readable and writable.\n   23  // Since JS doesn't have multiple prototypal inheritance, this class\n   24  // prototypally inherits from Readable, and then parasitically from\n   ..\n   41  /*</replacement>*/\n   42  \n   43: var Readable = require('./_stream_readable');\n   44: var Writable = require('./_stream_writable');\n   45  \n   46  util.inherits(Duplex, Readable);\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\lib\\_stream_passthrough.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // a passthrough stream.\n   23: // basically just the most minimal sort of Transform stream.\n   24  // Every written chunk gets output as-is.\n   25  \n   26  module.exports = PassThrough;\n   27  \n   28: var Transform = require('./_stream_transform');\n   29  \n   30  /*<replacement>*/\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\lib\\_stream_readable.js:\n   41  /*</replacement>*/\n   42  \n   43: var Stream = require('stream');\n   44  \n   45  /*<replacement>*/\n   ..\n   50  var StringDecoder;\n   51  \n   52: util.inherits(Readable, Stream);\n   53  \n   54: function ReadableState(options, stream) {\n   55    options = options || {};\n   56  \n   ..\n   72    this.reading = false;\n   73  \n   74:   // In streams that never have any data, and do push(null) right away,\n   75    // the consumer can miss the 'end' event if they do some I/O before\n   76:   // consuming the stream.  So, we don't emit('end') until some reading\n   77    // happens.\n   78    this.calledRead = false;\n   ..\n   91  \n   92  \n   93:   // object stream flag. Used to make read(n) ignore n and to\n   94    // make all the buffer merging and length checks go away\n   95    this.objectMode = !!options.objectMode;\n   ..\n  129    this.readable = true;\n  130  \n  131:   Stream.call(this);\n  132  }\n  133  \n  ...\n  156  };\n  157  \n  158: function readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  159    var er = chunkInvalid(state, chunk);\n  160    if (er) {\n  161:     stream.emit('error', er);\n  162    } else if (chunk === null || chunk === undefined) {\n  163      state.reading = false;\n  164      if (!state.ended)\n  165:       onEofChunk(stream, state);\n  166    } else if (state.objectMode || chunk && chunk.length > 0) {\n  167      if (state.ended && !addToFront) {\n  168:       var e = new Error('stream.push() after EOF');\n  169:       stream.emit('error', e);\n  170      } else if (state.endEmitted && addToFront) {\n  171:       var e = new Error('stream.unshift() after end event');\n  172:       stream.emit('error', e);\n  173      } else {\n  174        if (state.decoder && !addToFront && !encoding)\n  ...\n  185  \n  186        if (state.needReadable)\n  187:         emitReadable(stream);\n  188  \n  189:       maybeReadMore(stream, state);\n  190      }\n  191    } else if (!addToFront) {\n  ...\n  307      // exists for pushing a zero-length chunk into state.buffer\n  308      // and triggering this behavior. In this case, we return our\n  309:     // remaining data and end the stream, if appropriate.\n  310      if (state.length > 0 && state.decoder) {\n  311        ret = fromList(n, state);\n  ...\n  321    // All the actual chunk generation logic needs to be\n  322    // *below* the call to _read.  The reason is that in certain\n  323:   // synthetic stream cases, such as passthrough streams, _read\n  324    // may be a completely synchronous operation which may change\n  325    // the state of the read buffer, providing enough data when\n  ...\n  333    // Note that this may be asynchronous, or synchronous.  Yes, it is\n  334    // deeply ugly to write APIs this way, but that still doesn't mean\n  335:   // that the Readable class should behave improperly, as streams are\n  336    // designed to be sync/async agnostic.\n  337    // Take note if the _read call is sync or async (ie, if the read call\n  ...\n  409  \n  410  \n  411: function onEofChunk(stream, state) {\n  412    if (state.decoder && !state.ended) {\n  413      var chunk = state.decoder.end();\n  ...\n  422    // 'readable' now to make sure it gets picked up.\n  423    if (state.length > 0)\n  424:     emitReadable(stream);\n  425    else\n  426:     endReadable(stream);\n  427  }\n  428  \n  ...\n  430  // another read() call => stack overflow.  This way, it might trigger\n  431  // a nextTick recursion warning, but that's not so bad.\n  432: function emitReadable(stream) {\n  433:   var state = stream._readableState;\n  434    state.needReadable = false;\n  435    if (state.emittedReadable)\n  ...\n  439    if (state.sync)\n  440      process.nextTick(function() {\n  441:       emitReadable_(stream);\n  442      });\n  443    else\n  444:     emitReadable_(stream);\n  445  }\n  446  \n  447: function emitReadable_(stream) {\n  448:   stream.emit('readable');\n  449  }\n  450  \n  ...\n  456  // However, if we're not ended, or reading, and the length < hwm,\n  457  // then go ahead and try to read some more preemptively.\n  458: function maybeReadMore(stream, state) {\n  459    if (!state.readingMore) {\n  460      state.readingMore = true;\n  461      process.nextTick(function() {\n  462:       maybeReadMore_(stream, state);\n  463      });\n  464    }\n  465  }\n  466  \n  467: function maybeReadMore_(stream, state) {\n  468    var len = state.length;\n  469    while (!state.reading && !state.flowing && !state.ended &&\n  470           state.length < state.highWaterMark) {\n  471:     stream.read(0);\n  472      if (len === state.length)\n  473        // didn't get any data, stop spinning.\n  ...\n  481  // abstract method.  to be overridden in specific implementation classes.\n  482  // call cb(er, data) where data is <= n in length.\n  483: // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n  484  // arbitrary, and perhaps not very meaningful.\n  485  Readable.prototype._read = function(n) {\n  ...\n  727  // Ensure readable listeners eventually get something\n  728  Readable.prototype.on = function(ev, fn) {\n  729:   var res = Stream.prototype.on.call(this, ev, fn);\n  730  \n  731    if (ev === 'data' && !this._readableState.flowing)\n  ...\n  750  Readable.prototype.addListener = Readable.prototype.on;\n  751  \n  752: // pause() and resume() are remnants of the legacy readable stream API\n  753  // If the user uses them, then switch into old mode.\n  754  Readable.prototype.resume = function() {\n  ...\n  763  };\n  764  \n  765: function emitDataEvents(stream, startPaused) {\n  766:   var state = stream._readableState;\n  767  \n  768    if (state.flowing) {\n  769:     // https://github.com/isaacs/readable-stream/issues/16\n  770      throw new Error('Cannot switch to old mode now.');\n  771    }\n  ...\n  774    var readable = false;\n  775  \n  776:   // convert to an old-style stream.\n  777:   stream.readable = true;\n  778:   stream.pipe = Stream.prototype.pipe;\n  779:   stream.on = stream.addListener = Stream.prototype.on;\n  780  \n  781:   stream.on('readable', function() {\n  782      readable = true;\n  783  \n  784      var c;\n  785:     while (!paused && (null !== (c = stream.read())))\n  786:       stream.emit('data', c);\n  787  \n  788      if (c === null) {\n  789        readable = false;\n  790:       stream._readableState.needReadable = true;\n  791      }\n  792    });\n  793  \n  794:   stream.pause = function() {\n  795      paused = true;\n  796      this.emit('pause');\n  797    };\n  798  \n  799:   stream.resume = function() {\n  800      paused = false;\n  801      if (readable)\n  802        process.nextTick(function() {\n  803:         stream.emit('readable');\n  804        });\n  805      else\n  ...\n  809  \n  810    // now make it start, just in case it hadn't already.\n  811:   stream.emit('readable');\n  812  }\n  813  \n  814: // wrap an old-style stream as the async data source.\n  815: // This is *not* part of the readable stream interface.\n  816  // It is an ugly unfortunate mess of history.\n  817: Readable.prototype.wrap = function(stream) {\n  818    var state = this._readableState;\n  819    var paused = false;\n  820  \n  821    var self = this;\n  822:   stream.on('end', function() {\n  823      if (state.decoder && !state.ended) {\n  824        var chunk = state.decoder.end();\n  ...\n  830    });\n  831  \n  832:   stream.on('data', function(chunk) {\n  833      if (state.decoder)\n  834        chunk = state.decoder.write(chunk);\n  ...\n  844      if (!ret) {\n  845        paused = true;\n  846:       stream.pause();\n  847      }\n  848    });\n  ...\n  850    // proxy all the other methods.\n  851    // important when wrapping filters and duplexes.\n  852:   for (var i in stream) {\n  853:     if (typeof stream[i] === 'function' &&\n  854          typeof this[i] === 'undefined') {\n  855        this[i] = function(method) { return function() {\n  856:         return stream[method].apply(stream, arguments);\n  857        }}(i);\n  858      }\n  ...\n  862    var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  863    forEach(events, function(ev) {\n  864:     stream.on(ev, self.emit.bind(self, ev));\n  865    });\n  866  \n  867    // when we try to consume some more bytes, simply unpause the\n  868:   // underlying stream.\n  869    self._read = function(n) {\n  870      if (paused) {\n  871        paused = false;\n  872:       stream.resume();\n  873      }\n  874    };\n  ...\n  948  }\n  949  \n  950: function endReadable(stream) {\n  951:   var state = stream._readableState;\n  952  \n  953    // If we get here before consuming all the bytes, then that is a\n  954    // bug in node.  Should never happen.\n  955    if (state.length > 0)\n  956:     throw new Error('endReadable called on non-empty stream');\n  957  \n  958    if (!state.endEmitted && state.calledRead) {\n  ...\n  962        if (!state.endEmitted && state.length === 0) {\n  963          state.endEmitted = true;\n  964:         stream.readable = false;\n  965:         stream.emit('end');\n  966        }\n  967      });\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\lib\\_stream_transform.js:\n   21  \n   22  \n   23: // a transform stream is a readable/writable stream where you do\n   24  // something with the data.  Sometimes it's called a \"filter\",\n   25  // but that's not a great name for it, since that implies a thing where\n   ..\n   29  // While the output is causally related to the input, it's not a\n   30  // necessarily symmetric or synchronous transformation.  For example,\n   31: // a zlib stream might take multiple plain-text writes(), and then\n   32  // emit a single compressed chunk some time in the future.\n   33  //\n   34  // Here's how this works:\n   35  //\n   36: // The Transform stream has all the aspects of the readable and writable\n   37: // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n   38  // internally, and returns false if there's a lot of pending writes\n   39  // buffered up.  When you call read(), that calls _read(n) until\n   40  // there's enough pending readable data buffered up.\n   41  //\n   42: // In a transform stream, the written data is placed in a buffer.  When\n   43  // _read(n) is called, it transforms the queued up data, calling the\n   44  // buffered _write cb's as it consumes chunks.  If consuming a single\n   ..\n   50  // since _read has to be called to start processing a new chunk.  However,\n   51  // a pathological inflate type of transform can cause excessive buffering\n   52: // here.  For example, imagine a stream where every byte of input is\n   53  // interpreted as an integer from 0-255, and then results in that many\n   54  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n   ..\n   65  module.exports = Transform;\n   66  \n   67: var Duplex = require('./_stream_duplex');\n   68  \n   69  /*<replacement>*/\n   ..\n   75  \n   76  \n   77: function TransformState(options, stream) {\n   78    this.afterTransform = function(er, data) {\n   79:     return afterTransform(stream, er, data);\n   80    };\n   81  \n   ..\n   86  }\n   87  \n   88: function afterTransform(stream, er, data) {\n   89:   var ts = stream._transformState;\n   90    ts.transforming = false;\n   91  \n   ..\n   93  \n   94    if (!cb)\n   95:     return stream.emit('error', new Error('no writecb in Transform class'));\n   96  \n   97    ts.writechunk = null;\n   ..\n   99  \n  100    if (data !== null && data !== undefined)\n  101:     stream.push(data);\n  102  \n  103    if (cb)\n  104      cb(er);\n  105  \n  106:   var rs = stream._readableState;\n  107    rs.reading = false;\n  108    if (rs.needReadable || rs.length < rs.highWaterMark) {\n  109:     stream._read(rs.highWaterMark);\n  110    }\n  111  }\n  ...\n  121  \n  122    // when the writable side finishes, then flush out anything remaining.\n  123:   var stream = this;\n  124  \n  125    // start out asking for a readable event once data is transformed.\n  ...\n  134      if ('function' === typeof this._flush)\n  135        this._flush(function(er) {\n  136:         done(stream, er);\n  137        });\n  138      else\n  139:       done(stream);\n  140    });\n  141  }\n  ...\n  191  \n  192  \n  193: function done(stream, er) {\n  194    if (er)\n  195:     return stream.emit('error', er);\n  196  \n  197    // if there's nothing in the write buffer, then that means\n  198    // that nothing more will ever be provided\n  199:   var ws = stream._writableState;\n  200:   var rs = stream._readableState;\n  201:   var ts = stream._transformState;\n  202  \n  203    if (ws.length)\n  ...\n  207      throw new Error('calling transform done when still transforming');\n  208  \n  209:   return stream.push(null);\n  210  }\n  211  \n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\lib\\_stream_writable.js:\n   20  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: // A bit simpler than readable streams.\n   23  // Implement an async ._write(chunk, cb), and it'll handle all\n   24  // the drain event emission and buffering.\n   ..\n   38  /*</replacement>*/\n   39  \n   40: var Stream = require('stream');\n   41  \n   42: util.inherits(Writable, Stream);\n   43  \n   44  function WriteReq(chunk, encoding, cb) {\n   ..\n   48  }\n   49  \n   50: function WritableState(options, stream) {\n   51    options = options || {};\n   52  \n   ..\n   57    this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n   58  \n   59:   // object stream flag to indicate whether or not this stream\n   60    // contains buffers or objects.\n   61    this.objectMode = !!options.objectMode;\n   ..\n   73  \n   74    // should we decode strings into buffers before passing to _write?\n   75:   // this is here so that some node-core streams can optimize string\n   76    // handling at a lower level.\n   77    var noDecode = options.decodeStrings === false;\n   ..\n  104    // the callback that's passed to _write(chunk,cb)\n  105    this.onwrite = function(er) {\n  106:     onwrite(stream, er);\n  107    };\n  108  \n  ...\n  120  \n  121  function Writable(options) {\n  122:   var Duplex = require('./_stream_duplex');\n  123  \n  124    // Writable ctor is applied to Duplexes, though they're not\n  ...\n  132    this.writable = true;\n  133  \n  134:   Stream.call(this);\n  135  }\n  136  \n  137: // Otherwise people can pipe Writable streams, which is just wrong.\n  138  Writable.prototype.pipe = function() {\n  139    this.emit('error', new Error('Cannot pipe. Not readable.'));\n  ...\n  141  \n  142  \n  143: function writeAfterEnd(stream, state, cb) {\n  144    var er = new Error('write after end');\n  145    // TODO: defer error events consistently everywhere, not just the cb\n  146:   stream.emit('error', er);\n  147    process.nextTick(function() {\n  148      cb(er);\n  ...\n  152  // If we get something that is not a buffer, string, null, or undefined,\n  153  // and we're not in objectMode, then that's an error.\n  154: // Otherwise stream chunks are all considered to be of length=1, and the\n  155  // watermarks determine how many objects to keep in the buffer, rather than\n  156  // how many bytes or characters.\n  157: function validChunk(stream, state, chunk, cb) {\n  158    var valid = true;\n  159    if (!Buffer.isBuffer(chunk) &&\n  ...\n  163        !state.objectMode) {\n  164      var er = new TypeError('Invalid non-string/buffer chunk');\n  165:     stream.emit('error', er);\n  166      process.nextTick(function() {\n  167        cb(er);\n  ...\n  209  // in the queue, and wait our turn.  Otherwise, call _write\n  210  // If we return false, then we need a drain event, so set that flag.\n  211: function writeOrBuffer(stream, state, chunk, encoding, cb) {\n  212    chunk = decodeChunk(state, chunk, encoding);\n  213    if (Buffer.isBuffer(chunk))\n  ...\n  225      state.buffer.push(new WriteReq(chunk, encoding, cb));\n  226    else\n  227:     doWrite(stream, state, len, chunk, encoding, cb);\n  228  \n  229    return ret;\n  230  }\n  231  \n  232: function doWrite(stream, state, len, chunk, encoding, cb) {\n  233    state.writelen = len;\n  234    state.writecb = cb;\n  235    state.writing = true;\n  236    state.sync = true;\n  237:   stream._write(chunk, encoding, state.onwrite);\n  238    state.sync = false;\n  239  }\n  240  \n  241: function onwriteError(stream, state, sync, er, cb) {\n  242    if (sync)\n  243      process.nextTick(function() {\n  ...\n  247      cb(er);\n  248  \n  249:   stream._writableState.errorEmitted = true;\n  250:   stream.emit('error', er);\n  251  }\n  252  \n  ...\n  258  }\n  259  \n  260: function onwrite(stream, er) {\n  261:   var state = stream._writableState;\n  262    var sync = state.sync;\n  263    var cb = state.writecb;\n  ...\n  266  \n  267    if (er)\n  268:     onwriteError(stream, state, sync, er, cb);\n  269    else {\n  270      // Check if we're actually ready to finish, but don't emit yet\n  271:     var finished = needFinish(stream, state);\n  272  \n  273      if (!finished && !state.bufferProcessing && state.buffer.length)\n  274:       clearBuffer(stream, state);\n  275  \n  276      if (sync) {\n  277        process.nextTick(function() {\n  278:         afterWrite(stream, state, finished, cb);\n  279        });\n  280      } else {\n  281:       afterWrite(stream, state, finished, cb);\n  282      }\n  283    }\n  284  }\n  285  \n  286: function afterWrite(stream, state, finished, cb) {\n  287    if (!finished)\n  288:     onwriteDrain(stream, state);\n  289    cb();\n  290    if (finished)\n  291:     finishMaybe(stream, state);\n  292  }\n  293  \n  ...\n  295  // emit 'drain' before the write() consumer gets the 'false' return\n  296  // value, and has a chance to attach a 'drain' listener.\n  297: function onwriteDrain(stream, state) {\n  298    if (state.length === 0 && state.needDrain) {\n  299      state.needDrain = false;\n  300:     stream.emit('drain');\n  301    }\n  302  }\n  ...\n  304  \n  305  // if there's something in the buffer waiting, then process it\n  306: function clearBuffer(stream, state) {\n  307    state.bufferProcessing = true;\n  308  \n  ...\n  314      var len = state.objectMode ? 1 : chunk.length;\n  315  \n  316:     doWrite(stream, state, len, chunk, encoding, cb);\n  317  \n  318      // if we didn't call the onwrite immediately, then\n  ...\n  358  \n  359  \n  360: function needFinish(stream, state) {\n  361    return (state.ending &&\n  362            state.length === 0 &&\n  ...\n  365  }\n  366  \n  367: function finishMaybe(stream, state) {\n  368:   var need = needFinish(stream, state);\n  369    if (need) {\n  370      state.finished = true;\n  371:     stream.emit('finish');\n  372    }\n  373    return need;\n  374  }\n  375  \n  376: function endWritable(stream, state, cb) {\n  377    state.ending = true;\n  378:   finishMaybe(stream, state);\n  379    if (cb) {\n  380      if (state.finished)\n  381        process.nextTick(cb);\n  382      else\n  383:       stream.once('finish', cb);\n  384    }\n  385    state.ended = true;\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\node_modules\\readable-stream\\node_modules\\core-util-is\\float.patch:\n  554  -\n  555  -\n  556: -exports.pump = exports.deprecate(function(readStream, writeStream, callback) {\n  557  -  var callbackCalled = false;\n  558  -\n  ...\n  564  -  }\n  565  -\n  566: -  readStream.addListener('data', function(chunk) {\n  567: -    if (writeStream.write(chunk) === false) readStream.pause();\n  568  -  });\n  569  -\n  570: -  writeStream.addListener('drain', function() {\n  571: -    readStream.resume();\n  572  -  });\n  573  -\n  574: -  readStream.addListener('end', function() {\n  575: -    writeStream.end();\n  576  -  });\n  577  -\n  578: -  readStream.addListener('close', function() {\n  579  -    call();\n  580  -  });\n  581  -\n  582: -  readStream.addListener('error', function(err) {\n  583: -    writeStream.end();\n  584  -    call(err);\n  585  -  });\n  586  -\n  587: -  writeStream.addListener('error', function(err) {\n  588: -    readStream.destroy();\n  589  -    call(err);\n  590  -  });\n  591: -}, 'util.pump(): Use readableStream.pipe() instead');\n  592  -\n  593  -\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\bl\\test\\basic-test.js:\n  266  })\n  267  \n  268: !process.browser && tape('test stream', function (t) {\n  269    var random = crypto.randomBytes(65534)\n  270      , rndhash = hash(random, 'md5')\n  ...\n  276          t.equal(rndhash, hash(buf, 'md5'))\n  277  \n  278:         bl.pipe(fs.createWriteStream('/tmp/bl_test_rnd_out.dat'))\n  279            .on('close', function () {\n  280:             var s = fs.createReadStream('/tmp/bl_test_rnd_out.dat')\n  281              s.on('data', md5sum.update.bind(md5sum))\n  282              s.on('end', function() {\n  ...\n  289  \n  290    fs.writeFileSync('/tmp/bl_test_rnd.dat', random)\n  291:   fs.createReadStream('/tmp/bl_test_rnd.dat').pipe(bl)\n  292  })\n  293  \n  ...\n  446  \n  447    var bl = new BufferList()\n  448:   fs.createReadStream(__dirname + '/sauce.js')\n  449      .pipe(bl)\n  450  \n  ...\n  460  \n  461    var bl = new BufferList()\n  462:   fs.createReadStream(__dirname + '/sauce.js')\n  463      .pipe(bl)\n  464  \n  ...\n  476  \n  477    var bl = new BufferList()\n  478:   fs.createReadStream(__dirname + '/sauce.js')\n  479      .on('end', onEnd)\n  480      .pipe(bl)\n  ...\n  494      , ds = new BufferList()\n  495  \n  496:   fs.createReadStream(__dirname + '/sauce.js')\n  497      .on('end', onEnd)\n  498      .pipe(bl)\n  ...\n  518  !process.browser && tape('handle error', function (t) {\n  519    t.plan(2)\n  520:   fs.createReadStream('/does/not/exist').pipe(BufferList(function (err, data) {\n  521      t.ok(err instanceof Error, 'has error')\n  522      t.notOk(data, 'no data')\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\package.json:\n   28    },\n   29    \"license\": \"MIT\",\n   30:   \"readme\": \"# fd [![Build Status](https://secure.travis-ci.org/rvagg/node-fd.png)](http://travis-ci.org/rvagg/node-fd)\\n\\nFile descriptor manager for Node.js. *Available in npm as <strong>fd</strong>*.\\n\\n**fd** manages `fs.open()` and `fs.close()` calls safely for you where there may be timing issues related to multiple-use of the same descriptor.\\n\\n**fd** provides `checkin()` and `checkout()` functions so your application can register its intent to use a file descriptor after it's been opened and then register that it has finished with the descriptor so that any pending `fs.close()` operations may be performed.\\n\\n**fd** naturally couples with [async-cache](https://github.com/isaacs/async-cache) to provide a safe pool of file descriptors.\\n\\n## Example\\n\\nLets make a static resource web server! This example can be found in the *example/* directory of this repository.\\n\\nWe use [async-cache](https://github.com/isaacs/async-cache) to cache both `fs.sync()` calls and `fd`s, but we hook it up to **fd** so we can safely manage opens and closes.\\n\\n```js\\nconst fdman = require('fd')()\\n    , http  = require('http')\\n    , fs    = require('fs')\\n    , path  = require('path')\\n    , AC    = require('async-cache')\\n    , mime  = require('mime')\\n\\n    , ROOT  = path.join(__dirname, 'public')\\n\\n      // an async cache for fs.stat calls, fresh for 10s\\n    , statCache = AC({\\n          max    : 100\\n        , maxAge : 10000\\n        , load   : function (path, callback) {\\n                     fs.stat(path, callback)\\n                   }\\n      })\\n\\n      // an async cache for fds, fresh for 10s\\n    , fdCache = AC({\\n          max     : 100\\n        , maxAge  : 10000\\n          // use fdman to open & close\\n        , load    : fdman.open.bind(fdman)\\n        , dispose : fdman.close.bind(fdman)\\n      })\\n\\n    , serveError = function (res) {\\n        res.statusCode = 404\\n        res.setHeader('content-type', 'text/plain')\\n        res.end(http.STATUS_CODES[res.statusCode] + '\\\\n')\\n      }\\n\\nhttp.createServer(function (req, res) {\\n  var p = path.join(ROOT, req.url)\\n\\n  // get a fs.stat for this file\\n  statCache.get(p, function (err, stat) {\\n    if (err || !stat.isFile())\\n      return serveError(res)\\n\\n    // get an fd for this file\\n    fdCache.get(p, function (err, fd) {\\n      var mimeType = mime.lookup(path.extname(p))\\n          // get a safe checkin function from fdman that\\n          // we could safely all multiple times for this single\\n          // checkout\\n        , checkin = fdman.checkinfn(p, fd)\\n\\n      // check out the fd for use\\n      fdman.checkout(p, fd)\\n\\n      res.setHeader(\\n          'content-type'\\n          // don't force download, just show it\\n        , mimeType != 'application/octet-stream' ? mimeType : 'text/plain'\\n      )\\n\\n      // stream from the fd to the response\\n      var st = fs.createReadStream(p, { fd: fd, start: 0, end: stat.size })n\\n        .on('end', checkin)\\n        .on('error', checkin)\\n\\n      // override destroy so we don't close the fd\\n      st.destroy = function () {}\\n\\n      st.pipe(res)\\n\\n    })\\n  })\\n}).listen(8080)\\n```\\n\\n## API\\n\\n### fd()\\nCreate a new instance of **fd**. Typically called with `var fdman = require('fd')()`. You can have multiple, separate instances of **fd** operating at the same time, hence the need to instantiate.\\n\\n### fdman.open(path, callback)\\nEquivalent to `fs.open(path, callback)`, you'll get back an `err` and `fd` parameters but the descriptor will go into the managed pool.\\n\\n### fdman.close(path, fd)\\nWill call `fs.close(fd)` *only when the `fd` is no longer in use*. i.e. it will wait till all current uses have been checked in (see below).\\n\\n### fdman.checkout(path, fd)\\nCalled when your application may need to use the `fd`. This should be called as early as possible, even if your application may not end up using it.\\n\\nIt is important to perform a `checkout()` as soon as you have a reference to the file descriptor if you may be using it, otherwise an asynchronous call may interrupt and call `close()` before you use it. You *don't have to use the `fd`* to register your intent to use it, as long as you eventually call `checkin()`.\\n\\n### fdman.checkin(path, fd)\\nRegister with **fd** that you have finished using the descriptor and it can be safely closed if need be.\\n\\nThe descriptor may not need to be closed or there may be other uses of the descriptor currently checked out so a `checkin()` won't automatically lead to a `close()`.\\n\\n### fdman.checkinfn(path, fd)\\nReturns a function that, when called, will safely perform a `checkin()` for you on the given path and descriptor. An important property of the function is that it will only perform a single `checkin()` regardless of how many times it is called.\\n\\nThis returned function is helpful for calling `checkin()` from multiple points in your application, such as in case of error, and you don't need to worry about whether it's been previously called for the current `checkout()`.\\n\\nSee the example above how this can be used.\\n\\n\\n## Licence\\n\\nfd is Copyright (c) 2012 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\",\n   31    \"readmeFilename\": \"README.md\",\n   32    \"_id\": \"fd@0.0.2\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\README.md:\n   71            'content-type'\n   72            // don't force download, just show it\n   73:         , mimeType != 'application/octet-stream' ? mimeType : 'text/plain'\n   74        )\n   75  \n   76:       // stream from the fd to the response\n   77:       var st = fs.createReadStream(p, { fd: fd, start: 0, end: stat.size })n\n   78          .on('end', checkin)\n   79          .on('error', checkin)\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\example\\index.js:\n   59            'content-type'\n   60            // don't force download, just show it\n   61:         , mimeType != 'application/octet-stream' ? mimeType : 'text/plain'\n   62        )\n   63  \n   64:       // stream from the fd to the response\n   65:       var st = fs.createReadStream(p, { fd: fd, start: 0, end: stat.size })\n   66          .on('end', checkin)\n   67          .on('error', checkin)\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\example\\node_modules\\mime\\package.json:\n   26    },\n   27    \"version\": \"1.2.7\",\n   28:   \"readme\": \"# mime\\n\\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\\n\\n## Install\\n\\nInstall with [npm](http://github.com/isaacs/npm):\\n\\n    npm install mime\\n\\n## API - Queries\\n\\n### mime.lookup(path)\\nGet the mime type associated with a file. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\\n\\n    var mime = require('mime');\\n\\n    mime.lookup('/path/to/file.txt');         // => 'text/plain'\\n    mime.lookup('file.txt');                  // => 'text/plain'\\n    mime.lookup('.TXT');                      // => 'text/plain'\\n    mime.lookup('htm');                       // => 'text/html'\\n\\n### mime.extension(type)\\nGet the default extension for `type`\\n\\n    mime.extension('text/html');                 // => 'html'\\n    mime.extension('application/octet-stream');  // => 'bin'\\n\\n### mime.charsets.lookup()\\n\\nMap mime-type to charset\\n\\n    mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n\\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\\n\\n## API - Defining Custom Types\\n\\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\\n\\n### mime.define()\\n\\nAdd custom mime/extension mappings\\n\\n    mime.define({\\n        'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n        'application/x-my-type': ['x-mt', 'x-mtt'],\\n        // etc ...\\n    });\\n\\n    mime.lookup('x-sft');                 // => 'text/x-some-format'\\n\\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\\n\\n    mime.extension('text/x-some-format'); // => 'x-sf'\\n\\n### mime.load(filepath)\\n\\nLoad mappings from an Apache \\\".types\\\" format file\\n\\n    mime.load('./my_project.types');\\n\\nThe .types file format is simple -  See the `types` dir for examples.\\n\",\n   29    \"readmeFilename\": \"README.md\",\n   30    \"_id\": \"mime@1.2.7\",\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\example\\node_modules\\mime\\README.md:\n   25  \n   26      mime.extension('text/html');                 // => 'html'\n   27:     mime.extension('application/octet-stream');  // => 'bin'\n   28  \n   29  ### mime.charsets.lookup()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\example\\node_modules\\mime\\test.js:\n   22  eq('text/plain', mime.lookup('.txt'));\n   23  eq('text/plain', mime.lookup('txt'));\n   24: eq('application/octet-stream', mime.lookup('text.nope'));\n   25  eq('fallback', mime.lookup('text.fallback', 'fallback'));\n   26: eq('application/octet-stream', mime.lookup('constructor'));\n   27  eq('text/plain', mime.lookup('TEXT.TXT'));\n   28: eq('text/event-stream', mime.lookup('text/event-stream'));\n   29  eq('application/x-web-app-manifest+json', mime.lookup('text.webapp'));\n   30  \n   ..\n   35  eq('txt', mime.extension(mime.types.text));\n   36  eq('html', mime.extension(mime.types.htm));\n   37: eq('bin', mime.extension('application/octet-stream'));\n   38  eq(undefined, mime.extension('constructor'));\n   39  \n   ..\n   42  //\n   43  \n   44: eq('application/octet-stream', mime.lookup('file.buffer'));\n   45  eq('audio/mp4', mime.lookup('file.m4a'));\n   46  \n   ..\n   51  eq('UTF-8', mime.charsets.lookup('text/plain'));\n   52  eq(undefined, mime.charsets.lookup(mime.types.js));\n   53: eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n   54  \n   55  console.log('\\nOK');\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\example\\node_modules\\mime\\types\\mime.types:\n  152  # application/ocsp-request\n  153  # application/ocsp-response\n  154: application/octet-stream	bin dms lrf mar so dist distz pkg bpk dump elc deploy\n  155  application/oda					oda\n  156  application/oebps-package+xml			opf\n  ...\n  653  # application/vnd.ntt-local.file-transfer\n  654  # application/vnd.ntt-local.sip-ta_remote\n  655: # application/vnd.ntt-local.sip-ta_tcp_stream\n  656  application/vnd.oasis.opendocument.chart		odc\n  657  application/vnd.oasis.opendocument.chart-template	otc\n  ...\n  674  # application/vnd.oftn.l10n+json\n  675  # application/vnd.oipf.contentaccessdownload+xml\n  676: # application/vnd.oipf.contentaccessstreaming+xml\n  677  # application/vnd.oipf.cspg-hexbinary\n  678  # application/vnd.oipf.dae.svg+xml\n  ...\n  836  # application/vnd.radisys.msml-audit-conn+xml\n  837  # application/vnd.radisys.msml-audit-dialog+xml\n  838: # application/vnd.radisys.msml-audit-stream+xml\n  839  # application/vnd.radisys.msml-conf+xml\n  840  # application/vnd.radisys.msml-dialog+xml\n  ...\n  902  application/vnd.stepmania.package		smzip\n  903  application/vnd.stepmania.stepchart		sm\n  904: # application/vnd.street-stream\n  905  application/vnd.sun.xml.calc			sxc\n  906  application/vnd.sun.xml.calc.template		stc\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\fd\\example\\node_modules\\mime\\types\\node.types:\n   25  # Why: semi-standard extension w/in the node community\n   26  # Added by: tootallnate\n   27: application/octet-stream  buffer\n   28  \n   29  # What: The \"protected\" MP-4 formats used by iTunes.\n   30: # Why: Required for streaming music to browsers (?)\n   31  # Added by: broofa\n   32  application/mp4  m4p\n   ..\n   44  \n   45  # What: The FLAC lossless codec format\n   46: # Why: Streaming and serving FLAC audio\n   47  # Added by: jacobrask\n   48  audio/flac  flac\n   49  \n   50  # What: EventSource mime type\n   51: # Why: mime type of Server-Sent Events stream\n   52: # http://www.w3.org/TR/eventsource/#text-event-stream\n   53  # Added by: francois2metz\n   54: text/event-stream  event-stream\n   55  \n   56  # What: Mozilla App manifest mime type\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\mime\\package.json:\n   26    },\n   27    \"version\": \"1.2.11\",\n   28:   \"readme\": \"# mime\\n\\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\\n\\n## Install\\n\\nInstall with [npm](http://github.com/isaacs/npm):\\n\\n    npm install mime\\n\\n## API - Queries\\n\\n### mime.lookup(path)\\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\\n\\n    var mime = require('mime');\\n\\n    mime.lookup('/path/to/file.txt');         // => 'text/plain'\\n    mime.lookup('file.txt');                  // => 'text/plain'\\n    mime.lookup('.TXT');                      // => 'text/plain'\\n    mime.lookup('htm');                       // => 'text/html'\\n\\n### mime.default_type\\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\\n\\n### mime.extension(type)\\nGet the default extension for `type`\\n\\n    mime.extension('text/html');                 // => 'html'\\n    mime.extension('application/octet-stream');  // => 'bin'\\n\\n### mime.charsets.lookup()\\n\\nMap mime-type to charset\\n\\n    mime.charsets.lookup('text/plain');        // => 'UTF-8'\\n\\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\\n\\n## API - Defining Custom Types\\n\\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\\n\\n### mime.define()\\n\\nAdd custom mime/extension mappings\\n\\n    mime.define({\\n        'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],\\n        'application/x-my-type': ['x-mt', 'x-mtt'],\\n        // etc ...\\n    });\\n\\n    mime.lookup('x-sft');                 // => 'text/x-some-format'\\n\\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\\n\\n    mime.extension('text/x-some-format'); // => 'x-sf'\\n\\n### mime.load(filepath)\\n\\nLoad mappings from an Apache \\\".types\\\" format file\\n\\n    mime.load('./my_project.types');\\n\\nThe .types file format is simple -  See the `types` dir for examples.\\n\",\n   29    \"readmeFilename\": \"README.md\",\n   30    \"bugs\": {\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\mime\\README.md:\n   12  \n   13  ### mime.lookup(path)\n   14: Get the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.\n   15  \n   16      var mime = require('mime');\n   ..\n   22  \n   23  ### mime.default_type\n   24: Sets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n   25  \n   26  ### mime.extension(type)\n   ..\n   28  \n   29      mime.extension('text/html');                 // => 'html'\n   30:     mime.extension('application/octet-stream');  // => 'bin'\n   31  \n   32  ### mime.charsets.lookup()\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\mime\\test.js:\n   27  eq('text/plain', mime.lookup('/txt'));         // extension-less ()\n   28  eq('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\n   29: eq('application/octet-stream', mime.lookup('text.nope')); // unrecognized\n   30  eq('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n   31  \n   ..\n   36  eq('txt', mime.extension(mime.types.text));\n   37  eq('html', mime.extension(mime.types.htm));\n   38: eq('bin', mime.extension('application/octet-stream'));\n   39: eq('bin', mime.extension('application/octet-stream '));\n   40  eq('html', mime.extension(' text/html; charset=UTF-8'));\n   41  eq('html', mime.extension('text/html; charset=UTF-8 '));\n   ..\n   51  \n   52  eq('application/font-woff', mime.lookup('file.woff'));\n   53: eq('application/octet-stream', mime.lookup('file.buffer'));\n   54  eq('audio/mp4', mime.lookup('file.m4a'));\n   55  eq('font/opentype', mime.lookup('file.otf'));\n   ..\n   61  eq('UTF-8', mime.charsets.lookup('text/plain'));\n   62  eq(undefined, mime.charsets.lookup(mime.types.js));\n   63: eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\n   64  \n   65  //\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\mime\\types\\mime.types:\n  152  # application/ocsp-request\n  153  # application/ocsp-response\n  154: application/octet-stream	bin dms lrf mar so dist distz pkg bpk dump elc deploy\n  155  application/oda					oda\n  156  application/oebps-package+xml			opf\n  ...\n  653  # application/vnd.ntt-local.file-transfer\n  654  # application/vnd.ntt-local.sip-ta_remote\n  655: # application/vnd.ntt-local.sip-ta_tcp_stream\n  656  application/vnd.oasis.opendocument.chart		odc\n  657  application/vnd.oasis.opendocument.chart-template	otc\n  ...\n  674  # application/vnd.oftn.l10n+json\n  675  # application/vnd.oipf.contentaccessdownload+xml\n  676: # application/vnd.oipf.contentaccessstreaming+xml\n  677  # application/vnd.oipf.cspg-hexbinary\n  678  # application/vnd.oipf.dae.svg+xml\n  ...\n  836  # application/vnd.radisys.msml-audit-conn+xml\n  837  # application/vnd.radisys.msml-audit-dialog+xml\n  838: # application/vnd.radisys.msml-audit-stream+xml\n  839  # application/vnd.radisys.msml-conf+xml\n  840  # application/vnd.radisys.msml-dialog+xml\n  ...\n  902  application/vnd.stepmania.package		smzip\n  903  application/vnd.stepmania.stepchart		sm\n  904: # application/vnd.street-stream\n  905  application/vnd.sun.xml.calc			sxc\n  906  application/vnd.sun.xml.calc.template		stc\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\node_modules\\st\\node_modules\\mime\\types\\node.types:\n   25  # Why: semi-standard extension w/in the node community\n   26  # Added by: tootallnate\n   27: application/octet-stream  buffer\n   28  \n   29  # What: The \"protected\" MP-4 formats used by iTunes.\n   30: # Why: Required for streaming music to browsers (?)\n   31  # Added by: broofa\n   32  application/mp4  m4p\n   ..\n   39  \n   40  # What: EventSource mime type\n   41: # Why: mime type of Server-Sent Events stream\n   42: # http://www.w3.org/TR/eventsource/#text-event-stream\n   43  # Added by: francois2metz\n   44: text/event-stream  event-stream\n   45  \n   46  # What: Mozilla App manifest mime type\n   ..\n   65  text/plain  ini\n   66  \n   67: # What: DASH Adaptive Streaming manifest\n   68: # Why: https://developer.mozilla.org/en-US/docs/DASH_Adaptive_Streaming_for_HTML_5_Video\n   69  # Added by: eelcocramer\n   70  application/dash+xml mdp\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\public\\extern\\d3.js:\n 5309    d3.tsv = d3_dsv(\"	\", \"text/tab-separated-values\");\n 5310    d3.geo = {};\n 5311:   d3.geo.stream = function(object, listener) {\n 5312:     if (d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n 5313:       d3_geo_streamObjectType[object.type](object, listener);\n 5314      } else {\n 5315:       d3_geo_streamGeometry(object, listener);\n 5316      }\n 5317    };\n 5318:   function d3_geo_streamGeometry(geometry, listener) {\n 5319:     if (d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n 5320:       d3_geo_streamGeometryType[geometry.type](geometry, listener);\n 5321      }\n 5322    }\n 5323:   var d3_geo_streamObjectType = {\n 5324      Feature: function(feature, listener) {\n 5325:       d3_geo_streamGeometry(feature.geometry, listener);\n 5326      },\n 5327      FeatureCollection: function(object, listener) {\n 5328        var features = object.features, i = -1, n = features.length;\n 5329:       while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n 5330      }\n 5331    };\n 5332:   var d3_geo_streamGeometryType = {\n 5333      Sphere: function(object, listener) {\n 5334        listener.sphere();\n ....\n 5343      },\n 5344      LineString: function(object, listener) {\n 5345:       d3_geo_streamLine(object.coordinates, listener, 0);\n 5346      },\n 5347      MultiLineString: function(object, listener) {\n 5348        var coordinates = object.coordinates, i = -1, n = coordinates.length;\n 5349:       while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n 5350      },\n 5351      Polygon: function(object, listener) {\n 5352:       d3_geo_streamPolygon(object.coordinates, listener);\n 5353      },\n 5354      MultiPolygon: function(object, listener) {\n 5355        var coordinates = object.coordinates, i = -1, n = coordinates.length;\n 5356:       while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n 5357      },\n 5358      GeometryCollection: function(object, listener) {\n 5359        var geometries = object.geometries, i = -1, n = geometries.length;\n 5360:       while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n 5361      }\n 5362    };\n 5363:   function d3_geo_streamLine(coordinates, listener, closed) {\n 5364      var i = -1, n = coordinates.length - closed, coordinate;\n 5365      listener.lineStart();\n ....\n 5367      listener.lineEnd();\n 5368    }\n 5369:   function d3_geo_streamPolygon(coordinates, listener) {\n 5370      var i = -1, n = coordinates.length;\n 5371      listener.polygonStart();\n 5372:     while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n 5373      listener.polygonEnd();\n 5374    }\n ....\n 5405    function d3_geo_resample(project) {\n 5406      var δ2 = .5, maxDepth = 16;\n 5407:     function resample(stream) {\n 5408        var λ0, x0, y0, a0, b0, c0;\n 5409        var resample = {\n ....\n 5412          lineEnd: lineEnd,\n 5413          polygonStart: function() {\n 5414:           stream.polygonStart();\n 5415            resample.lineStart = polygonLineStart;\n 5416          },\n 5417          polygonEnd: function() {\n 5418:           stream.polygonEnd();\n 5419            resample.lineStart = lineStart;\n 5420          }\n ....\n 5422        function point(x, y) {\n 5423          x = project(x, y);\n 5424:         stream.point(x[0], x[1]);\n 5425        }\n 5426        function lineStart() {\n 5427          x0 = NaN;\n 5428          resample.point = linePoint;\n 5429:         stream.lineStart();\n 5430        }\n 5431        function linePoint(λ, φ) {\n 5432          var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n 5433:         resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n 5434:         stream.point(x0, y0);\n 5435        }\n 5436        function lineEnd() {\n 5437          resample.point = point;\n 5438:         stream.lineEnd();\n 5439        }\n 5440        function polygonLineStart() {\n ....\n 5446          };\n 5447          resample.lineEnd = function() {\n 5448:           resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n 5449            resample.lineEnd = lineEnd;\n 5450            lineEnd();\n ....\n 5453        return resample;\n 5454      }\n 5455:     function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n 5456        var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n 5457        if (d2 > 4 * δ2 && depth--) {\n 5458          var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = Math.abs(Math.abs(c) - 1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n 5459          if (dz * dz / d2 > δ2 || Math.abs((dx * dx2 + dy * dy2) / d2 - .5) > .3) {\n 5460:           resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n 5461:           stream.point(x2, y2);\n 5462:           resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n 5463          }\n 5464        }\n ....\n 5538    }).raw = d3_geo_azimuthalEquidistant;\n 5539    d3.geo.bounds = d3_geo_bounds(d3_identity);\n 5540:   function d3_geo_bounds(projectStream) {\n 5541      var x0, y0, x1, y1;\n 5542      var bound = {\n ....\n 5562      return function(feature) {\n 5563        y1 = x1 = -(x0 = y0 = Infinity);\n 5564:       d3.geo.stream(feature, projectStream(bound));\n 5565        return [ [ x0, y0 ], [ x1, y1 ] ];\n 5566      };\n ....\n 5568    d3.geo.centroid = function(object) {\n 5569      d3_geo_centroidDimension = d3_geo_centroidW = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;\n 5570:     d3.geo.stream(object, d3_geo_centroid);\n 5571      var m;\n 5572      if (d3_geo_centroidW && Math.abs(m = Math.sqrt(d3_geo_centroidX * d3_geo_centroidX + d3_geo_centroidY * d3_geo_centroidY + d3_geo_centroidZ * d3_geo_centroidZ)) > ε) {\n ....\n 6203    }).raw = d3_geo_orthographic;\n 6204    d3.geo.path = function() {\n 6205:     var pointRadius = 4.5, projection, context, projectStream, contextStream;\n 6206      function path(object) {\n 6207:       if (object) d3.geo.stream(object, projectStream(contextStream.pointRadius(typeof pointRadius === \"function\" ? +pointRadius.apply(this, arguments) : pointRadius)));\n 6208:       return contextStream.result();\n 6209      }\n 6210      path.area = function(object) {\n 6211        d3_geo_pathAreaSum = 0;\n 6212:       d3.geo.stream(object, projectStream(d3_geo_pathArea));\n 6213        return d3_geo_pathAreaSum;\n 6214      };\n 6215      path.centroid = function(object) {\n 6216        d3_geo_centroidDimension = d3_geo_centroidX = d3_geo_centroidY = d3_geo_centroidZ = 0;\n 6217:       d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n 6218        return d3_geo_centroidZ ? [ d3_geo_centroidX / d3_geo_centroidZ, d3_geo_centroidY / d3_geo_centroidZ ] : undefined;\n 6219      };\n 6220      path.bounds = function(object) {\n 6221:       return d3_geo_bounds(projectStream)(object);\n 6222      };\n 6223      path.projection = function(_) {\n 6224        if (!arguments.length) return projection;\n 6225:       projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n 6226        return path;\n 6227      };\n 6228      path.context = function(_) {\n 6229        if (!arguments.length) return context;\n 6230:       contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n 6231        return path;\n 6232      };\n ....\n 6241      return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + +2 * radius + \"z\";\n 6242    }\n 6243:   function d3_geo_pathProjectStream(project) {\n 6244      var resample = d3_geo_resample(function(λ, φ) {\n 6245        return project([ λ * d3_degrees, φ * d3_degrees ]);\n 6246      });\n 6247:     return function(stream) {\n 6248:       stream = resample(stream);\n 6249        return {\n 6250          point: function(λ, φ) {\n 6251:           stream.point(λ * d3_radians, φ * d3_radians);\n 6252          },\n 6253          sphere: function() {\n 6254:           stream.sphere();\n 6255          },\n 6256          lineStart: function() {\n 6257:           stream.lineStart();\n 6258          },\n 6259          lineEnd: function() {\n 6260:           stream.lineEnd();\n 6261          },\n 6262          polygonStart: function() {\n 6263:           stream.polygonStart();\n 6264          },\n 6265          polygonEnd: function() {\n 6266:           stream.polygonEnd();\n 6267          }\n 6268        };\n ....\n 6271    function d3_geo_pathBuffer() {\n 6272      var pointCircle = d3_geo_pathCircle(4.5), buffer = [];\n 6273:     var stream = {\n 6274        point: point,\n 6275        lineStart: function() {\n 6276:         stream.point = pointLineStart;\n 6277        },\n 6278        lineEnd: lineEnd,\n 6279        polygonStart: function() {\n 6280:         stream.lineEnd = lineEndPolygon;\n 6281        },\n 6282        polygonEnd: function() {\n 6283:         stream.lineEnd = lineEnd;\n 6284:         stream.point = point;\n 6285        },\n 6286        pointRadius: function(_) {\n 6287          pointCircle = d3_geo_pathCircle(_);\n 6288:         return stream;\n 6289        },\n 6290        result: function() {\n ....\n 6301      function pointLineStart(x, y) {\n 6302        buffer.push(\"M\", x, \",\", y);\n 6303:       stream.point = pointLine;\n 6304      }\n 6305      function pointLine(x, y) {\n ....\n 6307      }\n 6308      function lineEnd() {\n 6309:       stream.point = point;\n 6310      }\n 6311      function lineEndPolygon() {\n 6312        buffer.push(\"Z\");\n 6313      }\n 6314:     return stream;\n 6315    }\n 6316    function d3_geo_pathContext(context) {\n 6317      var pointRadius = 4.5;\n 6318:     var stream = {\n 6319        point: point,\n 6320        lineStart: function() {\n 6321:         stream.point = pointLineStart;\n 6322        },\n 6323        lineEnd: lineEnd,\n 6324        polygonStart: function() {\n 6325:         stream.lineEnd = lineEndPolygon;\n 6326        },\n 6327        polygonEnd: function() {\n 6328:         stream.lineEnd = lineEnd;\n 6329:         stream.point = point;\n 6330        },\n 6331        pointRadius: function(_) {\n 6332          pointRadius = _;\n 6333:         return stream;\n 6334        },\n 6335        result: d3_noop\n ....\n 6341      function pointLineStart(x, y) {\n 6342        context.moveTo(x, y);\n 6343:       stream.point = pointLine;\n 6344      }\n 6345      function pointLine(x, y) {\n ....\n 6347      }\n 6348      function lineEnd() {\n 6349:       stream.point = point;\n 6350      }\n 6351      function lineEndPolygon() {\n 6352        context.closePath();\n 6353      }\n 6354:     return stream;\n 6355    }\n 6356    var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n ....\n 6446    d3.geo.area = function(object) {\n 6447      d3_geo_areaSum = 0;\n 6448:     d3.geo.stream(object, d3_geo_area);\n 6449      return d3_geo_areaSum;\n 6450    };\n ....\n 6506        return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n 6507      }\n 6508:     projection.stream = function(stream) {\n 6509:       return d3_geo_projectionRadiansRotate(rotate, clip(projectResample(stream)));\n 6510      };\n 6511      projection.clipAngle = function(_) {\n ....\n 6552      };\n 6553    }\n 6554:   function d3_geo_projectionRadiansRotate(rotate, stream) {\n 6555      return {\n 6556        point: function(x, y) {\n 6557          y = rotate(x * d3_radians, y * d3_radians), x = y[0];\n 6558:         stream.point(x > π ? x - 2 * π : x < -π ? x + 2 * π : x, y[1]);\n 6559        },\n 6560        sphere: function() {\n 6561:         stream.sphere();\n 6562        },\n 6563        lineStart: function() {\n 6564:         stream.lineStart();\n 6565        },\n 6566        lineEnd: function() {\n 6567:         stream.lineEnd();\n 6568        },\n 6569        polygonStart: function() {\n 6570:         stream.polygonStart();\n 6571        },\n 6572        polygonEnd: function() {\n 6573:         stream.polygonEnd();\n 6574        }\n 6575      };\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\public\\extern\\d3.min.js:\n    1: d3=function(){function t(t){return t.target}function n(t){return t.source}function e(t,n){try{for(var e in n)Object.defineProperty(t.prototype,e,{value:n[e],enumerable:!1})}catch(r){t.prototype=n}}function r(t){for(var n=-1,e=t.length,r=[];e>++n;)r.push(t[n]);return r}function u(t){return Array.prototype.slice.call(t)}function i(){}function a(t){return t}function o(){return!0}function c(t){return\"function\"==typeof t?t:function(){return t}}function l(t,n,e){return function(){var r=e.apply(n,arguments);return r===n?t:r}}function f(t){return null!=t&&!isNaN(t)}function s(t){return t.length}function h(t){return t.trim().replace(/\\s+/g,\" \")}function g(t){for(var n=1;t*n%1;)n*=10;return n}function p(t){return 1===t.length?function(n,e){t(null==n?e:null)}:t}function d(t){return t.responseText}function m(t){return JSON.parse(t.responseText)}function v(t){var n=Li.createRange();return n.selectNode(Li.body),n.createContextualFragment(t.responseText)}function y(t){return t.responseXML}function M(){}function b(t){function n(){for(var n,r=e,u=-1,i=r.length;i>++u;)(n=r[u].on)&&n.apply(this,arguments);return t}var e=[],r=new i;return n.on=function(n,u){var i,a=r.get(n);return 2>arguments.length?a&&a.on:(a&&(a.on=null,e=e.slice(0,i=e.indexOf(a)).concat(e.slice(i+1)),r.remove(n)),u&&e.push(r.set(n,{on:u})),t)},n}function x(t,n){return n-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function _(t){return t+\"\"}function w(t,n){var e=Math.pow(10,3*Math.abs(8-n));return{scale:n>8?function(t){return t/e}:function(t){return t*e},symbol:t}}function S(t){return function(n){return 0>=n?0:n>=1?1:t(n)}}function k(t){return function(n){return 1-t(1-n)}}function E(t){return function(n){return.5*(.5>n?t(2*n):2-t(2-2*n))}}function A(t){return t*t}function N(t){return t*t*t}function T(t){if(0>=t)return 0;if(t>=1)return 1;var n=t*t,e=n*t;return 4*(.5>t?e:3*(t-n)+e-.75)}function q(t){return function(n){return Math.pow(n,t)}}function C(t){return 1-Math.cos(t*Ti/2)}function z(t){return Math.pow(2,10*(t-1))}function D(t){return 1-Math.sqrt(1-t*t)}function L(t,n){var e;return 2>arguments.length&&(n=.45),arguments.length?e=n/(2*Ti)*Math.asin(1/t):(t=1,e=n/4),function(r){return 1+t*Math.pow(2,10*-r)*Math.sin(2*(r-e)*Ti/n)}}function F(t){return t||(t=1.70158),function(n){return n*n*((t+1)*n-t)}}function H(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function j(){Ci.event.stopPropagation(),Ci.event.preventDefault()}function P(){for(var t,n=Ci.event;t=n.sourceEvent;)n=t;return n}function R(t){for(var n=new M,e=0,r=arguments.length;r>++e;)n[arguments[e]]=b(n);return n.of=function(e,r){return function(u){try{var i=u.sourceEvent=Ci.event;u.target=t,Ci.event=u,n[u.type].apply(e,r)}finally{Ci.event=i}}},n}function O(t){var n=[t.a,t.b],e=[t.c,t.d],r=U(n),u=Y(n,e),i=U(I(e,n,-u))||0;n[0]*e[1]<e[0]*n[1]&&(n[0]*=-1,n[1]*=-1,r*=-1,u*=-1),this.rotate=(r?Math.atan2(n[1],n[0]):Math.atan2(-e[0],e[1]))*Di,this.translate=[t.e,t.f],this.scale=[r,i],this.skew=i?Math.atan2(u,i)*Di:0}function Y(t,n){return t[0]*n[0]+t[1]*n[1]}function U(t){var n=Math.sqrt(Y(t,t));return n&&(t[0]/=n,t[1]/=n),n}function I(t,n,e){return t[0]+=e*n[0],t[1]+=e*n[1],t}function V(t){return\"transform\"==t?Ci.interpolateTransform:Ci.interpolate}function Z(t,n){return n=n-(t=+t)?1/(n-t):0,function(e){return(e-t)*n}}function X(t,n){return n=n-(t=+t)?1/(n-t):0,function(e){return Math.max(0,Math.min(1,(e-t)*n))}}function B(){}function $(t,n,e){return new J(t,n,e)}function J(t,n,e){this.r=t,this.g=n,this.b=e}function G(t){return 16>t?\"0\"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function K(t,n,e){var r,u,i,a=0,o=0,c=0;if(r=/([a-z]+)\\((.*)\\)/i.exec(t))switch(u=r[2].split(\",\"),r[1]){case\"hsl\":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case\"rgb\":return n(nn(u[0]),nn(u[1]),nn(u[2]))}return(i=oa.get(t))?n(i.r,i.g,i.b):(null!=t&&\"#\"===t.charAt(0)&&(4===t.length?(a=t.charAt(1),a+=a,o=t.charAt(2),o+=o,c=t.charAt(3),c+=c):7===t.length&&(a=t.substring(1,3),o=t.substring(3,5),c=t.substring(5,7)),a=parseInt(a,16),o=parseInt(o,16),c=parseInt(c,16)),n(a,o,c))}function W(t,n,e){var r,u,i=Math.min(t/=255,n/=255,e/=255),a=Math.max(t,n,e),o=a-i,c=(a+i)/2;return o?(u=.5>c?o/(a+i):o/(2-a-i),r=t==a?(n-e)/o+(e>n?6:0):n==a?(e-t)/o+2:(t-n)/o+4,r*=60):u=r=0,en(r,u,c)}function Q(t,n,e){t=tn(t),n=tn(n),e=tn(e);var r=pn((.4124564*t+.3575761*n+.1804375*e)/sa),u=pn((.2126729*t+.7151522*n+.072175*e)/ha),i=pn((.0193339*t+.119192*n+.9503041*e)/ga);return ln(116*u-16,500*(r-u),200*(u-i))}function tn(t){return.04045>=(t/=255)?t/12.92:Math.pow((t+.055)/1.055,2.4)}function nn(t){var n=parseFloat(t);return\"%\"===t.charAt(t.length-1)?Math.round(2.55*n):n}function en(t,n,e){return new rn(t,n,e)}function rn(t,n,e){this.h=t,this.s=n,this.l=e}function un(t,n,e){function r(t){return t>360?t-=360:0>t&&(t+=360),60>t?i+(a-i)*t/60:180>t?a:240>t?i+(a-i)*(240-t)/60:i}function u(t){return Math.round(255*r(t))}var i,a;return t%=360,0>t&&(t+=360),n=0>n?0:n>1?1:n,e=0>e?0:e>1?1:e,a=.5>=e?e*(1+n):e+n-e*n,i=2*e-a,$(u(t+120),u(t),u(t-120))}function an(t,n,e){return new on(t,n,e)}function on(t,n,e){this.h=t,this.c=n,this.l=e}function cn(t,n,e){return ln(e,Math.cos(t*=zi)*n,Math.sin(t)*n)}function ln(t,n,e){return new fn(t,n,e)}function fn(t,n,e){this.l=t,this.a=n,this.b=e}function sn(t,n,e){var r=(t+16)/116,u=r+n/500,i=r-e/200;return u=gn(u)*sa,r=gn(r)*ha,i=gn(i)*ga,$(dn(3.2404542*u-1.5371385*r-.4985314*i),dn(-.969266*u+1.8760108*r+.041556*i),dn(.0556434*u-.2040259*r+1.0572252*i))}function hn(t,n,e){return an(180*(Math.atan2(e,n)/Ti),Math.sqrt(n*n+e*e),t)}function gn(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function pn(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function dn(t){return Math.round(255*(.00304>=t?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function mn(t){return Vi(t,ba),t}function vn(t){return function(){return da(t,this)}}function yn(t){return function(){return ma(t,this)}}function Mn(t,n){function e(){this.removeAttribute(t)}function r(){this.removeAttributeNS(t.space,t.local)}function u(){this.setAttribute(t,n)}function i(){this.setAttributeNS(t.space,t.local,n)}function a(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}function o(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}return t=Ci.ns.qualify(t),null==n?t.local?r:e:\"function\"==typeof n?t.local?o:a:t.local?i:u}function bn(t){return RegExp(\"(?:^|\\\\s+)\"+Ci.requote(t)+\"(?:\\\\s+|$)\",\"g\")}function xn(t,n){function e(){for(var e=-1;u>++e;)t[e](this,n)}function r(){for(var e=-1,r=n.apply(this,arguments);u>++e;)t[e](this,r)}t=t.trim().split(/\\s+/).map(_n);var u=t.length;return\"function\"==typeof n?r:e}function _n(t){var n=bn(t);return function(e,r){if(u=e.classList)return r?u.add(t):u.remove(t);var u=e.className,i=null!=u.baseVal,a=i?u.baseVal:u;r?(n.lastIndex=0,n.test(a)||(a=h(a+\" \"+t),i?u.baseVal=a:e.className=a)):a&&(a=h(a.replace(n,\" \")),i?u.baseVal=a:e.className=a)}}function wn(t,n,e){function r(){this.style.removeProperty(t)}function u(){this.style.setProperty(t,n,e)}function i(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}return null==n?r:\"function\"==typeof n?i:u}function Sn(t,n){function e(){delete this[t]}function r(){this[t]=n}function u(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}return null==n?e:\"function\"==typeof n?u:r}function kn(t){return{__data__:t}}function En(t){return function(){return Ma(this,t)}}function An(t){return arguments.length||(t=Ci.ascending),function(n,e){return!n-!e||t(n.__data__,e.__data__)}}function Nn(t,n,e){function r(){var n=this[i];n&&(this.removeEventListener(t,n,n.$),delete this[i])}function u(){function u(t){var e=Ci.event;Ci.event=t,o[0]=a.__data__;try{n.apply(a,o)}finally{Ci.event=e}}var a=this,o=Ui(arguments);r.call(this),this.addEventListener(t,this[i]=u,u.$=e),u._=n}var i=\"__on\"+t,a=t.indexOf(\".\");return a>0&&(t=t.substring(0,a)),n?u:r}function Tn(t,n){for(var e=0,r=t.length;r>e;e++)for(var u,i=t[e],a=0,o=i.length;o>a;a++)(u=i[a])&&n(u,a,e);return t}function qn(t){return Vi(t,_a),t}function Cn(t,n){return Vi(t,Sa),t.id=n,t}function zn(t,n,e,r){var u=t.__transition__||(t.__transition__={active:0,count:0}),a=u[e];if(!a){var o=r.time;return a=u[e]={tween:new i,event:Ci.dispatch(\"start\",\"end\"),time:o,ease:r.ease,delay:r.delay,duration:r.duration},++u.count,Ci.timer(function(r){function i(r){return u.active>e?l():(u.active=e,h.start.call(t,f,n),a.tween.forEach(function(e,r){(r=r.call(t,f,n))&&d.push(r)}),c(r)||Ci.timer(c,0,o),1)}function c(r){if(u.active!==e)return l();for(var i=(r-g)/p,a=s(i),o=d.length;o>0;)d[--o].call(t,a);return i>=1?(l(),h.end.call(t,f,n),1):void 0}function l(){return--u.count?delete u[e]:delete t.__transition__,1}var f=t.__data__,s=a.ease,h=a.event,g=a.delay,p=a.duration,d=[];return r>=g?i(r):Ci.timer(i,g,o),1},0,o),a}}function Dn(t){return null==t&&(t=\"\"),function(){this.textContent=t}}function Ln(t,n,e,r){var u=t.id;return Tn(t,\"function\"==typeof e?function(t,i,a){t.__transition__[u].tween.set(n,r(e.call(t,t.__data__,i,a)))}:(e=r(e),function(t){t.__transition__[u].tween.set(n,e)}))}function Fn(){for(var t,n=Date.now(),e=Ca;e;)t=n-e.then,t>=e.delay&&(e.flush=e.callback(t)),e=e.next;var r=Hn()-n;r>24?(isFinite(r)&&(clearTimeout(Na),Na=setTimeout(Fn,r)),Aa=0):(Aa=1,za(Fn))}function Hn(){for(var t=null,n=Ca,e=1/0;n;)n.flush?(delete qa[n.callback.id],n=t?t.next=n.next:Ca=n.next):(e=Math.min(e,n.then+n.delay),n=(t=n).next);return e}function jn(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();if(0>Da&&(Fi.scrollX||Fi.scrollY)){e=Ci.select(Li.body).append(\"svg\").style(\"position\",\"absolute\").style(\"top\",0).style(\"left\",0);var u=e[0][0].getScreenCTM();Da=!(u.f||u.e),e.remove()}return Da?(r.x=n.pageX,r.y=n.pageY):(r.x=n.clientX,r.y=n.clientY),r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function Pn(){}function Rn(t){var n=t[0],e=t[t.length-1];return e>n?[n,e]:[e,n]}function On(t){return t.rangeExtent?t.rangeExtent():Rn(t.range())}function Yn(t,n){var e,r=0,u=t.length-1,i=t[r],a=t[u];return i>a&&(e=r,r=u,u=e,e=i,i=a,a=e),(n=n(a-i))&&(t[r]=n.floor(i),t[u]=n.ceil(a)),t}function Un(){return Math}function In(t,n,e,r){function u(){var u=Math.min(t.length,n.length)>2?Gn:Jn,c=r?X:Z;return a=u(t,n,c,e),o=u(n,t,c,Ci.interpolate),i}function i(t){return a(t)}var a,o;return i.invert=function(t){return o(t)},i.domain=function(n){return arguments.length?(t=n.map(Number),u()):t},i.range=function(t){return arguments.length?(n=t,u()):n},i.rangeRound=function(t){return i.range(t).interpolate(Ci.interpolateRound)},i.clamp=function(t){return arguments.length?(r=t,u()):r},i.interpolate=function(t){return arguments.length?(e=t,u()):e},i.ticks=function(n){return Bn(t,n)},i.tickFormat=function(n){return $n(t,n)},i.nice=function(){return Yn(t,Zn),u()},i.copy=function(){return In(t,n,e,r)},u()}function Vn(t,n){return Ci.rebind(t,n,\"range\",\"rangeRound\",\"interpolate\",\"clamp\")}function Zn(t){return t=Math.pow(10,Math.round(Math.log(t)/Math.LN10)-1),t&&{floor:function(n){return Math.floor(n/t)*t},ceil:function(n){return Math.ceil(n/t)*t}}}function Xn(t,n){var e=Rn(t),r=e[1]-e[0],u=Math.pow(10,Math.floor(Math.log(r/n)/Math.LN10)),i=n/r*u;return.15>=i?u*=10:.35>=i?u*=5:.75>=i&&(u*=2),e[0]=Math.ceil(e[0]/u)*u,e[1]=Math.floor(e[1]/u)*u+.5*u,e[2]=u,e}function Bn(t,n){return Ci.range.apply(Ci,Xn(t,n))}function $n(t,n){return Ci.format(\",.\"+Math.max(0,-Math.floor(Math.log(Xn(t,n)[2])/Math.LN10+.01))+\"f\")}function Jn(t,n,e,r){var u=e(t[0],t[1]),i=r(n[0],n[1]);return function(t){return i(u(t))}}function Gn(t,n,e,r){var u=[],i=[],a=0,o=Math.min(t.length,n.length)-1;for(t[o]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());o>=++a;)u.push(e(t[a-1],t[a])),i.push(r(n[a-1],n[a]));return function(n){var e=Ci.bisect(t,n,1,o)-1;return i[e](u[e](n))}}function Kn(t,n){function e(e){return t(n(e))}var r=n.pow;return e.invert=function(n){return r(t.invert(n))},e.domain=function(u){return arguments.length?(n=0>u[0]?Qn:Wn,r=n.pow,t.domain(u.map(n)),e):t.domain().map(r)},e.nice=function(){return t.domain(Yn(t.domain(),Un)),e},e.ticks=function(){var e=Rn(t.domain()),u=[];if(e.every(isFinite)){var i=Math.floor(e[0]),a=Math.ceil(e[1]),o=r(e[0]),c=r(e[1]);if(n===Qn)for(u.push(r(i));a>i++;)for(var l=9;l>0;l--)u.push(r(i)*l);else{for(;a>i;i++)for(var l=1;10>l;l++)u.push(r(i)*l);u.push(r(i))}for(i=0;o>u[i];i++);for(a=u.length;u[a-1]>c;a--);u=u.slice(i,a)}return u},e.tickFormat=function(t,u){if(2>arguments.length&&(u=La),!arguments.length)return u;var i,a=Math.max(.1,t/e.ticks().length),o=n===Qn?(i=-1e-12,Math.floor):(i=1e-12,Math.ceil);return function(t){return a>=t/r(o(n(t)+i))?u(t):\"\"}},e.copy=function(){return Kn(t.copy(),n)},Vn(e,t)}function Wn(t){return Math.log(0>t?0:t)/Math.LN10}function Qn(t){return-Math.log(t>0?0:-t)/Math.LN10}function te(t,n){function e(n){return t(r(n))}var r=ne(n),u=ne(1/n);return e.invert=function(n){return u(t.invert(n))},e.domain=function(n){return arguments.length?(t.domain(n.map(r)),e):t.domain().map(u)},e.ticks=function(t){return Bn(e.domain(),t)},e.tickFormat=function(t){return $n(e.domain(),t)},e.nice=function(){return e.domain(Yn(e.domain(),Zn))},e.exponent=function(t){if(!arguments.length)return n;var i=e.domain();return r=ne(n=t),u=ne(1/n),e.domain(i)},e.copy=function(){return te(t.copy(),n)},Vn(e,t)}function ne(t){return function(n){return 0>n?-Math.pow(-n,t):Math.pow(n,t)}}function ee(t,n){function e(n){return a[((u.get(n)||u.set(n,t.push(n)))-1)%a.length]}function r(n,e){return Ci.range(t.length).map(function(t){return n+e*t})}var u,a,o;return e.domain=function(r){if(!arguments.length)return t;t=[],u=new i;for(var a,o=-1,c=r.length;c>++o;)u.has(a=r[o])||u.set(a,t.push(a));return e[n.t].apply(e,n.a)},e.range=function(t){return arguments.length?(a=t,o=0,n={t:\"range\",a:arguments},e):a},e.rangePoints=function(u,i){2>arguments.length&&(i=0);var c=u[0],l=u[1],f=(l-c)/(Math.max(1,t.length-1)+i);return a=r(2>t.length?(c+l)/2:c+f*i/2,f),o=0,n={t:\"rangePoints\",a:arguments},e},e.rangeBands=function(u,i,c){2>arguments.length&&(i=0),3>arguments.length&&(c=i);var l=u[1]<u[0],f=u[l-0],s=u[1-l],h=(s-f)/(t.length-i+2*c);return a=r(f+h*c,h),l&&a.reverse(),o=h*(1-i),n={t:\"rangeBands\",a:arguments},e},e.rangeRoundBands=function(u,i,c){2>arguments.length&&(i=0),3>arguments.length&&(c=i);var l=u[1]<u[0],f=u[l-0],s=u[1-l],h=Math.floor((s-f)/(t.length-i+2*c)),g=s-f-(t.length-i)*h;return a=r(f+Math.round(g/2),h),l&&a.reverse(),o=Math.round(h*(1-i)),n={t:\"rangeRoundBands\",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return Rn(n.a[0])},e.copy=function(){return ee(t,n)},e.domain(t)}function re(t,n){function e(){var e=0,i=n.length;for(u=[];i>++e;)u[e-1]=Ci.quantile(t,e/i);return r}function r(t){return isNaN(t=+t)?0/0:n[Ci.bisect(u,t)]}var u;return r.domain=function(n){return arguments.length?(t=n.filter(function(t){return!isNaN(t)}).sort(Ci.ascending),e()):t},r.range=function(t){return arguments.length?(n=t,e()):n},r.quantiles=function(){return u},r.copy=function(){return re(t,n)},e()}function ue(t,n,e){function r(n){return e[Math.max(0,Math.min(a,Math.floor(i*(n-t))))]}function u(){return i=e.length/(n-t),a=e.length-1,r}var i,a;return r.domain=function(e){return arguments.length?(t=+e[0],n=+e[e.length-1],u()):[t,n]},r.range=function(t){return arguments.length?(e=t,u()):e},r.copy=function(){return ue(t,n,e)},u()}function ie(t,n){function e(e){return n[Ci.bisect(t,e)]}return e.domain=function(n){return arguments.length?(t=n,e):t},e.range=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return ie(t,n)},e}function ae(t){function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=e.map(n),n):t},n.ticks=function(n){return Bn(t,n)},n.tickFormat=function(n){return $n(t,n)},n.copy=function(){return ae(t)},n}function oe(t){return t.innerRadius}function ce(t){return t.outerRadius}function le(t){return t.startAngle}function fe(t){return t.endAngle}function se(t){function n(n){function a(){f.push(\"M\",i(t(s),l))}for(var o,f=[],s=[],h=-1,g=n.length,p=c(e),d=c(r);g>++h;)u.call(this,o=n[h],h)?s.push([+p.call(this,o,h),+d.call(this,o,h)]):s.length&&(a(),s=[]);return s.length&&a(),f.length?f.join(\"\"):null}var e=he,r=ge,u=o,i=pe,a=i.key,l=.7;return n.x=function(t){return arguments.length?(e=t,n):e},n.y=function(t){return arguments.length?(r=t,n):r},n.defined=function(t){return arguments.length?(u=t,n):u},n.interpolate=function(t){return arguments.length?(a=\"function\"==typeof t?i=t:(i=Ya.get(t)||pe).key,n):a},n.tension=function(t){return arguments.length?(l=t,n):l},n}function he(t){return t[0]}function ge(t){return t[1]}function pe(t){return t.join(\"L\")}function de(t){return pe(t)+\"Z\"}function me(t){for(var n=0,e=t.length,r=t[0],u=[r[0],\",\",r[1]];e>++n;)u.push(\"V\",(r=t[n])[1],\"H\",r[0]);return u.join(\"\")}function ve(t){for(var n=0,e=t.length,r=t[0],u=[r[0],\",\",r[1]];e>++n;)u.push(\"H\",(r=t[n])[0],\"V\",r[1]);return u.join(\"\")}function ye(t,n){return 4>t.length?pe(t):t[1]+xe(t.slice(1,t.length-1),_e(t,n))}function Me(t,n){return 3>t.length?pe(t):t[0]+xe((t.push(t[0]),t),_e([t[t.length-2]].concat(t,[t[1]]),n))}function be(t,n){return 3>t.length?pe(t):t[0]+xe(t,_e(t,n))}function xe(t,n){if(1>n.length||t.length!=n.length&&t.length!=n.length+2)return pe(t);var e=t.length!=n.length,r=\"\",u=t[0],i=t[1],a=n[0],o=a,c=1;if(e&&(r+=\"Q\"+(i[0]-2*a[0]/3)+\",\"+(i[1]-2*a[1]/3)+\",\"+i[0]+\",\"+i[1],u=t[1],c=2),n.length>1){o=n[1],i=t[c],c++,r+=\"C\"+(u[0]+a[0])+\",\"+(u[1]+a[1])+\",\"+(i[0]-o[0])+\",\"+(i[1]-o[1])+\",\"+i[0]+\",\"+i[1];for(var l=2;n.length>l;l++,c++)i=t[c],o=n[l],r+=\"S\"+(i[0]-o[0])+\",\"+(i[1]-o[1])+\",\"+i[0]+\",\"+i[1]}if(e){var f=t[c];r+=\"Q\"+(i[0]+2*o[0]/3)+\",\"+(i[1]+2*o[1]/3)+\",\"+f[0]+\",\"+f[1]}return r}function _e(t,n){for(var e,r=[],u=(1-n)/2,i=t[0],a=t[1],o=1,c=t.length;c>++o;)e=i,i=a,a=t[o],r.push([u*(a[0]-e[0]),u*(a[1]-e[1])]);return r}function we(t){if(3>t.length)return pe(t);var n=1,e=t.length,r=t[0],u=r[0],i=r[1],a=[u,u,u,(r=t[1])[0]],o=[i,i,i,r[1]],c=[u,\",\",i];for(Ne(c,a,o);e>++n;)r=t[n],a.shift(),a.push(r[0]),o.shift(),o.push(r[1]),Ne(c,a,o);for(n=-1;2>++n;)a.shift(),a.push(r[0]),o.shift(),o.push(r[1]),Ne(c,a,o);return c.join(\"\")}function Se(t){if(4>t.length)return pe(t);for(var n,e=[],r=-1,u=t.length,i=[0],a=[0];3>++r;)n=t[r],i.push(n[0]),a.push(n[1]);for(e.push(Ae(Va,i)+\",\"+Ae(Va,a)),--r;u>++r;)n=t[r],i.shift(),i.push(n[0]),a.shift(),a.push(n[1]),Ne(e,i,a);return e.join(\"\")}function ke(t){for(var n,e,r=-1,u=t.length,i=u+4,a=[],o=[];4>++r;)e=t[r%u],a.push(e[0]),o.push(e[1]);for(n=[Ae(Va,a),\",\",Ae(Va,o)],--r;i>++r;)e=t[r%u],a.shift(),a.push(e[0]),o.shift(),o.push(e[1]),Ne(n,a,o);return n.join(\"\")}function Ee(t,n){var e=t.length-1;if(e)for(var r,u,i=t[0][0],a=t[0][1],o=t[e][0]-i,c=t[e][1]-a,l=-1;e>=++l;)r=t[l],u=l/e,r[0]=n*r[0]+(1-n)*(i+u*o),r[1]=n*r[1]+(1-n)*(a+u*c);return we(t)}function Ae(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function Ne(t,n,e){t.push(\"C\",Ae(Ua,n),\",\",Ae(Ua,e),\",\",Ae(Ia,n),\",\",Ae(Ia,e),\",\",Ae(Va,n),\",\",Ae(Va,e))}function Te(t,n){return(n[1]-t[1])/(n[0]-t[0])}function qe(t){for(var n=0,e=t.length-1,r=[],u=t[0],i=t[1],a=r[0]=Te(u,i);e>++n;)r[n]=(a+(a=Te(u=i,i=t[n+1])))/2;return r[n]=a,r}function Ce(t){for(var n,e,r,u,i=[],a=qe(t),o=-1,c=t.length-1;c>++o;)n=Te(t[o],t[o+1]),1e-6>Math.abs(n)?a[o]=a[o+1]=0:(e=a[o]/n,r=a[o+1]/n,u=e*e+r*r,u>9&&(u=3*n/Math.sqrt(u),a[o]=u*e,a[o+1]=u*r));for(o=-1;c>=++o;)u=(t[Math.min(c,o+1)][0]-t[Math.max(0,o-1)][0])/(6*(1+a[o]*a[o])),i.push([u||0,a[o]*u||0]);return i}function ze(t){return 3>t.length?pe(t):t[0]+xe(t,Ce(t))}function De(t){for(var n,e,r,u=-1,i=t.length;i>++u;)n=t[u],e=n[0],r=n[1]+Ra,n[0]=e*Math.cos(r),n[1]=e*Math.sin(r);return t}function Le(t){function n(n){function o(){m.push(\"M\",l(t(y),g),h,s(t(v.reverse()),g),\"Z\")}for(var f,p,d,m=[],v=[],y=[],M=-1,b=n.length,x=c(e),_=c(u),w=e===r?function(){return p}:c(r),S=u===i?function(){return d}:c(i);b>++M;)a.call(this,f=n[M],M)?(v.push([p=+x.call(this,f,M),d=+_.call(this,f,M)]),y.push([+w.call(this,f,M),+S.call(this,f,M)])):v.length&&(o(),v=[],y=[]);return v.length&&o(),m.length?m.join(\"\"):null}var e=he,r=he,u=0,i=ge,a=o,l=pe,f=l.key,s=l,h=\"L\",g=.7;return n.x=function(t){return arguments.length?(e=r=t,n):r},n.x0=function(t){return arguments.length?(e=t,n):e},n.x1=function(t){return arguments.length?(r=t,n):r},n.y=function(t){return arguments.length?(u=i=t,n):i},n.y0=function(t){return arguments.length?(u=t,n):u},n.y1=function(t){return arguments.length?(i=t,n):i},n.defined=function(t){return arguments.length?(a=t,n):a},n.interpolate=function(t){return arguments.length?(f=\"function\"==typeof t?l=t:(l=Ya.get(t)||pe).key,s=l.reverse||l,h=l.closed?\"M\":\"L\",n):f},n.tension=function(t){return arguments.length?(g=t,n):g},n}function Fe(t){return t.radius}function He(t){return[t.x,t.y]}function je(t){return function(){var n=t.apply(this,arguments),e=n[0],r=n[1]+Ra;return[e*Math.cos(r),e*Math.sin(r)]}}function Pe(){return 64}function Re(){return\"circle\"}function Oe(t){var n=Math.sqrt(t/Ti);return\"M0,\"+n+\"A\"+n+\",\"+n+\" 0 1,1 0,\"+-n+\"A\"+n+\",\"+n+\" 0 1,1 0,\"+n+\"Z\"}function Ye(t,n){t.attr(\"transform\",function(t){return\"translate(\"+n(t)+\",0)\"})}function Ue(t,n){t.attr(\"transform\",function(t){return\"translate(0,\"+n(t)+\")\"})}function Ie(t,n,e){if(r=[],e&&n.length>1){for(var r,u,i,a=Rn(t.domain()),o=-1,c=n.length,l=(n[1]-n[0])/++e;c>++o;)for(u=e;--u>0;)(i=+n[o]-u*l)>=a[0]&&r.push(i);for(--o,u=0;e>++u&&(i=+n[o]+u*l)<a[1];)r.push(i)}return r}function Ve(t){for(var n=t.source,e=t.target,r=Xe(n,e),u=[n];n!==r;)n=n.parent,u.push(n);for(var i=u.length;e!==r;)u.splice(i,0,e),e=e.parent;return u}function Ze(t){for(var n=[],e=t.parent;null!=e;)n.push(t),t=e,e=e.parent;return n.push(t),n}function Xe(t,n){if(t===n)return t;for(var e=Ze(t),r=Ze(n),u=e.pop(),i=r.pop(),a=null;u===i;)a=u,u=e.pop(),i=r.pop();return a}function Be(t){t.fixed|=2}function $e(t){t.fixed&=-7}function Je(t){t.fixed|=4,t.px=t.x,t.py=t.y}function Ge(t){t.fixed&=-5}function Ke(t,n,e){var r=0,u=0;if(t.charge=0,!t.leaf)for(var i,a=t.nodes,o=a.length,c=-1;o>++c;)i=a[c],null!=i&&(Ke(i,n,e),t.charge+=i.charge,r+=i.charge*i.cx,u+=i.charge*i.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var l=n*e[t.point.index];t.charge+=t.pointCharge=l,r+=l*t.point.x,u+=l*t.point.y}t.cx=r/t.charge,t.cy=u/t.charge}function We(t){return t.x}function Qe(t){return t.y}function tr(t,n,e){t.y0=n,t.y=e}function nr(t){return Ci.range(t.length)}function er(t){for(var n=-1,e=t[0].length,r=[];e>++n;)r[n]=0;return r}function rr(t){for(var n,e=1,r=0,u=t[0][1],i=t.length;i>e;++e)(n=t[e][1])>u&&(r=e,u=n);return r}function ur(t){return t.reduce(ir,0)}function ir(t,n){return t+n[1]}function ar(t,n){return or(t,Math.ceil(Math.log(n.length)/Math.LN2+1))}function or(t,n){for(var e=-1,r=+t[0],u=(t[1]-r)/n,i=[];n>=++e;)i[e]=u*e+r;return i}function cr(t){return[Ci.min(t),Ci.max(t)]}function lr(t,n){return Ci.rebind(t,n,\"sort\",\"children\",\"value\"),t.nodes=t,t.links=gr,t}function fr(t){return t.children}function sr(t){return t.value}function hr(t,n){return n.value-t.value}function gr(t){return Ci.merge(t.map(function(t){return(t.children||[]).map(function(n){return{source:t,target:n}})}))}function pr(t,n){return t.value-n.value}function dr(t,n){var e=t._pack_next;t._pack_next=n,n._pack_prev=t,n._pack_next=e,e._pack_prev=n}function mr(t,n){t._pack_next=n,n._pack_prev=t}function vr(t,n){var e=n.x-t.x,r=n.y-t.y,u=t.r+n.r;return u*u-e*e-r*r>.001}function yr(t){function n(t){f=Math.min(t.x-t.r,f),s=Math.max(t.x+t.r,s),h=Math.min(t.y-t.r,h),g=Math.max(t.y+t.r,g)}if((e=t.children)&&(l=e.length)){var e,r,u,i,a,o,c,l,f=1/0,s=-1/0,h=1/0,g=-1/0;if(e.forEach(Mr),r=e[0],r.x=-r.r,r.y=0,n(r),l>1&&(u=e[1],u.x=u.r,u.y=0,n(u),l>2))for(i=e[2],_r(r,u,i),n(i),dr(r,i),r._pack_prev=i,dr(i,u),u=r._pack_next,a=3;l>a;a++){_r(r,u,i=e[a]);var p=0,d=1,m=1;for(o=u._pack_next;o!==u;o=o._pack_next,d++)if(vr(o,i)){p=1;break}if(1==p)for(c=r._pack_prev;c!==o._pack_prev&&!vr(c,i);c=c._pack_prev,m++);p?(m>d||d==m&&u.r<r.r?mr(r,u=o):mr(r=c,u),a--):(dr(r,i),u=i,n(i))}var v=(f+s)/2,y=(h+g)/2,M=0;for(a=0;l>a;a++)i=e[a],i.x-=v,i.y-=y,M=Math.max(M,i.r+Math.sqrt(i.x*i.x+i.y*i.y));t.r=M,e.forEach(br)}}function Mr(t){t._pack_next=t._pack_prev=t}function br(t){delete t._pack_next,delete t._pack_prev}function xr(t,n,e,r){var u=t.children;if(t.x=n+=r*t.x,t.y=e+=r*t.y,t.r*=r,u)for(var i=-1,a=u.length;a>++i;)xr(u[i],n,e,r)}function _r(t,n,e){var r=t.r+e.r,u=n.x-t.x,i=n.y-t.y;if(r&&(u||i)){var a=n.r+e.r,o=u*u+i*i;a*=a,r*=r;var c=.5+(r-a)/(2*o),l=Math.sqrt(Math.max(0,2*a*(r+o)-(r-=o)*r-a*a))/(2*o);e.x=t.x+c*u+l*i,e.y=t.y+c*i-l*u}else e.x=t.x+r,e.y=t.y}function wr(t){return 1+Ci.max(t,function(t){return t.y})}function Sr(t){return t.reduce(function(t,n){return t+n.x},0)/t.length}function kr(t){var n=t.children;return n&&n.length?kr(n[0]):t}function Er(t){var n,e=t.children;return e&&(n=e.length)?Er(e[n-1]):t}function Ar(t,n){return t.parent==n.parent?1:2}function Nr(t){var n=t.children;return n&&n.length?n[0]:t._tree.thread}function Tr(t){var n,e=t.children;return e&&(n=e.length)?e[n-1]:t._tree.thread}function qr(t,n){var e=t.children;if(e&&(u=e.length))for(var r,u,i=-1;u>++i;)n(r=qr(e[i],n),t)>0&&(t=r);return t}function Cr(t,n){return t.x-n.x}function zr(t,n){return n.x-t.x}function Dr(t,n){return t.depth-n.depth}function Lr(t,n){function e(t,r){var u=t.children;if(u&&(a=u.length))for(var i,a,o=null,c=-1;a>++c;)i=u[c],e(i,o),o=i;n(t,r)}e(t,null)}function Fr(t){for(var n,e=0,r=0,u=t.children,i=u.length;--i>=0;)n=u[i]._tree,n.prelim+=e,n.mod+=e,e+=n.shift+(r+=n.change)}function Hr(t,n,e){t=t._tree,n=n._tree;var r=e/(n.number-t.number);t.change+=r,n.change-=r,n.shift+=e,n.prelim+=e,n.mod+=e}function jr(t,n,e){return t._tree.ancestor.parent==n.parent?t._tree.ancestor:e}function Pr(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function Rr(t,n){var e=t.x+n[3],r=t.y+n[0],u=t.dx-n[1]-n[3],i=t.dy-n[0]-n[2];return 0>u&&(e+=u/2,u=0),0>i&&(r+=i/2,i=0),{x:e,y:r,dx:u,dy:i}}function Or(t,n){function e(t,e){return Ci.xhr(t,n,e).response(r)}function r(t){return e.parse(t.responseText)}function u(n){return n.map(i).join(t)}function i(t){return a.test(t)?'\"'+t.replace(/\\\"/g,'\"\"')+'\"':t}var a=RegExp('[\"'+t+\"\\n]\"),o=t.charCodeAt(0);return e.parse=function(t){var n;return e.parseRows(t,function(t){return n?n(t):(n=Function(\"d\",\"return {\"+t.map(function(t,n){return JSON.stringify(t)+\": d[\"+n+\"]\"}).join(\",\")+\"}\"),void 0)})},e.parseRows=function(t,n){function e(){if(f>=l)return a;if(u)return u=!1,i;var n=f;if(34===t.charCodeAt(n)){for(var e=n;l>e++;)if(34===t.charCodeAt(e)){if(34!==t.charCodeAt(e+1))break;++e}f=e+2;var r=t.charCodeAt(e+1);return 13===r?(u=!0,10===t.charCodeAt(e+2)&&++f):10===r&&(u=!0),t.substring(n+1,e).replace(/\"\"/g,'\"')}for(;l>f;){var r=t.charCodeAt(f++),c=1;if(10===r)u=!0;else if(13===r)u=!0,10===t.charCodeAt(f)&&(++f,++c);else if(r!==o)continue;return t.substring(n,f-c)}return t.substring(n)}for(var r,u,i={},a={},c=[],l=t.length,f=0,s=0;(r=e())!==a;){for(var h=[];r!==i&&r!==a;)h.push(r),r=e();(!n||(h=n(h,s++)))&&c.push(h)}return c},e.format=function(t){return t.map(u).join(\"\\n\")},e}function Yr(t,n){oo.hasOwnProperty(t.type)&&oo[t.type](t,n)}function Ur(t,n,e){var r,u=-1,i=t.length-e;for(n.lineStart();i>++u;)r=t[u],n.point(r[0],r[1]);n.lineEnd()}function Ir(t,n){var e=-1,r=t.length;for(n.polygonStart();r>++e;)Ur(t[e],n,1);n.polygonEnd()}function Vr(t){return[Math.atan2(t[1],t[0]),Math.asin(Math.max(-1,Math.min(1,t[2])))]}function Zr(t,n){return qi>Math.abs(t[0]-n[0])&&qi>Math.abs(t[1]-n[1])}function Xr(t){var n=t[0],e=t[1],r=Math.cos(e);return[r*Math.cos(n),r*Math.sin(n),Math.sin(e)]}function Br(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function $r(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Jr(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Gr(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Kr(t){var n=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function Wr(t){function n(n){function r(e,r){e=t(e,r),n.point(e[0],e[1])}function i(){f=0/0,d.point=a,n.lineStart()}function a(r,i){var a=Xr([r,i]),o=t(r,i);e(f,s,l,h,g,p,f=o[0],s=o[1],l=r,h=a[0],g=a[1],p=a[2],u,n),n.point(f,s)}function o(){d.point=r,n.lineEnd()}function c(){var t,r,c,m,v,y,M;i(),d.point=function(n,e){a(t=n,r=e),c=f,m=s,v=h,y=g,M=p,d.point=a},d.lineEnd=function(){e(f,s,l,h,g,p,c,m,t,v,y,M,u,n),d.lineEnd=o,o()}}var l,f,s,h,g,p,d={point:r,lineStart:i,lineEnd:o,polygonStart:function(){n.polygonStart(),d.lineStart=c},polygonEnd:function(){n.polygonEnd(),d.lineStart=i}};return d}function e(n,u,i,a,o,c,l,f,s,h,g,p,d,m){var v=l-n,y=f-u,M=v*v+y*y;if(M>4*r&&d--){var b=a+h,x=o+g,_=c+p,w=Math.sqrt(b*b+x*x+_*_),S=Math.asin(_/=w),k=qi>Math.abs(Math.abs(_)-1)?(i+s)/2:Math.atan2(x,b),E=t(k,S),A=E[0],N=E[1],T=A-n,q=N-u,C=y*T-v*q;(C*C/M>r||Math.abs((v*T+y*q)/M-.5)>.3)&&(e(n,u,i,a,o,c,A,N,k,b/=w,x/=w,_,d,m),m.point(A,N),e(A,N,k,b,x,_,l,f,s,h,g,p,d,m))}}var r=.5,u=16;return n.precision=function(t){return arguments.length?(u=(r=t*t)>0&&16,n):Math.sqrt(r)},n}function Qr(t,n){function e(t,n){var e=Math.sqrt(i-2*u*Math.sin(n))/u;return[e*Math.sin(t*=u),a-e*Math.cos(t)]}var r=Math.sin(t),u=(r+Math.sin(n))/2,i=1+r*(2*u-r),a=Math.sqrt(i)/u;return e.invert=function(t,n){var e=a-n;return[Math.atan2(t,e)/u,Math.asin((i-(t*t+e*e)*u*u)/(2*u))]},e}function tu(t){function n(t,n){r>t&&(r=t),t>i&&(i=t),u>n&&(u=n),n>a&&(a=n)}function e(){o.point=o.lineEnd=Pn}var r,u,i,a,o={point:n,lineStart:Pn,lineEnd:Pn,polygonStart:function(){o.lineEnd=e},polygonEnd:function(){o.point=n}};return function(n){return a=i=-(r=u=1/0),Ci.geo.stream(n,t(o)),[[r,u],[i,a]]}}function nu(t,n){if(!fo){++so,t*=zi;var e=Math.cos(n*=zi);ho+=(e*Math.cos(t)-ho)/so,go+=(e*Math.sin(t)-go)/so,po+=(Math.sin(n)-po)/so}}function eu(){var t,n;fo=1,ru(),fo=2;var e=mo.point;mo.point=function(r,u){e(t=r,n=u)},mo.lineEnd=function(){mo.point(t,n),uu(),mo.lineEnd=uu}}function ru(){function t(t,u){t*=zi;var i=Math.cos(u*=zi),a=i*Math.cos(t),o=i*Math.sin(t),c=Math.sin(u),l=Math.atan2(Math.sqrt((l=e*c-r*o)*l+(l=r*a-n*c)*l+(l=n*o-e*a)*l),n*a+e*o+r*c);so+=l,ho+=l*(n+(n=a)),go+=l*(e+(e=o)),po+=l*(r+(r=c))}var n,e,r;fo>1||(1>fo&&(fo=1,so=ho=go=po=0),mo.point=function(u,i){u*=zi;var a=Math.cos(i*=zi);n=a*Math.cos(u),e=a*Math.sin(u),r=Math.sin(i),mo.point=t})}function uu(){mo.point=nu}function iu(t,n){var e=Math.cos(t),r=Math.sin(t);return function(u,i,a,o){null!=u?(u=au(e,u),i=au(e,i),(a>0?i>u:u>i)&&(u+=2*a*Ti)):(u=t+2*a*Ti,i=t);for(var c,l=a*n,f=u;a>0?f>i:i>f;f-=l)o.point((c=Vr([e,-r*Math.cos(f),-r*Math.sin(f)]))[0],c[1])}}function au(t,n){var e=Xr(n);e[0]-=t,Kr(e);var r=Math.acos(Math.max(-1,Math.min(1,-e[1])));return((0>-e[2]?-r:r)+2*Math.PI-qi)%(2*Math.PI)}function ou(t,n,e){return function(r){function u(n,e){t(n,e)&&r.point(n,e)}function i(t,n){m.point(t,n)}function a(){v.point=i,m.lineStart()}function o(){v.point=u,m.lineEnd()}function c(t,n){M.point(t,n),d.push([t,n])}function l(){M.lineStart(),d=[]}function f(){c(d[0][0],d[0][1]),M.lineEnd();var t,n=M.clean(),e=y.buffer(),u=e.length;if(!u)return p=!0,g+=gu(d,-1),d=null,void 0;if(d=null,1&n){t=e[0],h+=gu(t,1);var i,u=t.length-1,a=-1;for(r.lineStart();u>++a;)r.point((i=t[a])[0],i[1]);return r.lineEnd(),void 0}u>1&&2&n&&e.push(e.pop().concat(e.shift())),s.push(e.filter(su))}var s,h,g,p,d,m=n(r),v={point:u,lineStart:a,lineEnd:o,polygonStart:function(){v.point=c,v.lineStart=l,v.lineEnd=f,p=!1,g=h=0,s=[],r.polygonStart()},polygonEnd:function(){v.point=u,v.lineStart=a,v.lineEnd=o,s=Ci.merge(s),s.length?cu(s,e,r):(-qi>h||p&&-qi>g)&&(r.lineStart(),e(null,null,1,r),r.lineEnd()),r.polygonEnd(),s=null},sphere:function(){r.polygonStart(),r.lineStart(),e(null,null,1,r),r.lineEnd(),r.polygonEnd()}},y=hu(),M=n(y);return v}}function cu(t,n,e){var r=[],u=[];if(t.forEach(function(t){if(!(1>=(n=t.length))){var n,i=t[0],a=t[n-1];if(Zr(i,a)){e.lineStart();\n    2: for(var o=0;n>o;++o)e.point((i=t[o])[0],i[1]);return e.lineEnd(),void 0}var c={point:i,points:t,other:null,visited:!1,entry:!0,subject:!0},l={point:i,points:[i],other:c,visited:!1,entry:!1,subject:!1};c.other=l,r.push(c),u.push(l),c={point:a,points:[a],other:null,visited:!1,entry:!1,subject:!0},l={point:a,points:[a],other:c,visited:!1,entry:!0,subject:!1},c.other=l,r.push(c),u.push(l)}}),u.sort(fu),lu(r),lu(u),r.length)for(var i,a,o,c=r[0];;){for(i=c;i.visited;)if((i=i.next)===c)return;a=i.points,e.lineStart();do{if(i.visited=i.other.visited=!0,i.entry){if(i.subject)for(var l=0;a.length>l;l++)e.point((o=a[l])[0],o[1]);else n(i.point,i.next.point,1,e);i=i.next}else{if(i.subject){a=i.prev.points;for(var l=a.length;--l>=0;)e.point((o=a[l])[0],o[1])}else n(i.point,i.prev.point,-1,e);i=i.prev}i=i.other,a=i.points}while(!i.visited);e.lineEnd()}}function lu(t){if(n=t.length){for(var n,e,r=0,u=t[0];n>++r;)u.next=e=t[r],e.prev=u,u=e;u.next=e=t[0],e.prev=u}}function fu(t,n){return(0>(t=t.point)[0]?t[1]-Ti/2-qi:Ti/2-t[1])-(0>(n=n.point)[0]?n[1]-Ti/2-qi:Ti/2-n[1])}function su(t){return t.length>1}function hu(){var t,n=[];return{lineStart:function(){n.push(t=[])},point:function(n,e){t.push([n,e])},lineEnd:Pn,buffer:function(){var e=n;return n=[],t=null,e}}}function gu(t,n){if(!(e=t.length))return 0;for(var e,r,u,i=0,a=0,o=t[0],c=o[0],l=o[1],f=Math.cos(l),s=Math.atan2(n*Math.sin(c)*f,Math.sin(l)),h=1-n*Math.cos(c)*f,g=s;e>++i;)o=t[i],f=Math.cos(l=o[1]),r=Math.atan2(n*Math.sin(c=o[0])*f,Math.sin(l)),u=1-n*Math.cos(c)*f,qi>Math.abs(h-2)&&qi>Math.abs(u-2)||(qi>Math.abs(u)||qi>Math.abs(h)||(qi>Math.abs(Math.abs(r-s)-Ti)?u+h>2&&(a+=4*(r-s)):a+=qi>Math.abs(h-2)?4*(r-g):((3*Ti+r-s)%(2*Ti)-Ti)*(h+u)),g=s,s=r,h=u);return a}function pu(t){var n,e=0/0,r=0/0,u=0/0;return{lineStart:function(){t.lineStart(),n=1},point:function(i,a){var o=i>0?Ti:-Ti,c=Math.abs(i-e);qi>Math.abs(c-Ti)?(t.point(e,r=(r+a)/2>0?Ti/2:-Ti/2),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(i,r),n=0):u!==o&&c>=Ti&&(qi>Math.abs(e-u)&&(e-=u*qi),qi>Math.abs(i-o)&&(i-=o*qi),r=du(e,r,i,a),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(o,r),n=0),t.point(e=i,r=a),u=o},lineEnd:function(){t.lineEnd(),e=r=0/0},clean:function(){return 2-n}}}function du(t,n,e,r){var u,i,a=Math.sin(t-e);return Math.abs(a)>qi?Math.atan((Math.sin(n)*(i=Math.cos(r))*Math.sin(e)-Math.sin(r)*(u=Math.cos(n))*Math.sin(t))/(u*i*a)):(n+r)/2}function mu(t,n,e,r){var u;if(null==t)u=e*Ti/2,r.point(-Ti,u),r.point(0,u),r.point(Ti,u),r.point(Ti,0),r.point(Ti,-u),r.point(0,-u),r.point(-Ti,-u),r.point(-Ti,0),r.point(-Ti,u);else if(Math.abs(t[0]-n[0])>qi){var i=(t[0]<n[0]?1:-1)*Ti;u=e*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(n[0],n[1])}function vu(t){function n(t,n){return Math.cos(t)*Math.cos(n)>i}function e(t){var e,u,i,a;return{lineStart:function(){i=u=!1,a=1},point:function(o,c){var l,f=[o,c],s=n(o,c);!e&&(i=u=s)&&t.lineStart(),s!==u&&(l=r(e,f),(Zr(e,l)||Zr(f,l))&&(f[0]+=qi,f[1]+=qi,s=n(f[0],f[1]))),s!==u&&(a=0,(u=s)?(t.lineStart(),l=r(f,e),t.point(l[0],l[1])):(l=r(e,f),t.point(l[0],l[1]),t.lineEnd()),e=l),!s||e&&Zr(e,f)||t.point(f[0],f[1]),e=f},lineEnd:function(){u&&t.lineEnd(),e=null},clean:function(){return a|(i&&u)<<1}}}function r(t,n){var e=Xr(t,0),r=Xr(n,0),u=[1,0,0],a=$r(e,r),o=Br(a,a),c=a[0],l=o-c*c;if(!l)return t;var f=i*o/l,s=-i*c/l,h=$r(u,a),g=Gr(u,f),p=Gr(a,s);Jr(g,p);var d=h,m=Br(g,d),v=Br(d,d),y=Math.sqrt(m*m-v*(Br(g,g)-1)),M=Gr(d,(-m-y)/v);return Jr(M,g),Vr(M)}var u=t*zi,i=Math.cos(u),a=iu(u,6*zi);return ou(n,e,a)}function yu(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return e=n.invert(e,r),e&&t.invert(e[0],e[1])}),e}function Mu(t,n){return[t,n]}function bu(t,n,e){var r=Ci.range(t,n-qi,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function xu(t,n,e){var r=Ci.range(t,n-qi,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function _u(t){return(t=Math.sin(t/2))*t}function wu(t,n,e,r){var u=Math.cos(n),i=Math.sin(n),a=Math.cos(r),o=Math.sin(r),c=u*Math.cos(t),l=u*Math.sin(t),f=a*Math.cos(e),s=a*Math.sin(e),h=2*Math.asin(Math.sqrt(_u(r-n)+u*a*_u(e-t))),g=1/Math.sin(h),p=h?function(t){var n=Math.sin(t*=h)*g,e=Math.sin(h-t)*g,r=e*c+n*f,u=e*l+n*s,a=e*i+n*o;return[Math.atan2(u,r)*Di,Math.atan2(a,Math.sqrt(r*r+u*u))*Di]}:function(){return[t*Di,n*Di]};return p.distance=h,p}function Su(t,n){return[t/(2*Ti),Math.max(-.5,Math.min(.5,Math.log(Math.tan(Ti/4+n/2))/(2*Ti)))]}function ku(t){return\"m0,\"+t+\"a\"+t+\",\"+t+\" 0 1,1 0,\"+-2*t+\"a\"+t+\",\"+t+\" 0 1,1 0,\"+2*t+\"z\"}function Eu(t){var n=Wr(function(n,e){return t([n*Di,e*Di])});return function(t){return t=n(t),{point:function(n,e){t.point(n*zi,e*zi)},sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}}function Au(){function t(t,n){a.push(\"M\",t,\",\",n,i)}function n(t,n){a.push(\"M\",t,\",\",n),o.point=e}function e(t,n){a.push(\"L\",t,\",\",n)}function r(){o.point=t}function u(){a.push(\"Z\")}var i=ku(4.5),a=[],o={point:t,lineStart:function(){o.point=n},lineEnd:r,polygonStart:function(){o.lineEnd=u},polygonEnd:function(){o.lineEnd=r,o.point=t},pointRadius:function(t){return i=ku(t),o},result:function(){if(a.length){var t=a.join(\"\");return a=[],t}}};return o}function Nu(t){function n(n,e){t.moveTo(n,e),t.arc(n,e,a,0,2*Ti)}function e(n,e){t.moveTo(n,e),o.point=r}function r(n,e){t.lineTo(n,e)}function u(){o.point=n}function i(){t.closePath()}var a=4.5,o={point:n,lineStart:function(){o.point=e},lineEnd:u,polygonStart:function(){o.lineEnd=i},polygonEnd:function(){o.lineEnd=u,o.point=n},pointRadius:function(t){return a=t,o},result:Pn};return o}function Tu(){function t(t,n){xo+=u*t-r*n,r=t,u=n}var n,e,r,u;_o.point=function(i,a){_o.point=t,n=r=i,e=u=a},_o.lineEnd=function(){t(n,e)}}function qu(t,n){fo||(ho+=t,go+=n,++po)}function Cu(){function t(t,r){var u=t-n,i=r-e,a=Math.sqrt(u*u+i*i);ho+=a*(n+t)/2,go+=a*(e+r)/2,po+=a,n=t,e=r}var n,e;if(1!==fo){if(!(1>fo))return;fo=1,ho=go=po=0}wo.point=function(r,u){wo.point=t,n=r,e=u}}function zu(){wo.point=qu}function Du(){function t(t,n){var e=u*t-r*n;ho+=e*(r+t),go+=e*(u+n),po+=3*e,r=t,u=n}var n,e,r,u;2>fo&&(fo=2,ho=go=po=0),wo.point=function(i,a){wo.point=t,n=r=i,e=u=a},wo.lineEnd=function(){t(n,e)}}function Lu(){function t(t,n){t*=zi,n=n*zi/2+Ti/4;var e=t-r,a=Math.cos(n),o=Math.sin(n),c=i*o,l=ko,f=Eo,s=u*a+c*Math.cos(e),h=c*Math.sin(e);ko=l*s-f*h,Eo=f*s+l*h,r=t,u=a,i=o}var n,e,r,u,i;Ao.point=function(a,o){Ao.point=t,r=(n=a)*zi,u=Math.cos(o=(e=o)*zi/2+Ti/4),i=Math.sin(o)},Ao.lineEnd=function(){t(n,e)}}function Fu(t){return Hu(function(){return t})()}function Hu(t){function n(t){return t=a(t[0]*zi,t[1]*zi),[t[0]*f+o,c-t[1]*f]}function e(t){return t=a.invert((t[0]-o)/f,(c-t[1])/f),t&&[t[0]*Di,t[1]*Di]}function r(){a=yu(i=Pu(d,m,v),u);var t=u(g,p);return o=s-t[0]*f,c=h+t[1]*f,n}var u,i,a,o,c,l=Wr(function(t,n){return t=u(t,n),[t[0]*f+o,c-t[1]*f]}),f=150,s=480,h=250,g=0,p=0,d=0,m=0,v=0,y=vo,M=null;return n.stream=function(t){return ju(i,y(l(t)))},n.clipAngle=function(t){return arguments.length?(y=null==t?(M=t,vo):vu(M=+t),n):M},n.scale=function(t){return arguments.length?(f=+t,r()):f},n.translate=function(t){return arguments.length?(s=+t[0],h=+t[1],r()):[s,h]},n.center=function(t){return arguments.length?(g=t[0]%360*zi,p=t[1]%360*zi,r()):[g*Di,p*Di]},n.rotate=function(t){return arguments.length?(d=t[0]%360*zi,m=t[1]%360*zi,v=t.length>2?t[2]%360*zi:0,r()):[d*Di,m*Di,v*Di]},Ci.rebind(n,l,\"precision\"),function(){return u=t.apply(this,arguments),n.invert=u.invert&&e,r()}}function ju(t,n){return{point:function(e,r){r=t(e*zi,r*zi),e=r[0],n.point(e>Ti?e-2*Ti:-Ti>e?e+2*Ti:e,r[1])},sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function Pu(t,n,e){return t?n||e?yu(Ou(t),Yu(n,e)):Ou(t):n||e?Yu(n,e):Mu}function Ru(t){return function(n,e){return n+=t,[n>Ti?n-2*Ti:-Ti>n?n+2*Ti:n,e]}}function Ou(t){var n=Ru(t);return n.invert=Ru(-t),n}function Yu(t,n){function e(t,n){var e=Math.cos(n),o=Math.cos(t)*e,c=Math.sin(t)*e,l=Math.sin(n),f=l*r+o*u;return[Math.atan2(c*i-f*a,o*r-l*u),Math.asin(Math.max(-1,Math.min(1,f*i+c*a)))]}var r=Math.cos(t),u=Math.sin(t),i=Math.cos(n),a=Math.sin(n);return e.invert=function(t,n){var e=Math.cos(n),o=Math.cos(t)*e,c=Math.sin(t)*e,l=Math.sin(n),f=l*i-c*a;return[Math.atan2(c*i+l*a,o*r+f*u),Math.asin(Math.max(-1,Math.min(1,f*r-o*u)))]},e}function Uu(t,n){function e(n,e){var r=Math.cos(n),u=Math.cos(e),i=t(r*u);return[i*u*Math.sin(n),i*Math.sin(e)]}return e.invert=function(t,e){var r=Math.sqrt(t*t+e*e),u=n(r),i=Math.sin(u),a=Math.cos(u);return[Math.atan2(t*i,r*a),Math.asin(r&&e*i/r)]},e}function Iu(t,n,e,r){var u,i,a,o,c,l,f;return u=r[t],i=u[0],a=u[1],u=r[n],o=u[0],c=u[1],u=r[e],l=u[0],f=u[1],(f-a)*(o-i)-(c-a)*(l-i)>0}function Vu(t,n,e){return(e[0]-n[0])*(t[1]-n[1])<(e[1]-n[1])*(t[0]-n[0])}function Zu(t,n,e,r){var u=t[0],i=e[0],a=n[0]-u,o=r[0]-i,c=t[1],l=e[1],f=n[1]-c,s=r[1]-l,h=(o*(c-l)-s*(u-i))/(s*a-o*f);return[u+h*a,c+h*f]}function Xu(t,n){var e={list:t.map(function(t,n){return{index:n,x:t[0],y:t[1]}}).sort(function(t,n){return t.y<n.y?-1:t.y>n.y?1:t.x<n.x?-1:t.x>n.x?1:0}),bottomSite:null},r={list:[],leftEnd:null,rightEnd:null,init:function(){r.leftEnd=r.createHalfEdge(null,\"l\"),r.rightEnd=r.createHalfEdge(null,\"l\"),r.leftEnd.r=r.rightEnd,r.rightEnd.l=r.leftEnd,r.list.unshift(r.leftEnd,r.rightEnd)},createHalfEdge:function(t,n){return{edge:t,side:n,vertex:null,l:null,r:null}},insert:function(t,n){n.l=t,n.r=t.r,t.r.l=n,t.r=n},leftBound:function(t){var n=r.leftEnd;do n=n.r;while(n!=r.rightEnd&&u.rightOf(n,t));return n=n.l},del:function(t){t.l.r=t.r,t.r.l=t.l,t.edge=null},right:function(t){return t.r},left:function(t){return t.l},leftRegion:function(t){return null==t.edge?e.bottomSite:t.edge.region[t.side]},rightRegion:function(t){return null==t.edge?e.bottomSite:t.edge.region[To[t.side]]}},u={bisect:function(t,n){var e={region:{l:t,r:n},ep:{l:null,r:null}},r=n.x-t.x,u=n.y-t.y,i=r>0?r:-r,a=u>0?u:-u;return e.c=t.x*r+t.y*u+.5*(r*r+u*u),i>a?(e.a=1,e.b=u/r,e.c/=r):(e.b=1,e.a=r/u,e.c/=u),e},intersect:function(t,n){var e=t.edge,r=n.edge;if(!e||!r||e.region.r==r.region.r)return null;var u=e.a*r.b-e.b*r.a;if(1e-10>Math.abs(u))return null;var i,a,o=(e.c*r.b-r.c*e.b)/u,c=(r.c*e.a-e.c*r.a)/u,l=e.region.r,f=r.region.r;l.y<f.y||l.y==f.y&&l.x<f.x?(i=t,a=e):(i=n,a=r);var s=o>=a.region.r.x;return s&&\"l\"===i.side||!s&&\"r\"===i.side?null:{x:o,y:c}},rightOf:function(t,n){var e=t.edge,r=e.region.r,u=n.x>r.x;if(u&&\"l\"===t.side)return 1;if(!u&&\"r\"===t.side)return 0;if(1===e.a){var i=n.y-r.y,a=n.x-r.x,o=0,c=0;if(!u&&0>e.b||u&&e.b>=0?c=o=i>=e.b*a:(c=n.x+n.y*e.b>e.c,0>e.b&&(c=!c),c||(o=1)),!o){var l=r.x-e.region.l.x;c=e.b*(a*a-i*i)<l*i*(1+2*a/l+e.b*e.b),0>e.b&&(c=!c)}}else{var f=e.c-e.a*n.x,s=n.y-f,h=n.x-r.x,g=f-r.y;c=s*s>h*h+g*g}return\"l\"===t.side?c:!c},endPoint:function(t,e,r){t.ep[e]=r,t.ep[To[e]]&&n(t)},distance:function(t,n){var e=t.x-n.x,r=t.y-n.y;return Math.sqrt(e*e+r*r)}},i={list:[],insert:function(t,n,e){t.vertex=n,t.ystar=n.y+e;for(var r=0,u=i.list,a=u.length;a>r;r++){var o=u[r];if(!(t.ystar>o.ystar||t.ystar==o.ystar&&n.x>o.vertex.x))break}u.splice(r,0,t)},del:function(t){for(var n=0,e=i.list,r=e.length;r>n&&e[n]!=t;++n);e.splice(n,1)},empty:function(){return 0===i.list.length},nextEvent:function(t){for(var n=0,e=i.list,r=e.length;r>n;++n)if(e[n]==t)return e[n+1];return null},min:function(){var t=i.list[0];return{x:t.vertex.x,y:t.ystar}},extractMin:function(){return i.list.shift()}};r.init(),e.bottomSite=e.list.shift();for(var a,o,c,l,f,s,h,g,p,d,m,v,y,M=e.list.shift();;)if(i.empty()||(a=i.min()),M&&(i.empty()||M.y<a.y||M.y==a.y&&M.x<a.x))o=r.leftBound(M),c=r.right(o),h=r.rightRegion(o),v=u.bisect(h,M),s=r.createHalfEdge(v,\"l\"),r.insert(o,s),d=u.intersect(o,s),d&&(i.del(o),i.insert(o,d,u.distance(d,M))),o=s,s=r.createHalfEdge(v,\"r\"),r.insert(o,s),d=u.intersect(s,c),d&&i.insert(s,d,u.distance(d,M)),M=e.list.shift();else{if(i.empty())break;o=i.extractMin(),l=r.left(o),c=r.right(o),f=r.right(c),h=r.leftRegion(o),g=r.rightRegion(c),m=o.vertex,u.endPoint(o.edge,o.side,m),u.endPoint(c.edge,c.side,m),r.del(o),i.del(c),r.del(c),y=\"l\",h.y>g.y&&(p=h,h=g,g=p,y=\"r\"),v=u.bisect(h,g),s=r.createHalfEdge(v,y),r.insert(l,s),u.endPoint(v,To[y],m),d=u.intersect(l,s),d&&(i.del(l),i.insert(l,d,u.distance(d,h))),d=u.intersect(s,f),d&&i.insert(s,d,u.distance(d,h))}for(o=r.right(r.leftEnd);o!=r.rightEnd;o=r.right(o))n(o.edge)}function Bu(){return{leaf:!0,nodes:[],point:null}}function $u(t,n,e,r,u,i){if(!t(n,e,r,u,i)){var a=.5*(e+u),o=.5*(r+i),c=n.nodes;c[0]&&$u(t,c[0],e,r,a,o),c[1]&&$u(t,c[1],a,r,u,o),c[2]&&$u(t,c[2],e,o,a,i),c[3]&&$u(t,c[3],a,o,u,i)}}function Ju(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Gu(t,n,e,r){for(var u,i,a=0,o=n.length,c=e.length;o>a;){if(r>=c)return-1;if(u=n.charCodeAt(a++),37===u){if(i=$o[n.charAt(a++)],!i||0>(r=i(t,e,r)))return-1}else if(u!=e.charCodeAt(r++))return-1}return r}function Ku(t){return RegExp(\"^(?:\"+t.map(Ci.requote).join(\"|\")+\")\",\"i\")}function Wu(t){for(var n=new i,e=-1,r=t.length;r>++e;)n.set(t[e].toLowerCase(),e);return n}function Qu(t,n,e){t+=\"\";var r=t.length;return e>r?Array(e-r+1).join(n)+t:t}function ti(t,n,e){Yo.lastIndex=0;var r=Yo.exec(n.substring(e));return r?e+=r[0].length:-1}function ni(t,n,e){Oo.lastIndex=0;var r=Oo.exec(n.substring(e));return r?e+=r[0].length:-1}function ei(t,n,e){Vo.lastIndex=0;var r=Vo.exec(n.substring(e));return r?(t.m=Zo.get(r[0].toLowerCase()),e+=r[0].length):-1}function ri(t,n,e){Uo.lastIndex=0;var r=Uo.exec(n.substring(e));return r?(t.m=Io.get(r[0].toLowerCase()),e+=r[0].length):-1}function ui(t,n,e){return Gu(t,\"\"+Bo.c,n,e)}function ii(t,n,e){return Gu(t,\"\"+Bo.x,n,e)}function ai(t,n,e){return Gu(t,\"\"+Bo.X,n,e)}function oi(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+4));return r?(t.y=+r[0],e+=r[0].length):-1}function ci(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+2));return r?(t.y=li(+r[0]),e+=r[0].length):-1}function li(t){return t+(t>68?1900:2e3)}function fi(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+2));return r?(t.m=r[0]-1,e+=r[0].length):-1}function si(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+2));return r?(t.d=+r[0],e+=r[0].length):-1}function hi(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+2));return r?(t.H=+r[0],e+=r[0].length):-1}function gi(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+2));return r?(t.M=+r[0],e+=r[0].length):-1}function pi(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+2));return r?(t.S=+r[0],e+=r[0].length):-1}function di(t,n,e){Jo.lastIndex=0;var r=Jo.exec(n.substring(e,e+3));return r?(t.L=+r[0],e+=r[0].length):-1}function mi(t,n,e){var r=Go.get(n.substring(e,e+=2).toLowerCase());return null==r?-1:(t.p=r,e)}function vi(t){var n=t.getTimezoneOffset(),e=n>0?\"-\":\"+\",r=~~(Math.abs(n)/60),u=Math.abs(n)%60;return e+Qu(r,\"0\",2)+Qu(u,\"0\",2)}function yi(t){return t.toISOString()}function Mi(t,n,e){function r(n){var e=t(n),r=i(e,1);return r-n>n-e?e:r}function u(e){return n(e=t(new qo(e-1)),1),e}function i(t,e){return n(t=new qo(+t),e),t}function a(t,r,i){var a=u(t),o=[];if(i>1)for(;r>a;)e(a)%i||o.push(new Date(+a)),n(a,1);else for(;r>a;)o.push(new Date(+a)),n(a,1);return o}function o(t,n,e){try{qo=Ju;var r=new Ju;return r._=t,a(r,n,e)}finally{qo=Date}}t.floor=t,t.round=r,t.ceil=u,t.offset=i,t.range=a;var c=t.utc=bi(t);return c.floor=c,c.round=bi(r),c.ceil=bi(u),c.offset=bi(i),c.range=o,t}function bi(t){return function(n,e){try{qo=Ju;var r=new Ju;return r._=n,t(r,e)._}finally{qo=Date}}}function xi(t,n,e){function r(n){return t(n)}return r.invert=function(n){return wi(t.invert(n))},r.domain=function(n){return arguments.length?(t.domain(n),r):t.domain().map(wi)},r.nice=function(t){return r.domain(Yn(r.domain(),function(){return t}))},r.ticks=function(e,u){var i=_i(r.domain());if(\"function\"!=typeof e){var a=i[1]-i[0],o=a/e,c=Ci.bisect(Wo,o);if(c==Wo.length)return n.year(i,e);if(!c)return t.ticks(e).map(wi);Math.log(o/Wo[c-1])<Math.log(Wo[c]/o)&&--c,e=n[c],u=e[1],e=e[0].range}return e(i[0],new Date(+i[1]+1),u)},r.tickFormat=function(){return e},r.copy=function(){return xi(t.copy(),n,e)},Ci.rebind(r,t,\"range\",\"rangeRound\",\"interpolate\",\"clamp\")}function _i(t){var n=t[0],e=t[t.length-1];return e>n?[n,e]:[e,n]}function wi(t){return new Date(t)}function Si(t){return function(n){for(var e=t.length-1,r=t[e];!r[1](n);)r=t[--e];return r[0](n)}}function ki(t){var n=new Date(t,0,1);return n.setFullYear(t),n}function Ei(t){var n=t.getFullYear(),e=ki(n),r=ki(n+1);return n+(t-e)/(r-e)}function Ai(t){var n=new Date(Date.UTC(t,0,1));return n.setUTCFullYear(t),n}function Ni(t){var n=t.getUTCFullYear(),e=Ai(n),r=Ai(n+1);return n+(t-e)/(r-e)}var Ti=Math.PI,qi=1e-6,Ci={version:\"3.0.8\"},zi=Ti/180,Di=180/Ti,Li=document,Fi=window,Hi=\".\",ji=\",\",Pi=[3,3];Date.now||(Date.now=function(){return+new Date});try{Li.createElement(\"div\").style.setProperty(\"opacity\",0,\"\")}catch(Ri){var Oi=Fi.CSSStyleDeclaration.prototype,Yi=Oi.setProperty;Oi.setProperty=function(t,n,e){Yi.call(this,t,n+\"\",e)}}var Ui=u;try{Ui(Li.documentElement.childNodes)[0].nodeType}catch(Ii){Ui=r}var Vi=[].__proto__?function(t,n){t.__proto__=n}:function(t,n){for(var e in n)t[e]=n[e]};Ci.map=function(t){var n=new i;for(var e in t)n.set(e,t[e]);return n},e(i,{has:function(t){return Zi+t in this},get:function(t){return this[Zi+t]},set:function(t,n){return this[Zi+t]=n},remove:function(t){return t=Zi+t,t in this&&delete this[t]},keys:function(){var t=[];return this.forEach(function(n){t.push(n)}),t},values:function(){var t=[];return this.forEach(function(n,e){t.push(e)}),t},entries:function(){var t=[];return this.forEach(function(n,e){t.push({key:n,value:e})}),t},forEach:function(t){for(var n in this)n.charCodeAt(0)===Xi&&t.call(this,n.substring(1),this[n])}});var Zi=\"\\0\",Xi=Zi.charCodeAt(0);Ci.functor=c,Ci.rebind=function(t,n){for(var e,r=1,u=arguments.length;u>++r;)t[e=arguments[r]]=l(t,n,n[e]);return t},Ci.ascending=function(t,n){return n>t?-1:t>n?1:t>=n?0:0/0},Ci.descending=function(t,n){return t>n?-1:n>t?1:n>=t?0:0/0},Ci.mean=function(t,n){var e,r=t.length,u=0,i=-1,a=0;if(1===arguments.length)for(;r>++i;)f(e=t[i])&&(u+=(e-u)/++a);else for(;r>++i;)f(e=n.call(t,t[i],i))&&(u+=(e-u)/++a);return a?u:void 0},Ci.median=function(t,n){return arguments.length>1&&(t=t.map(n)),t=t.filter(f),t.length?Ci.quantile(t.sort(Ci.ascending),.5):void 0},Ci.min=function(t,n){var e,r,u=-1,i=t.length;if(1===arguments.length){for(;i>++u&&(null==(e=t[u])||e!=e);)e=void 0;for(;i>++u;)null!=(r=t[u])&&e>r&&(e=r)}else{for(;i>++u&&(null==(e=n.call(t,t[u],u))||e!=e);)e=void 0;for(;i>++u;)null!=(r=n.call(t,t[u],u))&&e>r&&(e=r)}return e},Ci.max=function(t,n){var e,r,u=-1,i=t.length;if(1===arguments.length){for(;i>++u&&(null==(e=t[u])||e!=e);)e=void 0;for(;i>++u;)null!=(r=t[u])&&r>e&&(e=r)}else{for(;i>++u&&(null==(e=n.call(t,t[u],u))||e!=e);)e=void 0;for(;i>++u;)null!=(r=n.call(t,t[u],u))&&r>e&&(e=r)}return e},Ci.extent=function(t,n){var e,r,u,i=-1,a=t.length;if(1===arguments.length){for(;a>++i&&(null==(e=u=t[i])||e!=e);)e=u=void 0;for(;a>++i;)null!=(r=t[i])&&(e>r&&(e=r),r>u&&(u=r))}else{for(;a>++i&&(null==(e=u=n.call(t,t[i],i))||e!=e);)e=void 0;for(;a>++i;)null!=(r=n.call(t,t[i],i))&&(e>r&&(e=r),r>u&&(u=r))}return[e,u]},Ci.random={normal:function(t,n){var e=arguments.length;return 2>e&&(n=1),1>e&&(t=0),function(){var e,r,u;do e=2*Math.random()-1,r=2*Math.random()-1,u=e*e+r*r;while(!u||u>1);return t+n*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var t=Ci.random.normal.apply(Ci,arguments);return function(){return Math.exp(t())}},irwinHall:function(t){return function(){for(var n=0,e=0;t>e;e++)n+=Math.random();return n/t}}},Ci.sum=function(t,n){var e,r=0,u=t.length,i=-1;if(1===arguments.length)for(;u>++i;)isNaN(e=+t[i])||(r+=e);else for(;u>++i;)isNaN(e=+n.call(t,t[i],i))||(r+=e);return r},Ci.quantile=function(t,n){var e=(t.length-1)*n+1,r=Math.floor(e),u=+t[r-1],i=e-r;return i?u+i*(t[r]-u):u},Ci.shuffle=function(t){for(var n,e,r=t.length;r;)e=0|Math.random()*r--,n=t[r],t[r]=t[e],t[e]=n;return t},Ci.transpose=function(t){return Ci.zip.apply(Ci,t)},Ci.zip=function(){if(!(r=arguments.length))return[];for(var t=-1,n=Ci.min(arguments,s),e=Array(n);n>++t;)for(var r,u=-1,i=e[t]=Array(r);r>++u;)i[u]=arguments[u][t];return e},Ci.bisector=function(t){return{left:function(n,e,r,u){for(3>arguments.length&&(r=0),4>arguments.length&&(u=n.length);u>r;){var i=r+u>>>1;e>t.call(n,n[i],i)?r=i+1:u=i}return r},right:function(n,e,r,u){for(3>arguments.length&&(r=0),4>arguments.length&&(u=n.length);u>r;){var i=r+u>>>1;t.call(n,n[i],i)>e?u=i:r=i+1}return r}}};var Bi=Ci.bisector(function(t){return t});Ci.bisectLeft=Bi.left,Ci.bisect=Ci.bisectRight=Bi.right,Ci.nest=function(){function t(n,o){if(o>=a.length)return r?r.call(u,n):e?n.sort(e):n;for(var c,l,f,s=-1,h=n.length,g=a[o++],p=new i,d={};h>++s;)(f=p.get(c=g(l=n[s])))?f.push(l):p.set(c,[l]);return p.forEach(function(n,e){d[n]=t(e,o)}),d}function n(t,e){if(e>=a.length)return t;var r,u=[],i=o[e++];for(r in t)u.push({key:r,values:n(t[r],e)});return i&&u.sort(function(t,n){return i(t.key,n.key)}),u}var e,r,u={},a=[],o=[];return u.map=function(n){return t(n,0)},u.entries=function(e){return n(t(e,0),0)},u.key=function(t){return a.push(t),u},u.sortKeys=function(t){return o[a.length-1]=t,u},u.sortValues=function(t){return e=t,u},u.rollup=function(t){return r=t,u},u},Ci.keys=function(t){var n=[];for(var e in t)n.push(e);return n},Ci.values=function(t){var n=[];for(var e in t)n.push(t[e]);return n},Ci.entries=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},Ci.permute=function(t,n){for(var e=[],r=-1,u=n.length;u>++r;)e[r]=t[n[r]];return e},Ci.merge=function(t){return Array.prototype.concat.apply([],t)},Ci.range=function(t,n,e){if(3>arguments.length&&(e=1,2>arguments.length&&(n=t,t=0)),1/0===(n-t)/e)throw Error(\"infinite range\");var r,u=[],i=g(Math.abs(e)),a=-1;if(t*=i,n*=i,e*=i,0>e)for(;(r=t+e*++a)>n;)u.push(r/i);else for(;n>(r=t+e*++a);)u.push(r/i);return u},Ci.requote=function(t){return t.replace($i,\"\\\\$&\")};var $i=/[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;Ci.round=function(t,n){return n?Math.round(t*(n=Math.pow(10,n)))/n:Math.round(t)},Ci.xhr=function(t,n,e){function r(){var t=l.status;!t&&l.responseText||t>=200&&300>t||304===t?i.load.call(u,c.call(u,l)):i.error.call(u,l)}var u={},i=Ci.dispatch(\"progress\",\"load\",\"error\"),o={},c=a,l=new(Fi.XDomainRequest&&/^(http(s)?:)?\\/\\//.test(t)?XDomainRequest:XMLHttpRequest);return\"onload\"in l?l.onload=l.onerror=r:l.onreadystatechange=function(){l.readyState>3&&r()},l.onprogress=function(t){var n=Ci.event;Ci.event=t;try{i.progress.call(u,l)}finally{Ci.event=n}},u.header=function(t,n){return t=(t+\"\").toLowerCase(),2>arguments.length?o[t]:(null==n?delete o[t]:o[t]=n+\"\",u)},u.mimeType=function(t){return arguments.length?(n=null==t?null:t+\"\",u):n},u.response=function(t){return c=t,u},[\"get\",\"post\"].forEach(function(t){u[t]=function(){return u.send.apply(u,[t].concat(Ui(arguments)))}}),u.send=function(e,r,i){if(2===arguments.length&&\"function\"==typeof r&&(i=r,r=null),l.open(e,t,!0),null==n||\"accept\"in o||(o.accept=n+\",*/*\"),l.setRequestHeader)for(var a in o)l.setRequestHeader(a,o[a]);return null!=n&&l.overrideMimeType&&l.overrideMimeType(n),null!=i&&u.on(\"error\",i).on(\"load\",function(t){i(null,t)}),l.send(null==r?null:r),u},u.abort=function(){return l.abort(),u},Ci.rebind(u,i,\"on\"),2===arguments.length&&\"function\"==typeof n&&(e=n,n=null),null==e?u:u.get(p(e))},Ci.text=function(){return Ci.xhr.apply(Ci,arguments).response(d)},Ci.json=function(t,n){return Ci.xhr(t,\"application/json\",n).response(m)},Ci.html=function(t,n){return Ci.xhr(t,\"text/html\",n).response(v)},Ci.xml=function(){return Ci.xhr.apply(Ci,arguments).response(y)};var Ji={svg:\"http://www.w3.org/2000/svg\",xhtml:\"http://www.w3.org/1999/xhtml\",xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\"};Ci.ns={prefix:Ji,qualify:function(t){var n=t.indexOf(\":\"),e=t;return n>=0&&(e=t.substring(0,n),t=t.substring(n+1)),Ji.hasOwnProperty(e)?{space:Ji[e],local:t}:t}},Ci.dispatch=function(){for(var t=new M,n=-1,e=arguments.length;e>++n;)t[arguments[n]]=b(t);return t},M.prototype.on=function(t,n){var e=t.indexOf(\".\"),r=\"\";return e>0&&(r=t.substring(e+1),t=t.substring(0,e)),2>arguments.length?this[t].on(r):this[t].on(r,n)},Ci.format=function(t){var n=Gi.exec(t),e=n[1]||\" \",r=n[2]||\">\",u=n[3]||\"\",i=n[4]||\"\",a=n[5],o=+n[6],c=n[7],l=n[8],f=n[9],s=1,h=\"\",g=!1;switch(l&&(l=+l.substring(1)),(a||\"0\"===e&&\"=\"===r)&&(a=e=\"0\",r=\"=\",c&&(o-=Math.floor((o-1)/4))),f){case\"n\":c=!0,f=\"g\";break;case\"%\":s=100,h=\"%\",f=\"f\";break;case\"p\":s=100,h=\"%\",f=\"r\";break;case\"b\":case\"o\":case\"x\":case\"X\":i&&(i=\"0\"+f.toLowerCase());case\"c\":case\"d\":g=!0,l=0;break;case\"s\":s=-1,f=\"r\"}\"#\"===i&&(i=\"\"),\"r\"!=f||l||(f=\"g\"),f=Ki.get(f)||_;var p=a&&c;return function(t){if(g&&t%1)return\"\";var n=0>t||0===t&&0>1/t?(t=-t,\"-\"):u;if(0>s){var d=Ci.formatPrefix(t,l);t=d.scale(t),h=d.symbol}else t*=s;t=f(t,l),!a&&c&&(t=Wi(t));var m=i.length+t.length+(p?0:n.length),v=o>m?Array(m=o-m+1).join(e):\"\";return p&&(t=Wi(v+t)),Hi&&t.replace(\".\",Hi),n+=i,(\"<\"===r?n+t+v:\">\"===r?v+n+t:\"^\"===r?v.substring(0,m>>=1)+n+t+v.substring(m):n+(p?t:v+t))+h}};var Gi=/(?:([^{])?([<>=^]))?([+\\- ])?(#)?(0)?([0-9]+)?(,)?(\\.[0-9]+)?([a-zA-Z%])?/,Ki=Ci.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,n){return t.toPrecision(n)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},r:function(t,n){return(t=Ci.round(t,x(t,n))).toFixed(Math.max(0,Math.min(20,x(t*(1+1e-15),n))))}}),Wi=a;if(Pi){var Qi=Pi.length;Wi=function(t){for(var n=t.lastIndexOf(\".\"),e=n>=0?\".\"+t.substring(n+1):(n=t.length,\"\"),r=[],u=0,i=Pi[0];n>0&&i>0;)r.push(t.substring(n-=i,n+i)),i=Pi[u=(u+1)%Qi];return r.reverse().join(ji||\"\")+e}}var ta=[\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"].map(w);Ci.formatPrefix=function(t,n){var e=0;return t&&(0>t&&(t*=-1),n&&(t=Ci.round(t,x(t,n))),e=1+Math.floor(1e-12+Math.log(t)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((0>=e?e+1:e-1)/3)))),ta[8+e/3]};var na=function(){return a},ea=Ci.map({linear:na,poly:q,quad:function(){return A},cubic:function(){return N},sin:function(){return C},exp:function(){return z},circle:function(){return D},elastic:L,back:F,bounce:function(){return H}}),ra=Ci.map({\"in\":a,out:k,\"in-out\":E,\"out-in\":function(t){return E(k(t))}});Ci.ease=function(t){var n=t.indexOf(\"-\"),e=n>=0?t.substring(0,n):t,r=n>=0?t.substring(n+1):\"in\";return e=ea.get(e)||na,r=ra.get(r)||a,S(r(e.apply(null,Array.prototype.slice.call(arguments,1))))},Ci.event=null,Ci.transform=function(t){var n=Li.createElementNS(Ci.ns.prefix.svg,\"g\");return(Ci.transform=function(t){n.setAttribute(\"transform\",t);var e=n.transform.baseVal.consolidate();return new O(e?e.matrix:ua)})(t)},O.prototype.toString=function(){return\"translate(\"+this.translate+\")rotate(\"+this.rotate+\")skewX(\"+this.skew+\")scale(\"+this.scale+\")\"};var ua={a:1,b:0,c:0,d:1,e:0,f:0};Ci.interpolate=function(t,n){for(var e,r=Ci.interpolators.length;--r>=0&&!(e=Ci.interpolators[r](t,n)););return e},Ci.interpolateNumber=function(t,n){return n-=t,function(e){return t+n*e}},Ci.interpolateRound=function(t,n){return n-=t,function(e){return Math.round(t+n*e)}},Ci.interpolateString=function(t,n){var e,r,u,i,a,o=0,c=0,l=[],f=[];for(ia.lastIndex=0,r=0;e=ia.exec(n);++r)e.index&&l.push(n.substring(o,c=e.index)),f.push({i:l.length,x:e[0]}),l.push(null),o=ia.lastIndex;for(n.length>o&&l.push(n.substring(o)),r=0,i=f.length;(e=ia.exec(t))&&i>r;++r)if(a=f[r],a.x==e[0]){if(a.i)if(null==l[a.i+1])for(l[a.i-1]+=a.x,l.splice(a.i,1),u=r+1;i>u;++u)f[u].i--;else for(l[a.i-1]+=a.x+l[a.i+1],l.splice(a.i,2),u=r+1;i>u;++u)f[u].i-=2;else if(null==l[a.i+1])l[a.i]=a.x;else for(l[a.i]=a.x+l[a.i+1],l.splice(a.i+1,1),u=r+1;i>u;++u)f[u].i--;f.splice(r,1),i--,r--}else a.x=Ci.interpolateNumber(parseFloat(e[0]),parseFloat(a.x));for(;i>r;)a=f.pop(),null==l[a.i+1]?l[a.i]=a.x:(l[a.i]=a.x+l[a.i+1],l.splice(a.i+1,1)),i--;return 1===l.length?null==l[0]?f[0].x:function(){return n}:function(t){for(r=0;i>r;++r)l[(a=f[r]).i]=a.x(t);return l.join(\"\")}},Ci.interpolateTransform=function(t,n){var e,r=[],u=[],i=Ci.transform(t),a=Ci.transform(n),o=i.translate,c=a.translate,l=i.rotate,f=a.rotate,s=i.skew,h=a.skew,g=i.scale,p=a.scale;return o[0]!=c[0]||o[1]!=c[1]?(r.push(\"translate(\",null,\",\",null,\")\"),u.push({i:1,x:Ci.interpolateNumber(o[0],c[0])},{i:3,x:Ci.interpolateNumber(o[1],c[1])})):c[0]||c[1]?r.push(\"translate(\"+c+\")\"):r.push(\"\"),l!=f?(l-f>180?f+=360:f-l>180&&(l+=360),u.push({i:r.push(r.pop()+\"rotate(\",null,\")\")-2,x:Ci.interpolateNumber(l,f)})):f&&r.push(r.pop()+\"rotate(\"+f+\")\"),s!=h?u.push({i:r.push(r.pop()+\"skewX(\",null,\")\")-2,x:Ci.interpolateNumber(s,h)}):h&&r.push(r.pop()+\"skewX(\"+h+\")\"),g[0]!=p[0]||g[1]!=p[1]?(e=r.push(r.pop()+\"scale(\",null,\",\",null,\")\"),u.push({i:e-4,x:Ci.interpolateNumber(g[0],p[0])},{i:e-2,x:Ci.interpolateNumber(g[1],p[1])})):(1!=p[0]||1!=p[1])&&r.push(r.pop()+\"scale(\"+p+\")\"),e=u.length,function(t){for(var n,i=-1;e>++i;)r[(n=u[i]).i]=n.x(t);return r.join(\"\")}},Ci.interpolateRgb=function(t,n){t=Ci.rgb(t),n=Ci.rgb(n);var e=t.r,r=t.g,u=t.b,i=n.r-e,a=n.g-r,o=n.b-u;return function(t){return\"#\"+G(Math.round(e+i*t))+G(Math.round(r+a*t))+G(Math.round(u+o*t))}},Ci.interpolateHsl=function(t,n){t=Ci.hsl(t),n=Ci.hsl(n);var e=t.h,r=t.s,u=t.l,i=n.h-e,a=n.s-r,o=n.l-u;return i>180?i-=360:-180>i&&(i+=360),function(t){return un(e+i*t,r+a*t,u+o*t)+\"\"}},Ci.interpolateLab=function(t,n){t=Ci.lab(t),n=Ci.lab(n);var e=t.l,r=t.a,u=t.b,i=n.l-e,a=n.a-r,o=n.b-u;return function(t){return sn(e+i*t,r+a*t,u+o*t)+\"\"}},Ci.interpolateHcl=function(t,n){t=Ci.hcl(t),n=Ci.hcl(n);var e=t.h,r=t.c,u=t.l,i=n.h-e,a=n.c-r,o=n.l-u;return i>180?i-=360:-180>i&&(i+=360),function(t){return cn(e+i*t,r+a*t,u+o*t)+\"\"}},Ci.interpolateArray=function(t,n){var e,r=[],u=[],i=t.length,a=n.length,o=Math.min(t.length,n.length);for(e=0;o>e;++e)r.push(Ci.interpolate(t[e],n[e]));for(;i>e;++e)u[e]=t[e];for(;a>e;++e)u[e]=n[e];return function(t){for(e=0;o>e;++e)u[e]=r[e](t);return u}},Ci.interpolateObject=function(t,n){var e,r={},u={};for(e in t)e in n?r[e]=V(e)(t[e],n[e]):u[e]=t[e];for(e in n)e in t||(u[e]=n[e]);return function(t){for(e in r)u[e]=r[e](t);return u}};var ia=/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;Ci.interpolators=[Ci.interpolateObject,function(t,n){return n instanceof Array&&Ci.interpolateArray(t,n)},function(t,n){return(\"string\"==typeof t||\"string\"==typeof n)&&Ci.interpolateString(t+\"\",n+\"\")},function(t,n){return(\"string\"==typeof n?oa.has(n)||/^(#|rgb\\(|hsl\\()/.test(n):n instanceof B)&&Ci.interpolateRgb(t,n)},function(t,n){return!isNaN(t=+t)&&!isNaN(n=+n)&&Ci.interpolateNumber(t,n)}],B.prototype.toString=function(){return this.rgb()+\"\"},Ci.rgb=function(t,n,e){return 1===arguments.length?t instanceof J?$(t.r,t.g,t.b):K(\"\"+t,$,un):$(~~t,~~n,~~e)};var aa=J.prototype=new B;aa.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var n=this.r,e=this.g,r=this.b,u=30;return n||e||r?(n&&u>n&&(n=u),e&&u>e&&(e=u),r&&u>r&&(r=u),$(Math.min(255,Math.floor(n/t)),Math.min(255,Math.floor(e/t)),Math.min(255,Math.floor(r/t)))):$(u,u,u)},aa.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),$(Math.floor(t*this.r),Math.floor(t*this.g),Math.floor(t*this.b))},aa.hsl=function(){return W(this.r,this.g,this.b)},aa.toString=function(){return\"#\"+G(this.r)+G(this.g)+G(this.b)};var oa=Ci.map({aliceblue:\"#f0f8ff\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",aquamarine:\"#7fffd4\",azure:\"#f0ffff\",beige:\"#f5f5dc\",bisque:\"#ffe4c4\",black:\"#000000\",blanchedalmond:\"#ffebcd\",blue:\"#0000ff\",blueviolet:\"#8a2be2\",brown:\"#a52a2a\",burlywood:\"#deb887\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",cornflowerblue:\"#6495ed\",cornsilk:\"#fff8dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",darkkhaki:\"#bdb76b\",darkmagenta:\"#8b008b\",darkolivegreen:\"#556b2f\",darkorange:\"#ff8c00\",darkorchid:\"#9932cc\",darkred:\"#8b0000\",darksalmon:\"#e9967a\",darkseagreen:\"#8fbc8f\",darkslateblue:\"#483d8b\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",darkturquoise:\"#00ced1\",darkviolet:\"#9400d3\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1e90ff\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",forestgreen:\"#228b22\",fuchsia:\"#ff00ff\",gainsboro:\"#dcdcdc\",ghostwhite:\"#f8f8ff\",gold:\"#ffd700\",goldenrod:\"#daa520\",gray:\"#808080\",green:\"#008000\",greenyellow:\"#adff2f\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",ivory:\"#fffff0\",khaki:\"#f0e68c\",lavender:\"#e6e6fa\",lavenderblush:\"#fff0f5\",lawngreen:\"#7cfc00\",lemonchiffon:\"#fffacd\",lightblue:\"#add8e6\",lightcoral:\"#f08080\",lightcyan:\"#e0ffff\",lightgoldenrodyellow:\"#fafad2\",lightgray:\"#d3d3d3\",lightgreen:\"#90ee90\",lightgrey:\"#d3d3d3\",lightpink:\"#ffb6c1\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",lightskyblue:\"#87cefa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#b0c4de\",lightyellow:\"#ffffe0\",lime:\"#00ff00\",limegreen:\"#32cd32\",linen:\"#faf0e6\",magenta:\"#ff00ff\",maroon:\"#800000\",mediumaquamarine:\"#66cdaa\",mediumblue:\"#0000cd\",mediumorchid:\"#ba55d3\",mediumpurple:\"#9370db\",mediumseagreen:\"#3cb371\",mediumslateblue:\"#7b68ee\",mediumspringgreen:\"#00fa9a\",mediumturquoise:\"#48d1cc\",mediumvioletred:\"#c71585\",midnightblue:\"#191970\",mintcream:\"#f5fffa\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",navajowhite:\"#ffdead\",navy:\"#000080\",oldlace:\"#fdf5e6\",olive:\"#808000\",olivedrab:\"#6b8e23\",orange:\"#ffa500\",orangered:\"#ff4500\",orchid:\"#da70d6\",palegoldenrod:\"#eee8aa\",palegreen:\"#98fb98\",paleturquoise:\"#afeeee\",palevioletred:\"#db7093\",papayawhip:\"#ffefd5\",peachpuff:\"#ffdab9\",peru:\"#cd853f\",pink:\"#ffc0cb\",plum:\"#dda0dd\",powderblue:\"#b0e0e6\",purple:\"#800080\",red:\"#ff0000\",rosybrown:\"#bc8f8f\",royalblue:\"#4169e1\",saddlebrown:\"#8b4513\",salmon:\"#fa8072\",sandybrown:\"#f4a460\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",sienna:\"#a0522d\",silver:\"#c0c0c0\",skyblue:\"#87ceeb\",slateblue:\"#6a5acd\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#fffafa\",springgreen:\"#00ff7f\",steelblue:\"#4682b4\",tan:\"#d2b48c\",teal:\"#008080\",thistle:\"#d8bfd8\",tomato:\"#ff6347\",turquoise:\"#40e0d0\",violet:\"#ee82ee\",wheat:\"#f5deb3\",white:\"#ffffff\",whitesmoke:\"#f5f5f5\",yellow:\"#ffff00\",yellowgreen:\"#9acd32\"});\n    3  oa.forEach(function(t,n){oa.set(t,K(n,$,un))}),Ci.hsl=function(t,n,e){return 1===arguments.length?t instanceof rn?en(t.h,t.s,t.l):K(\"\"+t,W,en):en(+t,+n,+e)};var ca=rn.prototype=new B;ca.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),en(this.h,this.s,this.l/t)},ca.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),en(this.h,this.s,t*this.l)},ca.rgb=function(){return un(this.h,this.s,this.l)},Ci.hcl=function(t,n,e){return 1===arguments.length?t instanceof on?an(t.h,t.c,t.l):t instanceof fn?hn(t.l,t.a,t.b):hn((t=Q((t=Ci.rgb(t)).r,t.g,t.b)).l,t.a,t.b):an(+t,+n,+e)};var la=on.prototype=new B;la.brighter=function(t){return an(this.h,this.c,Math.min(100,this.l+fa*(arguments.length?t:1)))},la.darker=function(t){return an(this.h,this.c,Math.max(0,this.l-fa*(arguments.length?t:1)))},la.rgb=function(){return cn(this.h,this.c,this.l).rgb()},Ci.lab=function(t,n,e){return 1===arguments.length?t instanceof fn?ln(t.l,t.a,t.b):t instanceof on?cn(t.l,t.c,t.h):Q((t=Ci.rgb(t)).r,t.g,t.b):ln(+t,+n,+e)};var fa=18,sa=.95047,ha=1,ga=1.08883,pa=fn.prototype=new B;pa.brighter=function(t){return ln(Math.min(100,this.l+fa*(arguments.length?t:1)),this.a,this.b)},pa.darker=function(t){return ln(Math.max(0,this.l-fa*(arguments.length?t:1)),this.a,this.b)},pa.rgb=function(){return sn(this.l,this.a,this.b)};var da=function(t,n){return n.querySelector(t)},ma=function(t,n){return n.querySelectorAll(t)},va=Li.documentElement,ya=va.matchesSelector||va.webkitMatchesSelector||va.mozMatchesSelector||va.msMatchesSelector||va.oMatchesSelector,Ma=function(t,n){return ya.call(t,n)};\"function\"==typeof Sizzle&&(da=function(t,n){return Sizzle(t,n)[0]||null},ma=function(t,n){return Sizzle.uniqueSort(Sizzle(t,n))},Ma=Sizzle.matchesSelector);var ba=[];Ci.selection=function(){return xa},Ci.selection.prototype=ba,ba.select=function(t){var n,e,r,u,i=[];\"function\"!=typeof t&&(t=vn(t));for(var a=-1,o=this.length;o>++a;){i.push(n=[]),n.parentNode=(r=this[a]).parentNode;for(var c=-1,l=r.length;l>++c;)(u=r[c])?(n.push(e=t.call(u,u.__data__,c)),e&&\"__data__\"in u&&(e.__data__=u.__data__)):n.push(null)}return mn(i)},ba.selectAll=function(t){var n,e,r=[];\"function\"!=typeof t&&(t=yn(t));for(var u=-1,i=this.length;i>++u;)for(var a=this[u],o=-1,c=a.length;c>++o;)(e=a[o])&&(r.push(n=Ui(t.call(e,e.__data__,o))),n.parentNode=e);return mn(r)},ba.attr=function(t,n){if(2>arguments.length){if(\"string\"==typeof t){var e=this.node();return t=Ci.ns.qualify(t),t.local?e.getAttributeNS(t.space,t.local):e.getAttribute(t)}for(n in t)this.each(Mn(n,t[n]));return this}return this.each(Mn(t,n))},ba.classed=function(t,n){if(2>arguments.length){if(\"string\"==typeof t){var e=this.node(),r=(t=t.trim().split(/^|\\s+/g)).length,u=-1;if(n=e.classList){for(;r>++u;)if(!n.contains(t[u]))return!1}else for(n=e.className,null!=n.baseVal&&(n=n.baseVal);r>++u;)if(!bn(t[u]).test(n))return!1;return!0}for(n in t)this.each(xn(n,t[n]));return this}return this.each(xn(t,n))},ba.style=function(t,n,e){var r=arguments.length;if(3>r){if(\"string\"!=typeof t){2>r&&(n=\"\");for(e in t)this.each(wn(e,t[e],n));return this}if(2>r)return Fi.getComputedStyle(this.node(),null).getPropertyValue(t);e=\"\"}return this.each(wn(t,n,e))},ba.property=function(t,n){if(2>arguments.length){if(\"string\"==typeof t)return this.node()[t];for(n in t)this.each(Sn(n,t[n]));return this}return this.each(Sn(t,n))},ba.text=function(t){return arguments.length?this.each(\"function\"==typeof t?function(){var n=t.apply(this,arguments);this.textContent=null==n?\"\":n}:null==t?function(){this.textContent=\"\"}:function(){this.textContent=t}):this.node().textContent},ba.html=function(t){return arguments.length?this.each(\"function\"==typeof t?function(){var n=t.apply(this,arguments);this.innerHTML=null==n?\"\":n}:null==t?function(){this.innerHTML=\"\"}:function(){this.innerHTML=t}):this.node().innerHTML},ba.append=function(t){function n(){return this.appendChild(Li.createElementNS(this.namespaceURI,t))}function e(){return this.appendChild(Li.createElementNS(t.space,t.local))}return t=Ci.ns.qualify(t),this.select(t.local?e:n)},ba.insert=function(t,n){function e(){return this.insertBefore(Li.createElementNS(this.namespaceURI,t),da(n,this))}function r(){return this.insertBefore(Li.createElementNS(t.space,t.local),da(n,this))}return t=Ci.ns.qualify(t),this.select(t.local?r:e)},ba.remove=function(){return this.each(function(){var t=this.parentNode;t&&t.removeChild(this)})},ba.data=function(t,n){function e(t,e){var r,u,a,o=t.length,s=e.length,h=Math.min(o,s),g=Array(s),p=Array(s),d=Array(o);if(n){var m,v=new i,y=new i,M=[];for(r=-1;o>++r;)m=n.call(u=t[r],u.__data__,r),v.has(m)?d[r]=u:v.set(m,u),M.push(m);for(r=-1;s>++r;)m=n.call(e,a=e[r],r),(u=v.get(m))?(g[r]=u,u.__data__=a):y.has(m)||(p[r]=kn(a)),y.set(m,a),v.remove(m);for(r=-1;o>++r;)v.has(M[r])&&(d[r]=t[r])}else{for(r=-1;h>++r;)u=t[r],a=e[r],u?(u.__data__=a,g[r]=u):p[r]=kn(a);for(;s>r;++r)p[r]=kn(e[r]);for(;o>r;++r)d[r]=t[r]}p.update=g,p.parentNode=g.parentNode=d.parentNode=t.parentNode,c.push(p),l.push(g),f.push(d)}var r,u,a=-1,o=this.length;if(!arguments.length){for(t=Array(o=(r=this[0]).length);o>++a;)(u=r[a])&&(t[a]=u.__data__);return t}var c=qn([]),l=mn([]),f=mn([]);if(\"function\"==typeof t)for(;o>++a;)e(r=this[a],t.call(r,r.parentNode.__data__,a));else for(;o>++a;)e(r=this[a],t);return l.enter=function(){return c},l.exit=function(){return f},l},ba.datum=function(t){return arguments.length?this.property(\"__data__\",t):this.property(\"__data__\")},ba.filter=function(t){var n,e,r,u=[];\"function\"!=typeof t&&(t=En(t));for(var i=0,a=this.length;a>i;i++){u.push(n=[]),n.parentNode=(e=this[i]).parentNode;for(var o=0,c=e.length;c>o;o++)(r=e[o])&&t.call(r,r.__data__,o)&&n.push(r)}return mn(u)},ba.order=function(){for(var t=-1,n=this.length;n>++t;)for(var e,r=this[t],u=r.length-1,i=r[u];--u>=0;)(e=r[u])&&(i&&i!==e.nextSibling&&i.parentNode.insertBefore(e,i),i=e);return this},ba.sort=function(t){t=An.apply(this,arguments);for(var n=-1,e=this.length;e>++n;)this[n].sort(t);return this.order()},ba.on=function(t,n,e){var r=arguments.length;if(3>r){if(\"string\"!=typeof t){2>r&&(n=!1);for(e in t)this.each(Nn(e,t[e],n));return this}if(2>r)return(r=this.node()[\"__on\"+t])&&r._;e=!1}return this.each(Nn(t,n,e))},ba.each=function(t){return Tn(this,function(n,e,r){t.call(n,n.__data__,e,r)})},ba.call=function(t){var n=Ui(arguments);return t.apply(n[0]=this,n),this},ba.empty=function(){return!this.node()},ba.node=function(){for(var t=0,n=this.length;n>t;t++)for(var e=this[t],r=0,u=e.length;u>r;r++){var i=e[r];if(i)return i}return null},ba.transition=function(){var t,n,e=wa||++ka,r=[],u=Object.create(Ea);u.time=Date.now();for(var i=-1,a=this.length;a>++i;){r.push(t=[]);for(var o=this[i],c=-1,l=o.length;l>++c;)(n=o[c])&&zn(n,c,e,u),t.push(n)}return Cn(r,e)};var xa=mn([[Li]]);xa[0].parentNode=va,Ci.select=function(t){return\"string\"==typeof t?xa.select(t):mn([[t]])},Ci.selectAll=function(t){return\"string\"==typeof t?xa.selectAll(t):mn([Ui(t)])};var _a=[];Ci.selection.enter=qn,Ci.selection.enter.prototype=_a,_a.append=ba.append,_a.insert=ba.insert,_a.empty=ba.empty,_a.node=ba.node,_a.select=function(t){for(var n,e,r,u,i,a=[],o=-1,c=this.length;c>++o;){r=(u=this[o]).update,a.push(n=[]),n.parentNode=u.parentNode;for(var l=-1,f=u.length;f>++l;)(i=u[l])?(n.push(r[l]=e=t.call(u.parentNode,i.__data__,l)),e.__data__=i.__data__):n.push(null)}return mn(a)};var wa,Sa=[],ka=0,Ea={ease:T,delay:0,duration:250};Sa.call=ba.call,Sa.empty=ba.empty,Sa.node=ba.node,Ci.transition=function(t){return arguments.length?wa?t.transition():t:xa.transition()},Ci.transition.prototype=Sa,Sa.select=function(t){var n,e,r,u=this.id,i=[];\"function\"!=typeof t&&(t=vn(t));for(var a=-1,o=this.length;o>++a;){i.push(n=[]);for(var c=this[a],l=-1,f=c.length;f>++l;)(r=c[l])&&(e=t.call(r,r.__data__,l))?(\"__data__\"in r&&(e.__data__=r.__data__),zn(e,l,u,r.__transition__[u]),n.push(e)):n.push(null)}return Cn(i,u)},Sa.selectAll=function(t){var n,e,r,u,i,a=this.id,o=[];\"function\"!=typeof t&&(t=yn(t));for(var c=-1,l=this.length;l>++c;)for(var f=this[c],s=-1,h=f.length;h>++s;)if(r=f[s]){i=r.__transition__[a],e=t.call(r,r.__data__,s),o.push(n=[]);for(var g=-1,p=e.length;p>++g;)zn(u=e[g],g,a,i),n.push(u)}return Cn(o,a)},Sa.filter=function(t){var n,e,r,u=[];\"function\"!=typeof t&&(t=En(t));for(var i=0,a=this.length;a>i;i++){u.push(n=[]);for(var e=this[i],o=0,c=e.length;c>o;o++)(r=e[o])&&t.call(r,r.__data__,o)&&n.push(r)}return Cn(u,this.id,this.time).ease(this.ease())},Sa.attr=function(t,n){function e(){this.removeAttribute(i)}function r(){this.removeAttributeNS(i.space,i.local)}if(2>arguments.length){for(n in t)this.attr(n,t[n]);return this}var u=V(t),i=Ci.ns.qualify(t);return Ln(this,\"attr.\"+t,n,function(t){function n(){var n,e=this.getAttribute(i);return e!==t&&(n=u(e,t),function(t){this.setAttribute(i,n(t))})}function a(){var n,e=this.getAttributeNS(i.space,i.local);return e!==t&&(n=u(e,t),function(t){this.setAttributeNS(i.space,i.local,n(t))})}return null==t?i.local?r:e:(t+=\"\",i.local?a:n)})},Sa.attrTween=function(t,n){function e(t,e){var r=n.call(this,t,e,this.getAttribute(u));return r&&function(t){this.setAttribute(u,r(t))}}function r(t,e){var r=n.call(this,t,e,this.getAttributeNS(u.space,u.local));return r&&function(t){this.setAttributeNS(u.space,u.local,r(t))}}var u=Ci.ns.qualify(t);return this.tween(\"attr.\"+t,u.local?r:e)},Sa.style=function(t,n,e){function r(){this.style.removeProperty(t)}var u=arguments.length;if(3>u){if(\"string\"!=typeof t){2>u&&(n=\"\");for(e in t)this.style(e,t[e],n);return this}e=\"\"}var i=V(t);return Ln(this,\"style.\"+t,n,function(n){function u(){var r,u=Fi.getComputedStyle(this,null).getPropertyValue(t);return u!==n&&(r=i(u,n),function(n){this.style.setProperty(t,r(n),e)})}return null==n?r:(n+=\"\",u)})},Sa.styleTween=function(t,n,e){return 3>arguments.length&&(e=\"\"),this.tween(\"style.\"+t,function(r,u){var i=n.call(this,r,u,Fi.getComputedStyle(this,null).getPropertyValue(t));return i&&function(n){this.style.setProperty(t,i(n),e)}})},Sa.text=function(t){return Ln(this,\"text\",t,Dn)},Sa.remove=function(){return this.each(\"end.transition\",function(){var t;!this.__transition__&&(t=this.parentNode)&&t.removeChild(this)})},Sa.ease=function(t){var n=this.id;return 1>arguments.length?this.node().__transition__[n].ease:(\"function\"!=typeof t&&(t=Ci.ease.apply(Ci,arguments)),Tn(this,function(e){e.__transition__[n].ease=t}))},Sa.delay=function(t){var n=this.id;return Tn(this,\"function\"==typeof t?function(e,r,u){e.__transition__[n].delay=0|t.call(e,e.__data__,r,u)}:(t|=0,function(e){e.__transition__[n].delay=t}))},Sa.duration=function(t){var n=this.id;return Tn(this,\"function\"==typeof t?function(e,r,u){e.__transition__[n].duration=Math.max(1,0|t.call(e,e.__data__,r,u))}:(t=Math.max(1,0|t),function(e){e.__transition__[n].duration=t}))},Sa.each=function(t,n){var e=this.id;if(2>arguments.length){var r=Ea,u=wa;wa=e,Tn(this,function(n,r,u){Ea=n.__transition__[e],t.call(n,n.__data__,r,u)}),Ea=r,wa=u}else Tn(this,function(r){r.__transition__[e].event.on(t,n)});return this},Sa.transition=function(){for(var t,n,e,r,u=this.id,i=++ka,a=[],o=0,c=this.length;c>o;o++){a.push(t=[]);for(var n=this[o],l=0,f=n.length;f>l;l++)(e=n[l])&&(r=Object.create(e.__transition__[u]),r.delay+=r.duration,zn(e,l,i,r)),t.push(e)}return Cn(a,i)},Sa.tween=function(t,n){var e=this.id;return 2>arguments.length?this.node().__transition__[e].tween.get(t):Tn(this,null==n?function(n){n.__transition__[e].tween.remove(t)}:function(r){r.__transition__[e].tween.set(t,n)})};var Aa,Na,Ta=0,qa={},Ca=null;Ci.timer=function(t,n,e){if(3>arguments.length){if(2>arguments.length)n=0;else if(!isFinite(n))return;e=Date.now()}var r=qa[t.id];r&&r.callback===t?(r.then=e,r.delay=n):qa[t.id=++Ta]=Ca={callback:t,then:e,delay:n,next:Ca},Aa||(Na=clearTimeout(Na),Aa=1,za(Fn))},Ci.timer.flush=function(){for(var t,n=Date.now(),e=Ca;e;)t=n-e.then,e.delay||(e.flush=e.callback(t)),e=e.next;Hn()};var za=Fi.requestAnimationFrame||Fi.webkitRequestAnimationFrame||Fi.mozRequestAnimationFrame||Fi.oRequestAnimationFrame||Fi.msRequestAnimationFrame||function(t){setTimeout(t,17)};Ci.mouse=function(t){return jn(t,P())};var Da=/WebKit/.test(Fi.navigator.userAgent)?-1:0;Ci.touches=function(t,n){return 2>arguments.length&&(n=P().touches),n?Ui(n).map(function(n){var e=jn(t,n);return e.identifier=n.identifier,e}):[]},Ci.scale={},Ci.scale.linear=function(){return In([0,1],[0,1],Ci.interpolate,!1)},Ci.scale.log=function(){return Kn(Ci.scale.linear(),Wn)};var La=Ci.format(\".0e\");Wn.pow=function(t){return Math.pow(10,t)},Qn.pow=function(t){return-Math.pow(10,-t)},Ci.scale.pow=function(){return te(Ci.scale.linear(),1)},Ci.scale.sqrt=function(){return Ci.scale.pow().exponent(.5)},Ci.scale.ordinal=function(){return ee([],{t:\"range\",a:[[]]})},Ci.scale.category10=function(){return Ci.scale.ordinal().range(Fa)},Ci.scale.category20=function(){return Ci.scale.ordinal().range(Ha)},Ci.scale.category20b=function(){return Ci.scale.ordinal().range(ja)},Ci.scale.category20c=function(){return Ci.scale.ordinal().range(Pa)};var Fa=[\"#1f77b4\",\"#ff7f0e\",\"#2ca02c\",\"#d62728\",\"#9467bd\",\"#8c564b\",\"#e377c2\",\"#7f7f7f\",\"#bcbd22\",\"#17becf\"],Ha=[\"#1f77b4\",\"#aec7e8\",\"#ff7f0e\",\"#ffbb78\",\"#2ca02c\",\"#98df8a\",\"#d62728\",\"#ff9896\",\"#9467bd\",\"#c5b0d5\",\"#8c564b\",\"#c49c94\",\"#e377c2\",\"#f7b6d2\",\"#7f7f7f\",\"#c7c7c7\",\"#bcbd22\",\"#dbdb8d\",\"#17becf\",\"#9edae5\"],ja=[\"#393b79\",\"#5254a3\",\"#6b6ecf\",\"#9c9ede\",\"#637939\",\"#8ca252\",\"#b5cf6b\",\"#cedb9c\",\"#8c6d31\",\"#bd9e39\",\"#e7ba52\",\"#e7cb94\",\"#843c39\",\"#ad494a\",\"#d6616b\",\"#e7969c\",\"#7b4173\",\"#a55194\",\"#ce6dbd\",\"#de9ed6\"],Pa=[\"#3182bd\",\"#6baed6\",\"#9ecae1\",\"#c6dbef\",\"#e6550d\",\"#fd8d3c\",\"#fdae6b\",\"#fdd0a2\",\"#31a354\",\"#74c476\",\"#a1d99b\",\"#c7e9c0\",\"#756bb1\",\"#9e9ac8\",\"#bcbddc\",\"#dadaeb\",\"#636363\",\"#969696\",\"#bdbdbd\",\"#d9d9d9\"];Ci.scale.quantile=function(){return re([],[])},Ci.scale.quantize=function(){return ue(0,1,[0,1])},Ci.scale.threshold=function(){return ie([.5],[0,1])},Ci.scale.identity=function(){return ae([0,1])},Ci.svg={},Ci.svg.arc=function(){function t(){var t=n.apply(this,arguments),i=e.apply(this,arguments),a=r.apply(this,arguments)+Ra,o=u.apply(this,arguments)+Ra,c=(a>o&&(c=a,a=o,o=c),o-a),l=Ti>c?\"0\":\"1\",f=Math.cos(a),s=Math.sin(a),h=Math.cos(o),g=Math.sin(o);return c>=Oa?t?\"M0,\"+i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+-i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+i+\"M0,\"+t+\"A\"+t+\",\"+t+\" 0 1,0 0,\"+-t+\"A\"+t+\",\"+t+\" 0 1,0 0,\"+t+\"Z\":\"M0,\"+i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+-i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+i+\"Z\":t?\"M\"+i*f+\",\"+i*s+\"A\"+i+\",\"+i+\" 0 \"+l+\",1 \"+i*h+\",\"+i*g+\"L\"+t*h+\",\"+t*g+\"A\"+t+\",\"+t+\" 0 \"+l+\",0 \"+t*f+\",\"+t*s+\"Z\":\"M\"+i*f+\",\"+i*s+\"A\"+i+\",\"+i+\" 0 \"+l+\",1 \"+i*h+\",\"+i*g+\"L0,0\"+\"Z\"}var n=oe,e=ce,r=le,u=fe;return t.innerRadius=function(e){return arguments.length?(n=c(e),t):n},t.outerRadius=function(n){return arguments.length?(e=c(n),t):e},t.startAngle=function(n){return arguments.length?(r=c(n),t):r},t.endAngle=function(n){return arguments.length?(u=c(n),t):u},t.centroid=function(){var t=(n.apply(this,arguments)+e.apply(this,arguments))/2,i=(r.apply(this,arguments)+u.apply(this,arguments))/2+Ra;return[Math.cos(i)*t,Math.sin(i)*t]},t};var Ra=-Ti/2,Oa=2*Ti-1e-6;Ci.svg.line=function(){return se(a)};var Ya=Ci.map({linear:pe,\"linear-closed\":de,\"step-before\":me,\"step-after\":ve,basis:we,\"basis-open\":Se,\"basis-closed\":ke,bundle:Ee,cardinal:be,\"cardinal-open\":ye,\"cardinal-closed\":Me,monotone:ze});Ya.forEach(function(t,n){n.key=t,n.closed=/-closed$/.test(t)});var Ua=[0,2/3,1/3,0],Ia=[0,1/3,2/3,0],Va=[0,1/6,2/3,1/6];Ci.svg.line.radial=function(){var t=se(De);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},me.reverse=ve,ve.reverse=me,Ci.svg.area=function(){return Le(a)},Ci.svg.area.radial=function(){var t=Le(De);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},Ci.svg.chord=function(){function e(t,n){var e=r(this,o,t,n),c=r(this,l,t,n);return\"M\"+e.p0+i(e.r,e.p1,e.a1-e.a0)+(u(e,c)?a(e.r,e.p1,e.r,e.p0):a(e.r,e.p1,c.r,c.p0)+i(c.r,c.p1,c.a1-c.a0)+a(c.r,c.p1,e.r,e.p0))+\"Z\"}function r(t,n,e,r){var u=n.call(t,e,r),i=f.call(t,u,r),a=s.call(t,u,r)+Ra,o=h.call(t,u,r)+Ra;return{r:i,a0:a,a1:o,p0:[i*Math.cos(a),i*Math.sin(a)],p1:[i*Math.cos(o),i*Math.sin(o)]}}function u(t,n){return t.a0==n.a0&&t.a1==n.a1}function i(t,n,e){return\"A\"+t+\",\"+t+\" 0 \"+ +(e>Ti)+\",1 \"+n}function a(t,n,e,r){return\"Q 0,0 \"+r}var o=n,l=t,f=Fe,s=le,h=fe;return e.radius=function(t){return arguments.length?(f=c(t),e):f},e.source=function(t){return arguments.length?(o=c(t),e):o},e.target=function(t){return arguments.length?(l=c(t),e):l},e.startAngle=function(t){return arguments.length?(s=c(t),e):s},e.endAngle=function(t){return arguments.length?(h=c(t),e):h},e},Ci.svg.diagonal=function(){function e(t,n){var e=r.call(this,t,n),a=u.call(this,t,n),o=(e.y+a.y)/2,c=[e,{x:e.x,y:o},{x:a.x,y:o},a];return c=c.map(i),\"M\"+c[0]+\"C\"+c[1]+\" \"+c[2]+\" \"+c[3]}var r=n,u=t,i=He;return e.source=function(t){return arguments.length?(r=c(t),e):r},e.target=function(t){return arguments.length?(u=c(t),e):u},e.projection=function(t){return arguments.length?(i=t,e):i},e},Ci.svg.diagonal.radial=function(){var t=Ci.svg.diagonal(),n=He,e=t.projection;return t.projection=function(t){return arguments.length?e(je(n=t)):n},t},Ci.svg.symbol=function(){function t(t,r){return(Za.get(n.call(this,t,r))||Oe)(e.call(this,t,r))}var n=Re,e=Pe;return t.type=function(e){return arguments.length?(n=c(e),t):n},t.size=function(n){return arguments.length?(e=c(n),t):e},t};var Za=Ci.map({circle:Oe,cross:function(t){var n=Math.sqrt(t/5)/2;return\"M\"+-3*n+\",\"+-n+\"H\"+-n+\"V\"+-3*n+\"H\"+n+\"V\"+-n+\"H\"+3*n+\"V\"+n+\"H\"+n+\"V\"+3*n+\"H\"+-n+\"V\"+n+\"H\"+-3*n+\"Z\"},diamond:function(t){var n=Math.sqrt(t/(2*Ba)),e=n*Ba;return\"M0,\"+-n+\"L\"+e+\",0\"+\" 0,\"+n+\" \"+-e+\",0\"+\"Z\"},square:function(t){var n=Math.sqrt(t)/2;return\"M\"+-n+\",\"+-n+\"L\"+n+\",\"+-n+\" \"+n+\",\"+n+\" \"+-n+\",\"+n+\"Z\"},\"triangle-down\":function(t){var n=Math.sqrt(t/Xa),e=n*Xa/2;return\"M0,\"+e+\"L\"+n+\",\"+-e+\" \"+-n+\",\"+-e+\"Z\"},\"triangle-up\":function(t){var n=Math.sqrt(t/Xa),e=n*Xa/2;return\"M0,\"+-e+\"L\"+n+\",\"+e+\" \"+-n+\",\"+e+\"Z\"}});Ci.svg.symbolTypes=Za.keys();var Xa=Math.sqrt(3),Ba=Math.tan(30*zi);Ci.svg.axis=function(){function t(t){t.each(function(){var t,s=Ci.select(this),h=null==l?e.ticks?e.ticks.apply(e,c):e.domain():l,g=null==n?e.tickFormat?e.tickFormat.apply(e,c):String:n,p=Ie(e,h,f),d=s.selectAll(\".tick.minor\").data(p,String),m=d.enter().insert(\"line\",\".tick\").attr(\"class\",\"tick minor\").style(\"opacity\",1e-6),v=Ci.transition(d.exit()).style(\"opacity\",1e-6).remove(),y=Ci.transition(d).style(\"opacity\",1),M=s.selectAll(\".tick.major\").data(h,String),b=M.enter().insert(\"g\",\"path\").attr(\"class\",\"tick major\").style(\"opacity\",1e-6),x=Ci.transition(M.exit()).style(\"opacity\",1e-6).remove(),_=Ci.transition(M).style(\"opacity\",1),w=On(e),S=s.selectAll(\".domain\").data([0]),k=(S.enter().append(\"path\").attr(\"class\",\"domain\"),Ci.transition(S)),E=e.copy(),A=this.__chart__||E;this.__chart__=E,b.append(\"line\"),b.append(\"text\");var N=b.select(\"line\"),T=_.select(\"line\"),q=M.select(\"text\").text(g),C=b.select(\"text\"),z=_.select(\"text\");switch(r){case\"bottom\":t=Ye,m.attr(\"y2\",i),y.attr(\"x2\",0).attr(\"y2\",i),N.attr(\"y2\",u),C.attr(\"y\",Math.max(u,0)+o),T.attr(\"x2\",0).attr(\"y2\",u),z.attr(\"x\",0).attr(\"y\",Math.max(u,0)+o),q.attr(\"dy\",\".71em\").style(\"text-anchor\",\"middle\"),k.attr(\"d\",\"M\"+w[0]+\",\"+a+\"V0H\"+w[1]+\"V\"+a);break;case\"top\":t=Ye,m.attr(\"y2\",-i),y.attr(\"x2\",0).attr(\"y2\",-i),N.attr(\"y2\",-u),C.attr(\"y\",-(Math.max(u,0)+o)),T.attr(\"x2\",0).attr(\"y2\",-u),z.attr(\"x\",0).attr(\"y\",-(Math.max(u,0)+o)),q.attr(\"dy\",\"0em\").style(\"text-anchor\",\"middle\"),k.attr(\"d\",\"M\"+w[0]+\",\"+-a+\"V0H\"+w[1]+\"V\"+-a);break;case\"left\":t=Ue,m.attr(\"x2\",-i),y.attr(\"x2\",-i).attr(\"y2\",0),N.attr(\"x2\",-u),C.attr(\"x\",-(Math.max(u,0)+o)),T.attr(\"x2\",-u).attr(\"y2\",0),z.attr(\"x\",-(Math.max(u,0)+o)).attr(\"y\",0),q.attr(\"dy\",\".32em\").style(\"text-anchor\",\"end\"),k.attr(\"d\",\"M\"+-a+\",\"+w[0]+\"H0V\"+w[1]+\"H\"+-a);break;case\"right\":t=Ue,m.attr(\"x2\",i),y.attr(\"x2\",i).attr(\"y2\",0),N.attr(\"x2\",u),C.attr(\"x\",Math.max(u,0)+o),T.attr(\"x2\",u).attr(\"y2\",0),z.attr(\"x\",Math.max(u,0)+o).attr(\"y\",0),q.attr(\"dy\",\".32em\").style(\"text-anchor\",\"start\"),k.attr(\"d\",\"M\"+a+\",\"+w[0]+\"H0V\"+w[1]+\"H\"+a)}if(e.ticks)b.call(t,A),_.call(t,E),x.call(t,E),m.call(t,A),y.call(t,E),v.call(t,E);else{var D=E.rangeBand()/2,L=function(t){return E(t)+D};b.call(t,L),_.call(t,L)}})}var n,e=Ci.scale.linear(),r=$a,u=6,i=6,a=6,o=3,c=[10],l=null,f=0;return t.scale=function(n){return arguments.length?(e=n,t):e},t.orient=function(n){return arguments.length?(r=n in Ja?n+\"\":$a,t):r},t.ticks=function(){return arguments.length?(c=arguments,t):c},t.tickValues=function(n){return arguments.length?(l=n,t):l},t.tickFormat=function(e){return arguments.length?(n=e,t):n},t.tickSize=function(n,e){if(!arguments.length)return u;var r=arguments.length-1;return u=+n,i=r>1?+e:u,a=r>0?+arguments[r]:u,t},t.tickPadding=function(n){return arguments.length?(o=+n,t):o},t.tickSubdivide=function(n){return arguments.length?(f=+n,t):f},t};var $a=\"bottom\",Ja={top:1,right:1,bottom:1,left:1};Ci.svg.brush=function(){function t(i){i.each(function(){var i,a=Ci.select(this),f=a.selectAll(\".background\").data([0]),s=a.selectAll(\".extent\").data([0]),h=a.selectAll(\".resize\").data(l,String);a.style(\"pointer-events\",\"all\").on(\"mousedown.brush\",u).on(\"touchstart.brush\",u),f.enter().append(\"rect\").attr(\"class\",\"background\").style(\"visibility\",\"hidden\").style(\"cursor\",\"crosshair\"),s.enter().append(\"rect\").attr(\"class\",\"extent\").style(\"cursor\",\"move\"),h.enter().append(\"g\").attr(\"class\",function(t){return\"resize \"+t}).style(\"cursor\",function(t){return Ga[t]}).append(\"rect\").attr(\"x\",function(t){return/[ew]$/.test(t)?-3:null}).attr(\"y\",function(t){return/^[ns]/.test(t)?-3:null}).attr(\"width\",6).attr(\"height\",6).style(\"visibility\",\"hidden\"),h.style(\"display\",t.empty()?\"none\":null),h.exit().remove(),o&&(i=On(o),f.attr(\"x\",i[0]).attr(\"width\",i[1]-i[0]),e(a)),c&&(i=On(c),f.attr(\"y\",i[0]).attr(\"height\",i[1]-i[0]),r(a)),n(a)})}function n(t){t.selectAll(\".resize\").attr(\"transform\",function(t){return\"translate(\"+f[+/e$/.test(t)][0]+\",\"+f[+/^s/.test(t)][1]+\")\"})}function e(t){t.select(\".extent\").attr(\"x\",f[0][0]),t.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\",f[1][0]-f[0][0])}function r(t){t.select(\".extent\").attr(\"y\",f[0][1]),t.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\",f[1][1]-f[0][1])}function u(){function u(){var t=Ci.event.changedTouches;return t?Ci.touches(v,t)[0]:Ci.mouse(v)}function l(){32==Ci.event.keyCode&&(S||(d=null,k[0]-=f[1][0],k[1]-=f[1][1],S=2),j())}function s(){32==Ci.event.keyCode&&2==S&&(k[0]+=f[1][0],k[1]+=f[1][1],S=0,j())}function h(){var t=u(),i=!1;m&&(t[0]+=m[0],t[1]+=m[1]),S||(Ci.event.altKey?(d||(d=[(f[0][0]+f[1][0])/2,(f[0][1]+f[1][1])/2]),k[0]=f[+(t[0]<d[0])][0],k[1]=f[+(t[1]<d[1])][1]):d=null),_&&g(t,o,0)&&(e(b),i=!0),w&&g(t,c,1)&&(r(b),i=!0),i&&(n(b),M({type:\"brush\",mode:S?\"move\":\"resize\"}))}function g(t,n,e){var r,u,a=On(n),o=a[0],c=a[1],l=k[e],s=f[1][e]-f[0][e];return S&&(o-=l,c-=s+l),r=Math.max(o,Math.min(c,t[e])),S?u=(r+=l)+s:(d&&(l=Math.max(o,Math.min(c,2*d[e]-r))),r>l?(u=r,r=l):u=l),f[0][e]!==r||f[1][e]!==u?(i=null,f[0][e]=r,f[1][e]=u,!0):void 0}function p(){h(),b.style(\"pointer-events\",\"all\").selectAll(\".resize\").style(\"display\",t.empty()?\"none\":null),Ci.select(\"body\").style(\"cursor\",null),E.on(\"mousemove.brush\",null).on(\"mouseup.brush\",null).on(\"touchmove.brush\",null).on(\"touchend.brush\",null).on(\"keydown.brush\",null).on(\"keyup.brush\",null),M({type:\"brushend\"}),j()}var d,m,v=this,y=Ci.select(Ci.event.target),M=a.of(v,arguments),b=Ci.select(v),x=y.datum(),_=!/^(n|s)$/.test(x)&&o,w=!/^(e|w)$/.test(x)&&c,S=y.classed(\"extent\"),k=u(),E=Ci.select(Fi).on(\"mousemove.brush\",h).on(\"mouseup.brush\",p).on(\"touchmove.brush\",h).on(\"touchend.brush\",p).on(\"keydown.brush\",l).on(\"keyup.brush\",s);if(S)k[0]=f[0][0]-k[0],k[1]=f[0][1]-k[1];else if(x){var A=+/w$/.test(x),N=+/^n/.test(x);m=[f[1-A][0]-k[0],f[1-N][1]-k[1]],k[0]=f[A][0],k[1]=f[N][1]}else Ci.event.altKey&&(d=k.slice());b.style(\"pointer-events\",\"none\").selectAll(\".resize\").style(\"display\",null),Ci.select(\"body\").style(\"cursor\",y.style(\"cursor\")),M({type:\"brushstart\"}),h(),j()}var i,a=R(t,\"brushstart\",\"brush\",\"brushend\"),o=null,c=null,l=Ka[0],f=[[0,0],[0,0]];return t.x=function(n){return arguments.length?(o=n,l=Ka[!o<<1|!c],t):o},t.y=function(n){return arguments.length?(c=n,l=Ka[!o<<1|!c],t):c},t.extent=function(n){var e,r,u,a,l;return arguments.length?(i=[[0,0],[0,0]],o&&(e=n[0],r=n[1],c&&(e=e[0],r=r[0]),i[0][0]=e,i[1][0]=r,o.invert&&(e=o(e),r=o(r)),e>r&&(l=e,e=r,r=l),f[0][0]=0|e,f[1][0]=0|r),c&&(u=n[0],a=n[1],o&&(u=u[1],a=a[1]),i[0][1]=u,i[1][1]=a,c.invert&&(u=c(u),a=c(a)),u>a&&(l=u,u=a,a=l),f[0][1]=0|u,f[1][1]=0|a),t):(n=i||f,o&&(e=n[0][0],r=n[1][0],i||(e=f[0][0],r=f[1][0],o.invert&&(e=o.invert(e),r=o.invert(r)),e>r&&(l=e,e=r,r=l))),c&&(u=n[0][1],a=n[1][1],i||(u=f[0][1],a=f[1][1],c.invert&&(u=c.invert(u),a=c.invert(a)),u>a&&(l=u,u=a,a=l))),o&&c?[[e,u],[r,a]]:o?[e,r]:c&&[u,a])},t.clear=function(){return i=null,f[0][0]=f[0][1]=f[1][0]=f[1][1]=0,t},t.empty=function(){return o&&f[0][0]===f[1][0]||c&&f[0][1]===f[1][1]},Ci.rebind(t,a,\"on\")};var Ga={n:\"ns-resize\",e:\"ew-resize\",s:\"ns-resize\",w:\"ew-resize\",nw:\"nwse-resize\",ne:\"nesw-resize\",se:\"nwse-resize\",sw:\"nesw-resize\"},Ka=[[\"n\",\"e\",\"s\",\"w\",\"nw\",\"ne\",\"se\",\"sw\"],[\"e\",\"w\"],[\"n\",\"s\"],[]];Ci.behavior={},Ci.behavior.drag=function(){function t(){this.on(\"mousedown.drag\",n).on(\"touchstart.drag\",n)}function n(){function t(){var t=o.parentNode;return null!=f?Ci.touches(t).filter(function(t){return t.identifier===f})[0]:Ci.mouse(t)}function n(){if(!o.parentNode)return u();var n=t(),e=n[0]-s[0],r=n[1]-s[1];h|=e|r,s=n,j(),c({type:\"drag\",x:n[0]+a[0],y:n[1]+a[1],dx:e,dy:r})}function u(){c({type:\"dragend\"}),h&&(j(),Ci.event.target===l&&g.on(\"click.drag\",i,!0)),g.on(null!=f?\"touchmove.drag-\"+f:\"mousemove.drag\",null).on(null!=f?\"touchend.drag-\"+f:\"mouseup.drag\",null)}function i(){j(),g.on(\"click.drag\",null)}var a,o=this,c=e.of(o,arguments),l=Ci.event.target,f=Ci.event.touches?Ci.event.changedTouches[0].identifier:null,s=t(),h=0,g=Ci.select(Fi).on(null!=f?\"touchmove.drag-\"+f:\"mousemove.drag\",n).on(null!=f?\"touchend.drag-\"+f:\"mouseup.drag\",u,!0);r?(a=r.apply(o,arguments),a=[a.x-s[0],a.y-s[1]]):a=[0,0],null==f&&j(),c({type:\"dragstart\"})}var e=R(t,\"drag\",\"dragstart\",\"dragend\"),r=null;return t.origin=function(n){return arguments.length?(r=n,t):r},Ci.rebind(t,e,\"on\")},Ci.behavior.zoom=function(){function t(){this.on(\"mousedown.zoom\",o).on(\"mousemove.zoom\",l).on(to+\".zoom\",c).on(\"dblclick.zoom\",f).on(\"touchstart.zoom\",s).on(\"touchmove.zoom\",h).on(\"touchend.zoom\",s)}function n(t){return[(t[0]-b[0])/x,(t[1]-b[1])/x]}function e(t){return[t[0]*x+b[0],t[1]*x+b[1]]}function r(t){x=Math.max(_[0],Math.min(_[1],t))}function u(t,n){n=e(n),b[0]+=t[0]-n[0],b[1]+=t[1]-n[1]}function i(){m&&m.domain(d.range().map(function(t){return(t-b[0])/x}).map(d.invert)),y&&y.domain(v.range().map(function(t){return(t-b[1])/x}).map(v.invert))}function a(t){i(),Ci.event.preventDefault(),t({type:\"zoom\",scale:x,translate:b})}function o(){function t(){l=1,u(Ci.mouse(i),s),a(o)}function e(){l&&j(),f.on(\"mousemove.zoom\",null).on(\"mouseup.zoom\",null),l&&Ci.event.target===c&&f.on(\"click.zoom\",r,!0)}function r(){j(),f.on(\"click.zoom\",null)}var i=this,o=w.of(i,arguments),c=Ci.event.target,l=0,f=Ci.select(Fi).on(\"mousemove.zoom\",t).on(\"mouseup.zoom\",e),s=n(Ci.mouse(i));Fi.focus(),j()}function c(){g||(g=n(Ci.mouse(this))),r(Math.pow(2,.002*Wa())*x),u(Ci.mouse(this),g),a(w.of(this,arguments))}function l(){g=null}function f(){var t=Ci.mouse(this),e=n(t),i=Math.log(x)/Math.LN2;r(Math.pow(2,Ci.event.shiftKey?Math.ceil(i)-1:Math.floor(i)+1)),u(t,e),a(w.of(this,arguments))}function s(){var t=Ci.touches(this),e=Date.now();if(p=x,g={},t.forEach(function(t){g[t.identifier]=n(t)}),j(),1===t.length){if(500>e-M){var i=t[0],o=n(t[0]);r(2*x),u(i,o),a(w.of(this,arguments))}M=e}}function h(){var t=Ci.touches(this),n=t[0],e=g[n.identifier];if(i=t[1]){var i,o=g[i.identifier];n=[(n[0]+i[0])/2,(n[1]+i[1])/2],e=[(e[0]+o[0])/2,(e[1]+o[1])/2],r(Ci.event.scale*p)}u(n,e),M=null,a(w.of(this,arguments))}var g,p,d,m,v,y,M,b=[0,0],x=1,_=Qa,w=R(t,\"zoom\");return t.translate=function(n){return arguments.length?(b=n.map(Number),i(),t):b},t.scale=function(n){return arguments.length?(x=+n,i(),t):x},t.scaleExtent=function(n){return arguments.length?(_=null==n?Qa:n.map(Number),t):_},t.x=function(n){return arguments.length?(m=n,d=n.copy(),b=[0,0],x=1,t):m},t.y=function(n){return arguments.length?(y=n,v=n.copy(),b=[0,0],x=1,t):y},Ci.rebind(t,w,\"on\")};var Wa,Qa=[0,1/0],to=\"onwheel\"in document?(Wa=function(){return-Ci.event.deltaY*(Ci.event.deltaMode?120:1)},\"wheel\"):\"onmousewheel\"in document?(Wa=function(){return Ci.event.wheelDelta},\"mousewheel\"):(Wa=function(){return-Ci.event.detail},\"MozMousePixelScroll\");Ci.layout={},Ci.layout.bundle=function(){return function(t){for(var n=[],e=-1,r=t.length;r>++e;)n.push(Ve(t[e]));return n}},Ci.layout.chord=function(){function t(){var t,l,s,h,g,p={},d=[],m=Ci.range(i),v=[];for(e=[],r=[],t=0,h=-1;i>++h;){for(l=0,g=-1;i>++g;)l+=u[h][g];d.push(l),v.push(Ci.range(i)),t+=l}for(a&&m.sort(function(t,n){return a(d[t],d[n])}),o&&v.forEach(function(t,n){t.sort(function(t,e){return o(u[n][t],u[n][e])})}),t=(2*Ti-f*i)/t,l=0,h=-1;i>++h;){for(s=l,g=-1;i>++g;){var y=m[h],M=v[y][g],b=u[y][M],x=l,_=l+=b*t;p[y+\"-\"+M]={index:y,subindex:M,startAngle:x,endAngle:_,value:b}}r[y]={index:y,startAngle:s,endAngle:l,value:(l-s)/t},l+=f}for(h=-1;i>++h;)for(g=h-1;i>++g;){var w=p[h+\"-\"+g],S=p[g+\"-\"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}c&&n()}function n(){e.sort(function(t,n){return c((t.source.value+t.target.value)/2,(n.source.value+n.target.value)/2)})}var e,r,u,i,a,o,c,l={},f=0;return l.matrix=function(t){return arguments.length?(i=(u=t)&&u.length,e=r=null,l):u},l.padding=function(t){return arguments.length?(f=t,e=r=null,l):f},l.sortGroups=function(t){return arguments.length?(a=t,e=r=null,l):a},l.sortSubgroups=function(t){return arguments.length?(o=t,e=null,l):o},l.sortChords=function(t){return arguments.length?(c=t,e&&n(),l):c},l.chords=function(){return e||t(),e},l.groups=function(){return r||t(),r},l},Ci.layout.force=function(){function t(t){return function(n,e,r,u){if(n.point!==t){var i=n.cx-t.x,a=n.cy-t.y,o=1/Math.sqrt(i*i+a*a);if(m>(u-e)*o){var c=n.charge*o*o;return t.px-=i*c,t.py-=a*c,!0}if(n.point&&isFinite(o)){var c=n.pointCharge*o*o;t.px-=i*c,t.py-=a*c}}return!n.charge}}function n(t){t.px=Ci.event.x,t.py=Ci.event.y,c.resume()}var e,r,u,i,o,c={},l=Ci.dispatch(\"start\",\"tick\",\"end\"),f=[1,1],s=.9,h=no,g=eo,p=-30,d=.1,m=.8,v=[],y=[];return c.tick=function(){if(.005>(r*=.99))return l.end({type:\"end\",alpha:r=0}),!0;var n,e,a,c,h,g,m,M,b,x=v.length,_=y.length;for(e=0;_>e;++e)a=y[e],c=a.source,h=a.target,M=h.x-c.x,b=h.y-c.y,(g=M*M+b*b)&&(g=r*i[e]*((g=Math.sqrt(g))-u[e])/g,M*=g,b*=g,h.x-=M*(m=c.weight/(h.weight+c.weight)),h.y-=b*m,c.x+=M*(m=1-m),c.y+=b*m);if((m=r*d)&&(M=f[0]/2,b=f[1]/2,e=-1,m))for(;x>++e;)a=v[e],a.x+=(M-a.x)*m,a.y+=(b-a.y)*m;if(p)for(Ke(n=Ci.geom.quadtree(v),r,o),e=-1;x>++e;)(a=v[e]).fixed||n.visit(t(a));for(e=-1;x>++e;)a=v[e],a.fixed?(a.x=a.px,a.y=a.py):(a.x-=(a.px-(a.px=a.x))*s,a.y-=(a.py-(a.py=a.y))*s);l.tick({type:\"tick\",alpha:r})},c.nodes=function(t){return arguments.length?(v=t,c):v},c.links=function(t){return arguments.length?(y=t,c):y},c.size=function(t){return arguments.length?(f=t,c):f},c.linkDistance=function(t){return arguments.length?(h=\"function\"==typeof t?t:+t,c):h},c.distance=c.linkDistance,c.linkStrength=function(t){return arguments.length?(g=\"function\"==typeof t?t:+t,c):g},c.friction=function(t){return arguments.length?(s=+t,c):s},c.charge=function(t){return arguments.length?(p=\"function\"==typeof t?t:+t,c):p},c.gravity=function(t){return arguments.length?(d=+t,c):d},c.theta=function(t){return arguments.length?(m=+t,c):m},c.alpha=function(t){return arguments.length?(t=+t,r?r=t>0?t:0:t>0&&(l.start({type:\"start\",alpha:r=t}),Ci.timer(c.tick)),c):r},c.start=function(){function t(t,r){for(var u,i=n(e),a=-1,o=i.length;o>++a;)if(!isNaN(u=i[a][t]))return u;\n    4: return Math.random()*r}function n(){if(!a){for(a=[],r=0;s>r;++r)a[r]=[];for(r=0;d>r;++r){var t=y[r];a[t.source.index].push(t.target),a[t.target.index].push(t.source)}}return a[e]}var e,r,a,l,s=v.length,d=y.length,m=f[0],M=f[1];for(e=0;s>e;++e)(l=v[e]).index=e,l.weight=0;for(e=0;d>e;++e)l=y[e],\"number\"==typeof l.source&&(l.source=v[l.source]),\"number\"==typeof l.target&&(l.target=v[l.target]),++l.source.weight,++l.target.weight;for(e=0;s>e;++e)l=v[e],isNaN(l.x)&&(l.x=t(\"x\",m)),isNaN(l.y)&&(l.y=t(\"y\",M)),isNaN(l.px)&&(l.px=l.x),isNaN(l.py)&&(l.py=l.y);if(u=[],\"function\"==typeof h)for(e=0;d>e;++e)u[e]=+h.call(this,y[e],e);else for(e=0;d>e;++e)u[e]=h;if(i=[],\"function\"==typeof g)for(e=0;d>e;++e)i[e]=+g.call(this,y[e],e);else for(e=0;d>e;++e)i[e]=g;if(o=[],\"function\"==typeof p)for(e=0;s>e;++e)o[e]=+p.call(this,v[e],e);else for(e=0;s>e;++e)o[e]=p;return c.resume()},c.resume=function(){return c.alpha(.1)},c.stop=function(){return c.alpha(0)},c.drag=function(){return e||(e=Ci.behavior.drag().origin(a).on(\"dragstart.force\",Be).on(\"drag.force\",n).on(\"dragend.force\",$e)),arguments.length?(this.on(\"mouseover.force\",Je).on(\"mouseout.force\",Ge).call(e),void 0):e},Ci.rebind(c,l,\"on\")};var no=20,eo=1;Ci.layout.partition=function(){function t(n,e,r,u){var i=n.children;if(n.x=e,n.y=n.depth*u,n.dx=r,n.dy=u,i&&(a=i.length)){var a,o,c,l=-1;for(r=n.value?r/n.value:0;a>++l;)t(o=i[l],e,c=o.value*r,u),e+=c}}function n(t){var e=t.children,r=0;if(e&&(u=e.length))for(var u,i=-1;u>++i;)r=Math.max(r,n(e[i]));return 1+r}function e(e,i){var a=r.call(this,e,i);return t(a[0],0,u[0],u[1]/n(a[0])),a}var r=Ci.layout.hierarchy(),u=[1,1];return e.size=function(t){return arguments.length?(u=t,e):u},lr(e,r)},Ci.layout.pie=function(){function t(i){var a=i.map(function(e,r){return+n.call(t,e,r)}),o=+(\"function\"==typeof r?r.apply(this,arguments):r),c=((\"function\"==typeof u?u.apply(this,arguments):u)-r)/Ci.sum(a),l=Ci.range(i.length);null!=e&&l.sort(e===ro?function(t,n){return a[n]-a[t]}:function(t,n){return e(i[t],i[n])});var f=[];return l.forEach(function(t){var n;f[t]={data:i[t],value:n=a[t],startAngle:o,endAngle:o+=n*c}}),f}var n=Number,e=ro,r=0,u=2*Ti;return t.value=function(e){return arguments.length?(n=e,t):n},t.sort=function(n){return arguments.length?(e=n,t):e},t.startAngle=function(n){return arguments.length?(r=n,t):r},t.endAngle=function(n){return arguments.length?(u=n,t):u},t};var ro={};Ci.layout.stack=function(){function t(a,c){var l=a.map(function(e,r){return n.call(t,e,r)}),f=l.map(function(n){return n.map(function(n,e){return[i.call(t,n,e),o.call(t,n,e)]})}),s=e.call(t,f,c);l=Ci.permute(l,s),f=Ci.permute(f,s);var h,g,p,d=r.call(t,f,c),m=l.length,v=l[0].length;for(g=0;v>g;++g)for(u.call(t,l[0][g],p=d[g],f[0][g][1]),h=1;m>h;++h)u.call(t,l[h][g],p+=f[h-1][g][1],f[h][g][1]);return a}var n=a,e=nr,r=er,u=tr,i=We,o=Qe;return t.values=function(e){return arguments.length?(n=e,t):n},t.order=function(n){return arguments.length?(e=\"function\"==typeof n?n:uo.get(n)||nr,t):e},t.offset=function(n){return arguments.length?(r=\"function\"==typeof n?n:io.get(n)||er,t):r},t.x=function(n){return arguments.length?(i=n,t):i},t.y=function(n){return arguments.length?(o=n,t):o},t.out=function(n){return arguments.length?(u=n,t):u},t};var uo=Ci.map({\"inside-out\":function(t){var n,e,r=t.length,u=t.map(rr),i=t.map(ur),a=Ci.range(r).sort(function(t,n){return u[t]-u[n]}),o=0,c=0,l=[],f=[];for(n=0;r>n;++n)e=a[n],c>o?(o+=i[e],l.push(e)):(c+=i[e],f.push(e));return f.reverse().concat(l)},reverse:function(t){return Ci.range(t.length).reverse()},\"default\":nr}),io=Ci.map({silhouette:function(t){var n,e,r,u=t.length,i=t[0].length,a=[],o=0,c=[];for(e=0;i>e;++e){for(n=0,r=0;u>n;n++)r+=t[n][e][1];r>o&&(o=r),a.push(r)}for(e=0;i>e;++e)c[e]=(o-a[e])/2;return c},wiggle:function(t){var n,e,r,u,i,a,o,c,l,f=t.length,s=t[0],h=s.length,g=[];for(g[0]=c=l=0,e=1;h>e;++e){for(n=0,u=0;f>n;++n)u+=t[n][e][1];for(n=0,i=0,o=s[e][0]-s[e-1][0];f>n;++n){for(r=0,a=(t[n][e][1]-t[n][e-1][1])/(2*o);n>r;++r)a+=(t[r][e][1]-t[r][e-1][1])/o;i+=a*t[n][e][1]}g[e]=c-=u?i/u*o:0,l>c&&(l=c)}for(e=0;h>e;++e)g[e]-=l;return g},expand:function(t){var n,e,r,u=t.length,i=t[0].length,a=1/u,o=[];for(e=0;i>e;++e){for(n=0,r=0;u>n;n++)r+=t[n][e][1];if(r)for(n=0;u>n;n++)t[n][e][1]/=r;else for(n=0;u>n;n++)t[n][e][1]=a}for(e=0;i>e;++e)o[e]=0;return o},zero:er});Ci.layout.histogram=function(){function t(t,i){for(var a,o,c=[],l=t.map(e,this),f=r.call(this,l,i),s=u.call(this,f,l,i),i=-1,h=l.length,g=s.length-1,p=n?1:1/h;g>++i;)a=c[i]=[],a.dx=s[i+1]-(a.x=s[i]),a.y=0;if(g>0)for(i=-1;h>++i;)o=l[i],o>=f[0]&&f[1]>=o&&(a=c[Ci.bisect(s,o,1,g)-1],a.y+=p,a.push(t[i]));return c}var n=!0,e=Number,r=cr,u=ar;return t.value=function(n){return arguments.length?(e=n,t):e},t.range=function(n){return arguments.length?(r=c(n),t):r},t.bins=function(n){return arguments.length?(u=\"number\"==typeof n?function(t){return or(t,n)}:c(n),t):u},t.frequency=function(e){return arguments.length?(n=!!e,t):n},t},Ci.layout.hierarchy=function(){function t(n,a,o){var c=u.call(e,n,a);if(n.depth=a,o.push(n),c&&(l=c.length)){for(var l,f,s=-1,h=n.children=[],g=0,p=a+1;l>++s;)f=t(c[s],p,o),f.parent=n,h.push(f),g+=f.value;r&&h.sort(r),i&&(n.value=g)}else i&&(n.value=+i.call(e,n,a)||0);return n}function n(t,r){var u=t.children,a=0;if(u&&(o=u.length))for(var o,c=-1,l=r+1;o>++c;)a+=n(u[c],l);else i&&(a=+i.call(e,t,r)||0);return i&&(t.value=a),a}function e(n){var e=[];return t(n,0,e),e}var r=hr,u=fr,i=sr;return e.sort=function(t){return arguments.length?(r=t,e):r},e.children=function(t){return arguments.length?(u=t,e):u},e.value=function(t){return arguments.length?(i=t,e):i},e.revalue=function(t){return n(t,0),t},e},Ci.layout.pack=function(){function t(t,u){var i=n.call(this,t,u),a=i[0];a.x=0,a.y=0,Lr(a,function(t){t.r=Math.sqrt(t.value)}),Lr(a,yr);var o=r[0],c=r[1],l=Math.max(2*a.r/o,2*a.r/c);if(e>0){var f=e*l/2;Lr(a,function(t){t.r+=f}),Lr(a,yr),Lr(a,function(t){t.r-=f}),l=Math.max(2*a.r/o,2*a.r/c)}return xr(a,o/2,c/2,1/l),i}var n=Ci.layout.hierarchy().sort(pr),e=0,r=[1,1];return t.size=function(n){return arguments.length?(r=n,t):r},t.padding=function(n){return arguments.length?(e=+n,t):e},lr(t,n)},Ci.layout.cluster=function(){function t(t,u){var i,a=n.call(this,t,u),o=a[0],c=0;Lr(o,function(t){var n=t.children;n&&n.length?(t.x=Sr(n),t.y=wr(n)):(t.x=i?c+=e(t,i):0,t.y=0,i=t)});var l=kr(o),f=Er(o),s=l.x-e(l,f)/2,h=f.x+e(f,l)/2;return Lr(o,function(t){t.x=(t.x-s)/(h-s)*r[0],t.y=(1-(o.y?t.y/o.y:1))*r[1]}),a}var n=Ci.layout.hierarchy().sort(null).value(null),e=Ar,r=[1,1];return t.separation=function(n){return arguments.length?(e=n,t):e},t.size=function(n){return arguments.length?(r=n,t):r},lr(t,n)},Ci.layout.tree=function(){function t(t,u){function i(t,n){var r=t.children,u=t._tree;if(r&&(a=r.length)){for(var a,c,l,f=r[0],s=f,h=-1;a>++h;)l=r[h],i(l,c),s=o(l,c,s),c=l;Fr(t);var g=.5*(f._tree.prelim+l._tree.prelim);n?(u.prelim=n._tree.prelim+e(t,n),u.mod=u.prelim-g):u.prelim=g}else n&&(u.prelim=n._tree.prelim+e(t,n))}function a(t,n){t.x=t._tree.prelim+n;var e=t.children;if(e&&(r=e.length)){var r,u=-1;for(n+=t._tree.mod;r>++u;)a(e[u],n)}}function o(t,n,r){if(n){for(var u,i=t,a=t,o=n,c=t.parent.children[0],l=i._tree.mod,f=a._tree.mod,s=o._tree.mod,h=c._tree.mod;o=Tr(o),i=Nr(i),o&&i;)c=Nr(c),a=Tr(a),a._tree.ancestor=t,u=o._tree.prelim+s-i._tree.prelim-l+e(o,i),u>0&&(Hr(jr(o,t,r),t,u),l+=u,f+=u),s+=o._tree.mod,l+=i._tree.mod,h+=c._tree.mod,f+=a._tree.mod;o&&!Tr(a)&&(a._tree.thread=o,a._tree.mod+=s-f),i&&!Nr(c)&&(c._tree.thread=i,c._tree.mod+=l-h,r=t)}return r}var c=n.call(this,t,u),l=c[0];Lr(l,function(t,n){t._tree={ancestor:t,prelim:0,mod:0,change:0,shift:0,number:n?n._tree.number+1:0}}),i(l),a(l,-l._tree.prelim);var f=qr(l,zr),s=qr(l,Cr),h=qr(l,Dr),g=f.x-e(f,s)/2,p=s.x+e(s,f)/2,d=h.depth||1;return Lr(l,function(t){t.x=(t.x-g)/(p-g)*r[0],t.y=t.depth/d*r[1],delete t._tree}),c}var n=Ci.layout.hierarchy().sort(null).value(null),e=Ar,r=[1,1];return t.separation=function(n){return arguments.length?(e=n,t):e},t.size=function(n){return arguments.length?(r=n,t):r},lr(t,n)},Ci.layout.treemap=function(){function t(t,n){for(var e,r,u=-1,i=t.length;i>++u;)r=(e=t[u]).value*(0>n?0:n),e.area=isNaN(r)||0>=r?0:r}function n(e){var i=e.children;if(i&&i.length){var a,o,c,l=s(e),f=[],h=i.slice(),p=1/0,d=\"slice\"===g?l.dx:\"dice\"===g?l.dy:\"slice-dice\"===g?1&e.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(t(h,l.dx*l.dy/e.value),f.area=0;(c=h.length)>0;)f.push(a=h[c-1]),f.area+=a.area,\"squarify\"!==g||p>=(o=r(f,d))?(h.pop(),p=o):(f.area-=f.pop().area,u(f,d,l,!1),d=Math.min(l.dx,l.dy),f.length=f.area=0,p=1/0);f.length&&(u(f,d,l,!0),f.length=f.area=0),i.forEach(n)}}function e(n){var r=n.children;if(r&&r.length){var i,a=s(n),o=r.slice(),c=[];for(t(o,a.dx*a.dy/n.value),c.area=0;i=o.pop();)c.push(i),c.area+=i.area,null!=i.z&&(u(c,i.z?a.dx:a.dy,a,!o.length),c.length=c.area=0);r.forEach(e)}}function r(t,n){for(var e,r=t.area,u=0,i=1/0,a=-1,o=t.length;o>++a;)(e=t[a].area)&&(i>e&&(i=e),e>u&&(u=e));return r*=r,n*=n,r?Math.max(n*u*p/r,r/(n*i*p)):1/0}function u(t,n,e,r){var u,i=-1,a=t.length,o=e.x,l=e.y,f=n?c(t.area/n):0;if(n==e.dx){for((r||f>e.dy)&&(f=e.dy);a>++i;)u=t[i],u.x=o,u.y=l,u.dy=f,o+=u.dx=Math.min(e.x+e.dx-o,f?c(u.area/f):0);u.z=!0,u.dx+=e.x+e.dx-o,e.y+=f,e.dy-=f}else{for((r||f>e.dx)&&(f=e.dx);a>++i;)u=t[i],u.x=o,u.y=l,u.dx=f,l+=u.dy=Math.min(e.y+e.dy-l,f?c(u.area/f):0);u.z=!1,u.dy+=e.y+e.dy-l,e.x+=f,e.dx-=f}}function i(r){var u=a||o(r),i=u[0];return i.x=0,i.y=0,i.dx=l[0],i.dy=l[1],a&&o.revalue(i),t([i],i.dx*i.dy/i.value),(a?e:n)(i),h&&(a=u),u}var a,o=Ci.layout.hierarchy(),c=Math.round,l=[1,1],f=null,s=Pr,h=!1,g=\"squarify\",p=.5*(1+Math.sqrt(5));return i.size=function(t){return arguments.length?(l=t,i):l},i.padding=function(t){function n(n){var e=t.call(i,n,n.depth);return null==e?Pr(n):Rr(n,\"number\"==typeof e?[e,e,e,e]:e)}function e(n){return Rr(n,t)}if(!arguments.length)return f;var r;return s=null==(f=t)?Pr:\"function\"==(r=typeof t)?n:\"number\"===r?(t=[t,t,t,t],e):e,i},i.round=function(t){return arguments.length?(c=t?Math.round:Number,i):c!=Number},i.sticky=function(t){return arguments.length?(h=t,a=null,i):h},i.ratio=function(t){return arguments.length?(p=t,i):p},i.mode=function(t){return arguments.length?(g=t+\"\",i):g},lr(i,o)},Ci.csv=Or(\",\",\"text/csv\"),Ci.tsv=Or(\"	\",\"text/tab-separated-values\"),Ci.geo={},Ci.geo.stream=function(t,n){ao.hasOwnProperty(t.type)?ao[t.type](t,n):Yr(t,n)};var ao={Feature:function(t,n){Yr(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,u=e.length;u>++r;)Yr(e[r].geometry,n)}},oo={Sphere:function(t,n){n.sphere()},Point:function(t,n){var e=t.coordinates;n.point(e[0],e[1])},MultiPoint:function(t,n){for(var e,r=t.coordinates,u=-1,i=r.length;i>++u;)e=r[u],n.point(e[0],e[1])},LineString:function(t,n){Ur(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,u=e.length;u>++r;)Ur(e[r],n,0)},Polygon:function(t,n){Ir(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,u=e.length;u>++r;)Ir(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,u=e.length;u>++r;)Yr(e[r],n)}};Ci.geo.albersUsa=function(){function t(t){return n(t)(t)}function n(t){var n=t[0],a=t[1];return a>50?r:-140>n?u:21>a?i:e}var e=Ci.geo.albers(),r=Ci.geo.albers().rotate([160,0]).center([0,60]).parallels([55,65]),u=Ci.geo.albers().rotate([160,0]).center([0,20]).parallels([8,18]),i=Ci.geo.albers().rotate([60,0]).center([0,10]).parallels([8,18]);return t.scale=function(n){return arguments.length?(e.scale(n),r.scale(.6*n),u.scale(n),i.scale(1.5*n),t.translate(e.translate())):e.scale()},t.translate=function(n){if(!arguments.length)return e.translate();var a=e.scale(),o=n[0],c=n[1];return e.translate(n),r.translate([o-.4*a,c+.17*a]),u.translate([o-.19*a,c+.2*a]),i.translate([o+.58*a,c+.43*a]),t},t.scale(e.scale())},(Ci.geo.albers=function(){var t=29.5*zi,n=45.5*zi,e=Hu(Qr),r=e(t,n);return r.parallels=function(r){return arguments.length?e(t=r[0]*zi,n=r[1]*zi):[t*Di,n*Di]},r.rotate([98,0]).center([0,38]).scale(1e3)}).raw=Qr;var co=Uu(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(Ci.geo.azimuthalEqualArea=function(){return Fu(co)}).raw=co;var lo=Uu(function(t){var n=Math.acos(t);return n&&n/Math.sin(n)},a);(Ci.geo.azimuthalEquidistant=function(){return Fu(lo)}).raw=lo,Ci.geo.bounds=tu(a),Ci.geo.centroid=function(t){fo=so=ho=go=po=0,Ci.geo.stream(t,mo);var n;return so&&Math.abs(n=Math.sqrt(ho*ho+go*go+po*po))>qi?[Math.atan2(go,ho)*Di,Math.asin(Math.max(-1,Math.min(1,po/n)))*Di]:void 0};var fo,so,ho,go,po,mo={sphere:function(){2>fo&&(fo=2,so=ho=go=po=0)},point:nu,lineStart:ru,lineEnd:uu,polygonStart:function(){2>fo&&(fo=2,so=ho=go=po=0),mo.lineStart=eu},polygonEnd:function(){mo.lineStart=ru}};Ci.geo.circle=function(){function t(){var t=\"function\"==typeof r?r.apply(this,arguments):r,n=Pu(-t[0]*zi,-t[1]*zi,0).invert,u=[];return e(null,null,1,{point:function(t,e){u.push(t=n(t,e)),t[0]*=Di,t[1]*=Di}}),{type:\"Polygon\",coordinates:[u]}}var n,e,r=[0,0],u=6;return t.origin=function(n){return arguments.length?(r=n,t):r},t.angle=function(r){return arguments.length?(e=iu((n=+r)*zi,u*zi),t):n},t.precision=function(r){return arguments.length?(e=iu(n*zi,(u=+r)*zi),t):u},t.angle(90)};var vo=ou(o,pu,mu);(Ci.geo.equirectangular=function(){return Fu(Mu).scale(250/Ti)}).raw=Mu.invert=Mu;var yo=Uu(function(t){return 1/t},Math.atan);(Ci.geo.gnomonic=function(){return Fu(yo)}).raw=yo,Ci.geo.graticule=function(){function t(){return{type:\"MultiLineString\",coordinates:n()}}function n(){return Ci.range(Math.ceil(r/c)*c,e,c).map(a).concat(Ci.range(Math.ceil(i/l)*l,u,l).map(o))}var e,r,u,i,a,o,c=22.5,l=c,f=2.5;return t.lines=function(){return n().map(function(t){return{type:\"LineString\",coordinates:t}})},t.outline=function(){return{type:\"Polygon\",coordinates:[a(r).concat(o(u).slice(1),a(e).reverse().slice(1),o(i).reverse().slice(1))]}},t.extent=function(n){return arguments.length?(r=+n[0][0],e=+n[1][0],i=+n[0][1],u=+n[1][1],r>e&&(n=r,r=e,e=n),i>u&&(n=i,i=u,u=n),t.precision(f)):[[r,i],[e,u]]},t.step=function(n){return arguments.length?(c=+n[0],l=+n[1],t):[c,l]},t.precision=function(n){return arguments.length?(f=+n,a=bu(i,u,f),o=xu(r,e,f),t):f},t.extent([[-180+qi,-90+qi],[180-qi,90-qi]])},Ci.geo.interpolate=function(t,n){return wu(t[0]*zi,t[1]*zi,n[0]*zi,n[1]*zi)},Ci.geo.greatArc=function(){function e(){for(var t=r||a.apply(this,arguments),n=u||o.apply(this,arguments),e=i||Ci.geo.interpolate(t,n),l=0,f=c/e.distance,s=[t];1>(l+=f);)s.push(e(l));return s.push(n),{type:\"LineString\",coordinates:s}}var r,u,i,a=n,o=t,c=6*zi;return e.distance=function(){return(i||Ci.geo.interpolate(r||a.apply(this,arguments),u||o.apply(this,arguments))).distance},e.source=function(t){return arguments.length?(a=t,r=\"function\"==typeof t?null:t,i=r&&u?Ci.geo.interpolate(r,u):null,e):a},e.target=function(t){return arguments.length?(o=t,u=\"function\"==typeof t?null:t,i=r&&u?Ci.geo.interpolate(r,u):null,e):o},e.precision=function(t){return arguments.length?(c=t*zi,e):c/zi},e},Su.invert=function(t,n){return[2*Ti*t,2*Math.atan(Math.exp(2*Ti*n))-Ti/2]},(Ci.geo.mercator=function(){return Fu(Su).scale(500)}).raw=Su;var Mo=Uu(function(){return 1},Math.asin);(Ci.geo.orthographic=function(){return Fu(Mo)}).raw=Mo,Ci.geo.path=function(){function t(t){return t&&Ci.geo.stream(t,r(u.pointRadius(\"function\"==typeof i?+i.apply(this,arguments):i))),u.result()}var n,e,r,u,i=4.5;return t.area=function(t){return bo=0,Ci.geo.stream(t,r(_o)),bo},t.centroid=function(t){return fo=ho=go=po=0,Ci.geo.stream(t,r(wo)),po?[ho/po,go/po]:void 0},t.bounds=function(t){return tu(r)(t)},t.projection=function(e){return arguments.length?(r=(n=e)?e.stream||Eu(e):a,t):n},t.context=function(n){return arguments.length?(u=null==(e=n)?new Au:new Nu(n),t):e},t.pointRadius=function(n){return arguments.length?(i=\"function\"==typeof n?n:+n,t):i},t.projection(Ci.geo.albersUsa()).context(null)};var bo,xo,_o={point:Pn,lineStart:Pn,lineEnd:Pn,polygonStart:function(){xo=0,_o.lineStart=Tu},polygonEnd:function(){_o.lineStart=_o.lineEnd=_o.point=Pn,bo+=Math.abs(xo/2)}},wo={point:qu,lineStart:Cu,lineEnd:zu,polygonStart:function(){wo.lineStart=Du},polygonEnd:function(){wo.point=qu,wo.lineStart=Cu,wo.lineEnd=zu}};Ci.geo.area=function(t){return So=0,Ci.geo.stream(t,Ao),So};var So,ko,Eo,Ao={sphere:function(){So+=4*Ti},point:Pn,lineStart:Pn,lineEnd:Pn,polygonStart:function(){ko=1,Eo=0,Ao.lineStart=Lu},polygonEnd:function(){var t=2*Math.atan2(Eo,ko);So+=0>t?4*Ti+t:t,Ao.lineStart=Ao.lineEnd=Ao.point=Pn}};Ci.geo.projection=Fu,Ci.geo.projectionMutator=Hu;var No=Uu(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(Ci.geo.stereographic=function(){return Fu(No)}).raw=No,Ci.geom={},Ci.geom.hull=function(t){if(3>t.length)return[];var n,e,r,u,i,a,o,c,l,f,s=t.length,h=s-1,g=[],p=[],d=0;for(n=1;s>n;++n)t[n][1]<t[d][1]?d=n:t[n][1]==t[d][1]&&(d=t[n][0]<t[d][0]?n:d);for(n=0;s>n;++n)n!==d&&(u=t[n][1]-t[d][1],r=t[n][0]-t[d][0],g.push({angle:Math.atan2(u,r),index:n}));for(g.sort(function(t,n){return t.angle-n.angle}),l=g[0].angle,c=g[0].index,o=0,n=1;h>n;++n)e=g[n].index,l==g[n].angle?(r=t[c][0]-t[d][0],u=t[c][1]-t[d][1],i=t[e][0]-t[d][0],a=t[e][1]-t[d][1],r*r+u*u>=i*i+a*a?g[n].index=-1:(g[o].index=-1,l=g[n].angle,o=n,c=e)):(l=g[n].angle,o=n,c=e);for(p.push(d),n=0,e=0;2>n;++e)-1!==g[e].index&&(p.push(g[e].index),n++);for(f=p.length;h>e;++e)if(-1!==g[e].index){for(;!Iu(p[f-2],p[f-1],g[e].index,t);)--f;p[f++]=g[e].index}var m=[];for(n=0;f>n;++n)m.push(t[p[n]]);return m},Ci.geom.polygon=function(t){return t.area=function(){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];e>++n;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return.5*r},t.centroid=function(n){var e,r,u=-1,i=t.length,a=0,o=0,c=t[i-1];for(arguments.length||(n=-1/(6*t.area()));i>++u;)e=c,c=t[u],r=e[0]*c[1]-c[0]*e[1],a+=(e[0]+c[0])*r,o+=(e[1]+c[1])*r;return[a*n,o*n]},t.clip=function(n){for(var e,r,u,i,a,o,c=-1,l=t.length,f=t[l-1];l>++c;){for(e=n.slice(),n.length=0,i=t[c],a=e[(u=e.length)-1],r=-1;u>++r;)o=e[r],Vu(o,f,i)?(Vu(a,f,i)||n.push(Zu(a,o,f,i)),n.push(o)):Vu(a,f,i)&&n.push(Zu(a,o,f,i)),a=o;f=i}return n},t},Ci.geom.voronoi=function(t){var n=t.map(function(){return[]}),e=1e6;return Xu(t,function(t){var r,u,i,a,o,c;1===t.a&&t.b>=0?(r=t.ep.r,u=t.ep.l):(r=t.ep.l,u=t.ep.r),1===t.a?(o=r?r.y:-e,i=t.c-t.b*o,c=u?u.y:e,a=t.c-t.b*c):(i=r?r.x:-e,o=t.c-t.a*i,a=u?u.x:e,c=t.c-t.a*a);var l=[i,o],f=[a,c];n[t.region.l.index].push(l,f),n[t.region.r.index].push(l,f)}),n=n.map(function(n,e){var r=t[e][0],u=t[e][1],i=n.map(function(t){return Math.atan2(t[0]-r,t[1]-u)}),a=Ci.range(n.length).sort(function(t,n){return i[t]-i[n]});return a.filter(function(t,n){return!n||i[t]-i[a[n-1]]>qi}).map(function(t){return n[t]})}),n.forEach(function(n,r){var u=n.length;if(!u)return n.push([-e,-e],[-e,e],[e,e],[e,-e]);if(!(u>2)){var i=t[r],a=n[0],o=n[1],c=i[0],l=i[1],f=a[0],s=a[1],h=o[0],g=o[1],p=Math.abs(h-f),d=g-s;if(qi>Math.abs(d)){var m=s>l?-e:e;n.push([-e,m],[e,m])}else if(qi>p){var v=f>c?-e:e;n.push([v,-e],[v,e])}else{var m=(f-c)*(g-s)>(h-f)*(s-l)?e:-e,y=Math.abs(d)-p;qi>Math.abs(y)?n.push([0>d?m:-m,m]):(y>0&&(m*=-1),n.push([-e,m],[e,m]))}}}),n};var To={l:\"r\",r:\"l\"};Ci.geom.delaunay=function(t){var n=t.map(function(){return[]}),e=[];return Xu(t,function(e){n[e.region.l.index].push(t[e.region.r.index])}),n.forEach(function(n,r){var u=t[r],i=u[0],a=u[1];n.forEach(function(t){t.angle=Math.atan2(t[0]-i,t[1]-a)}),n.sort(function(t,n){return t.angle-n.angle});for(var o=0,c=n.length-1;c>o;o++)e.push([u,n[o],n[o+1]])}),e},Ci.geom.quadtree=function(t,n,e,r,u){function i(t,n,e,r,u,i){if(!isNaN(n.x)&&!isNaN(n.y))if(t.leaf){var o=t.point;o?.01>Math.abs(o.x-n.x)+Math.abs(o.y-n.y)?a(t,n,e,r,u,i):(t.point=null,a(t,o,e,r,u,i),a(t,n,e,r,u,i)):t.point=n}else a(t,n,e,r,u,i)}function a(t,n,e,r,u,a){var o=.5*(e+u),c=.5*(r+a),l=n.x>=o,f=n.y>=c,s=(f<<1)+l;t.leaf=!1,t=t.nodes[s]||(t.nodes[s]=Bu()),l?e=o:u=o,f?r=c:a=c,i(t,n,e,r,u,a)}var o,c=-1,l=t.length;if(5>arguments.length)if(3===arguments.length)u=e,r=n,e=n=0;else for(n=e=1/0,r=u=-1/0;l>++c;)o=t[c],n>o.x&&(n=o.x),e>o.y&&(e=o.y),o.x>r&&(r=o.x),o.y>u&&(u=o.y);var f=r-n,s=u-e;f>s?u=e+f:r=n+s;var h=Bu();return h.add=function(t){i(h,t,n,e,r,u)},h.visit=function(t){$u(t,h,n,e,r,u)},t.forEach(h.add),h},Ci.time={};var qo=Date,Co=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];Ju.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){zo.setUTCDate.apply(this._,arguments)},setDay:function(){zo.setUTCDay.apply(this._,arguments)},setFullYear:function(){zo.setUTCFullYear.apply(this._,arguments)},setHours:function(){zo.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){zo.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){zo.setUTCMinutes.apply(this._,arguments)},setMonth:function(){zo.setUTCMonth.apply(this._,arguments)},setSeconds:function(){zo.setUTCSeconds.apply(this._,arguments)},setTime:function(){zo.setTime.apply(this._,arguments)}};var zo=Date.prototype,Do=\"%a %b %e %X %Y\",Lo=\"%m/%d/%Y\",Fo=\"%H:%M:%S\",Ho=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],jo=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],Po=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],Ro=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];Ci.time.format=function(t){function n(n){for(var r,u,i,a=[],o=-1,c=0;e>++o;)37===t.charCodeAt(o)&&(a.push(t.substring(c,o)),null!=(u=Xo[r=t.charAt(++o)])&&(r=t.charAt(++o)),(i=Bo[r])&&(r=i(n,null==u?\"e\"===r?\" \":\"0\":u)),a.push(r),c=o+1);return a.push(t.substring(c,o)),a.join(\"\")}var e=t.length;return n.parse=function(n){var e={y:1900,m:0,d:1,H:0,M:0,S:0,L:0},r=Gu(e,t,n,0);if(r!=n.length)return null;\"p\"in e&&(e.H=e.H%12+12*e.p);var u=new qo;return u.setFullYear(e.y,e.m,e.d),u.setHours(e.H,e.M,e.S,e.L),u},n.toString=function(){return t},n};var Oo=Ku(Ho),Yo=Ku(jo),Uo=Ku(Po),Io=Wu(Po),Vo=Ku(Ro),Zo=Wu(Ro),Xo={\"-\":\"\",_:\" \",0:\"0\"},Bo={a:function(t){return jo[t.getDay()]},A:function(t){return Ho[t.getDay()]},b:function(t){return Ro[t.getMonth()]},B:function(t){return Po[t.getMonth()]},c:Ci.time.format(Do),d:function(t,n){return Qu(t.getDate(),n,2)},e:function(t,n){return Qu(t.getDate(),n,2)},H:function(t,n){return Qu(t.getHours(),n,2)},I:function(t,n){return Qu(t.getHours()%12||12,n,2)},j:function(t,n){return Qu(1+Ci.time.dayOfYear(t),n,3)},L:function(t,n){return Qu(t.getMilliseconds(),n,3)},m:function(t,n){return Qu(t.getMonth()+1,n,2)},M:function(t,n){return Qu(t.getMinutes(),n,2)},p:function(t){return t.getHours()>=12?\"PM\":\"AM\"},S:function(t,n){return Qu(t.getSeconds(),n,2)},U:function(t,n){return Qu(Ci.time.sundayOfYear(t),n,2)},w:function(t){return t.getDay()},W:function(t,n){return Qu(Ci.time.mondayOfYear(t),n,2)},x:Ci.time.format(Lo),X:Ci.time.format(Fo),y:function(t,n){return Qu(t.getFullYear()%100,n,2)},Y:function(t,n){return Qu(t.getFullYear()%1e4,n,4)},Z:vi,\"%\":function(){return\"%\"}},$o={a:ti,A:ni,b:ei,B:ri,c:ui,d:si,e:si,H:hi,I:hi,L:di,m:fi,M:gi,p:mi,S:pi,x:ii,X:ai,y:ci,Y:oi},Jo=/^\\s*\\d+/,Go=Ci.map({am:0,pm:1});Ci.time.format.utc=function(t){function n(t){try{qo=Ju;var n=new qo;return n._=t,e(n)}finally{qo=Date}}var e=Ci.time.format(t);return n.parse=function(t){try{qo=Ju;var n=e.parse(t);return n&&n._}finally{qo=Date}},n.toString=e.toString,n};var Ko=Ci.time.format.utc(\"%Y-%m-%dT%H:%M:%S.%LZ\");Ci.time.format.iso=Date.prototype.toISOString&&+new Date(\"2000-01-01T00:00:00.000Z\")?yi:Ko,yi.parse=function(t){var n=new Date(t);return isNaN(n)?null:n},yi.toString=Ko.toString,Ci.time.second=Mi(function(t){return new qo(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(t.getTime()+1e3*Math.floor(n))},function(t){return t.getSeconds()}),Ci.time.seconds=Ci.time.second.range,Ci.time.seconds.utc=Ci.time.second.utc.range,Ci.time.minute=Mi(function(t){return new qo(6e4*Math.floor(t/6e4))},function(t,n){t.setTime(t.getTime()+6e4*Math.floor(n))},function(t){return t.getMinutes()}),Ci.time.minutes=Ci.time.minute.range,Ci.time.minutes.utc=Ci.time.minute.utc.range,Ci.time.hour=Mi(function(t){var n=t.getTimezoneOffset()/60;return new qo(36e5*(Math.floor(t/36e5-n)+n))},function(t,n){t.setTime(t.getTime()+36e5*Math.floor(n))},function(t){return t.getHours()}),Ci.time.hours=Ci.time.hour.range,Ci.time.hours.utc=Ci.time.hour.utc.range,Ci.time.day=Mi(function(t){var n=new qo(1970,0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n},function(t,n){t.setDate(t.getDate()+n)},function(t){return t.getDate()-1}),Ci.time.days=Ci.time.day.range,Ci.time.days.utc=Ci.time.day.utc.range,Ci.time.dayOfYear=function(t){var n=Ci.time.year(t);return Math.floor((t-n-6e4*(t.getTimezoneOffset()-n.getTimezoneOffset()))/864e5)},Co.forEach(function(t,n){t=t.toLowerCase(),n=7-n;var e=Ci.time[t]=Mi(function(t){return(t=Ci.time.day(t)).setDate(t.getDate()-(t.getDay()+n)%7),t},function(t,n){t.setDate(t.getDate()+7*Math.floor(n))},function(t){var e=Ci.time.year(t).getDay();return Math.floor((Ci.time.dayOfYear(t)+(e+n)%7)/7)-(e!==n)});Ci.time[t+\"s\"]=e.range,Ci.time[t+\"s\"].utc=e.utc.range,Ci.time[t+\"OfYear\"]=function(t){var e=Ci.time.year(t).getDay();return Math.floor((Ci.time.dayOfYear(t)+(e+n)%7)/7)}}),Ci.time.week=Ci.time.sunday,Ci.time.weeks=Ci.time.sunday.range,Ci.time.weeks.utc=Ci.time.sunday.utc.range,Ci.time.weekOfYear=Ci.time.sundayOfYear,Ci.time.month=Mi(function(t){return t=Ci.time.day(t),t.setDate(1),t},function(t,n){t.setMonth(t.getMonth()+n)},function(t){return t.getMonth()}),Ci.time.months=Ci.time.month.range,Ci.time.months.utc=Ci.time.month.utc.range,Ci.time.year=Mi(function(t){return t=Ci.time.day(t),t.setMonth(0,1),t},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t){return t.getFullYear()}),Ci.time.years=Ci.time.year.range,Ci.time.years.utc=Ci.time.year.utc.range;var Wo=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Qo=[[Ci.time.second,1],[Ci.time.second,5],[Ci.time.second,15],[Ci.time.second,30],[Ci.time.minute,1],[Ci.time.minute,5],[Ci.time.minute,15],[Ci.time.minute,30],[Ci.time.hour,1],[Ci.time.hour,3],[Ci.time.hour,6],[Ci.time.hour,12],[Ci.time.day,1],[Ci.time.day,2],[Ci.time.week,1],[Ci.time.month,1],[Ci.time.month,3],[Ci.time.year,1]],tc=[[Ci.time.format(\"%Y\"),o],[Ci.time.format(\"%B\"),function(t){return t.getMonth()}],[Ci.time.format(\"%b %d\"),function(t){return 1!=t.getDate()}],[Ci.time.format(\"%a %d\"),function(t){return t.getDay()&&1!=t.getDate()}],[Ci.time.format(\"%I %p\"),function(t){return t.getHours()}],[Ci.time.format(\"%I:%M\"),function(t){return t.getMinutes()}],[Ci.time.format(\":%S\"),function(t){return t.getSeconds()}],[Ci.time.format(\".%L\"),function(t){return t.getMilliseconds()}]],nc=Ci.scale.linear(),ec=Si(tc);Qo.year=function(t,n){return nc.domain(t.map(Ei)).ticks(n).map(ki)},Ci.time.scale=function(){return xi(Ci.scale.linear(),Qo,ec)};var rc=Qo.map(function(t){return[t[0].utc,t[1]]}),uc=[[Ci.time.format.utc(\"%Y\"),o],[Ci.time.format.utc(\"%B\"),function(t){return t.getUTCMonth()}],[Ci.time.format.utc(\"%b %d\"),function(t){return 1!=t.getUTCDate()}],[Ci.time.format.utc(\"%a %d\"),function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],[Ci.time.format.utc(\"%I %p\"),function(t){return t.getUTCHours()}],[Ci.time.format.utc(\"%I:%M\"),function(t){return t.getUTCMinutes()}],[Ci.time.format.utc(\":%S\"),function(t){return t.getUTCSeconds()}],[Ci.time.format.utc(\".%L\"),function(t){return t.getUTCMilliseconds()}]],ic=Si(uc);return rc.year=function(t,n){return nc.domain(t.map(Ni)).ticks(n).map(Ai)},Ci.time.scale.utc=function(){return xi(Ci.scale.linear(),rc,ic)},Ci}();\n\nC:\\Users\\ssr0304\\Downloads\\demo2\\public\\templates\\bar.ejs:\n    1  <button data-action=\"shuffle\" title=\"changes position of each circle\">shuffle</button>\n    2: <button data-action=\"stream\" title=\"triggers a batch of 100 add and 100 remove events\">stream</button>\n    3  <button data-action=\"reset\" title=\"resets server model\">reset</button>\n\n4177 matches across 328 files\n",
			"settings":
			{
				"buffer_size": 646477,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/C/Users/ssr0304/Downloads/demo2/node_modules/express/lib/express.js",
			"settings":
			{
				"buffer_size": 1487,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 81.0,
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/ssr0304/Downloads/demo2",
		"/C/Users/ssr0304/Downloads/demo2/node_modules",
		"/C/Users/ssr0304/Downloads/demo2/node_modules/socket.io-client",
		"/C/Users/ssr0304/Downloads/demo2/public",
		"/C/Users/ssr0304/Downloads/demo2/public/lib",
		"/C/Users/ssr0304/Downloads/demo2/public/templates"
	],
	"file_history":
	[
		"/C/Users/ssr0304/Downloads/demo2/npm-debug.log"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 105.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"destroy",
			"stream",
			"        \n",
			"multipart"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/ssr0304/Downloads/demo2/package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1006,
						"regions":
						{
						},
						"selection":
						[
							[
								605,
								605
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 414.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/ssr0304/Downloads/demo2/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4518,
						"regions":
						{
						},
						"selection":
						[
							[
								4518,
								4518
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3381.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/ssr0304/Downloads/demo2/stream.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 403,
						"regions":
						{
						},
						"selection":
						[
							[
								403,
								403
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/ssr0304/Downloads/demo2/node_modules/socket.io-client/socket.io.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 157823,
						"regions":
						{
						},
						"selection":
						[
							[
								19592,
								19599
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21470.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/ssr0304/Downloads/demo2/circle.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33559,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/ssr0304/Downloads/demo2/model.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3018,
						"regions":
						{
						},
						"selection":
						[
							[
								478,
								478
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/ssr0304/Downloads/demo2/public/templates/bar.ejs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 267,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 646477,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										174,
										180
									],
									[
										243,
										249
									],
									[
										434,
										440
									],
									[
										443,
										449
									],
									[
										531,
										537
									],
									[
										590,
										596
									],
									[
										862,
										868
									],
									[
										1026,
										1032
									],
									[
										1106,
										1112
									],
									[
										1115,
										1121
									],
									[
										1155,
										1161
									],
									[
										1426,
										1432
									],
									[
										1448,
										1454
									],
									[
										1995,
										2001
									],
									[
										2592,
										2598
									],
									[
										2627,
										2633
									],
									[
										2680,
										2686
									],
									[
										2868,
										2874
									],
									[
										2922,
										2928
									],
									[
										3179,
										3185
									],
									[
										3440,
										3446
									],
									[
										3675,
										3681
									],
									[
										3979,
										3985
									],
									[
										4150,
										4156
									],
									[
										4209,
										4215
									],
									[
										4326,
										4332
									],
									[
										4452,
										4458
									],
									[
										4740,
										4746
									],
									[
										4944,
										4950
									],
									[
										4998,
										5004
									],
									[
										5107,
										5113
									],
									[
										5149,
										5155
									],
									[
										5251,
										5257
									],
									[
										5308,
										5314
									],
									[
										5330,
										5336
									],
									[
										5371,
										5377
									],
									[
										5388,
										5394
									],
									[
										5427,
										5433
									],
									[
										5465,
										5471
									],
									[
										5518,
										5524
									],
									[
										5553,
										5559
									],
									[
										5642,
										5648
									],
									[
										5684,
										5690
									],
									[
										5783,
										5789
									],
									[
										5835,
										5841
									],
									[
										5975,
										5981
									],
									[
										6010,
										6016
									],
									[
										6045,
										6051
									],
									[
										6082,
										6088
									],
									[
										6233,
										6239
									],
									[
										6277,
										6283
									],
									[
										6503,
										6509
									],
									[
										6547,
										6553
									],
									[
										6710,
										6716
									],
									[
										6759,
										6765
									],
									[
										6806,
										6812
									],
									[
										6855,
										6861
									],
									[
										7110,
										7116
									],
									[
										7263,
										7269
									],
									[
										7416,
										7422
									],
									[
										7634,
										7640
									],
									[
										7717,
										7723
									],
									[
										8082,
										8088
									],
									[
										8146,
										8152
									],
									[
										8229,
										8235
									],
									[
										8294,
										8300
									],
									[
										8360,
										8366
									],
									[
										8422,
										8428
									],
									[
										8580,
										8586
									],
									[
										8747,
										8753
									],
									[
										8787,
										8793
									],
									[
										9035,
										9041
									],
									[
										9249,
										9255
									],
									[
										9415,
										9421
									],
									[
										9497,
										9503
									],
									[
										9590,
										9596
									],
									[
										9637,
										9643
									],
									[
										9659,
										9665
									],
									[
										9850,
										9856
									],
									[
										9901,
										9907
									],
									[
										10262,
										10268
									],
									[
										10530,
										10536
									],
									[
										11000,
										11006
									],
									[
										11082,
										11088
									],
									[
										11098,
										11104
									],
									[
										11147,
										11153
									],
									[
										11179,
										11185
									],
									[
										11299,
										11305
									],
									[
										11460,
										11466
									],
									[
										11605,
										11611
									],
									[
										11716,
										11722
									],
									[
										11907,
										11913
									],
									[
										12058,
										12064
									],
									[
										12110,
										12116
									],
									[
										12174,
										12180
									],
									[
										12225,
										12231
									],
									[
										12293,
										12299
									],
									[
										12319,
										12325
									],
									[
										12422,
										12428
									],
									[
										12650,
										12656
									],
									[
										12914,
										12920
									],
									[
										13082,
										13088
									],
									[
										13397,
										13403
									],
									[
										13714,
										13720
									],
									[
										13798,
										13804
									],
									[
										14044,
										14050
									],
									[
										14118,
										14124
									],
									[
										14138,
										14144
									],
									[
										14230,
										14236
									],
									[
										14251,
										14257
									],
									[
										14299,
										14305
									],
									[
										14336,
										14342
									],
									[
										14518,
										14524
									],
									[
										14556,
										14562
									],
									[
										14615,
										14621
									],
									[
										14663,
										14669
									],
									[
										14710,
										14716
									],
									[
										14782,
										14788
									],
									[
										14913,
										14919
									],
									[
										15117,
										15123
									],
									[
										15396,
										15402
									],
									[
										15476,
										15482
									],
									[
										15802,
										15808
									],
									[
										16000,
										16006
									],
									[
										16351,
										16357
									],
									[
										16405,
										16411
									],
									[
										16623,
										16629
									],
									[
										16677,
										16683
									],
									[
										16932,
										16938
									],
									[
										17110,
										17116
									],
									[
										17280,
										17286
									],
									[
										17394,
										17400
									],
									[
										17418,
										17424
									],
									[
										17488,
										17494
									],
									[
										17592,
										17598
									],
									[
										17616,
										17622
									],
									[
										17686,
										17692
									],
									[
										17792,
										17798
									],
									[
										17890,
										17896
									],
									[
										17915,
										17921
									],
									[
										17956,
										17962
									],
									[
										17981,
										17987
									],
									[
										18033,
										18039
									],
									[
										18106,
										18112
									],
									[
										18201,
										18207
									],
									[
										18336,
										18342
									],
									[
										18441,
										18447
									],
									[
										18492,
										18498
									],
									[
										18650,
										18656
									],
									[
										18801,
										18807
									],
									[
										18949,
										18955
									],
									[
										19095,
										19101
									],
									[
										19190,
										19196
									],
									[
										19325,
										19331
									],
									[
										19430,
										19436
									],
									[
										19481,
										19487
									],
									[
										19638,
										19644
									],
									[
										19789,
										19795
									],
									[
										19937,
										19943
									],
									[
										20209,
										20215
									],
									[
										20231,
										20237
									],
									[
										20263,
										20269
									],
									[
										20341,
										20347
									],
									[
										20526,
										20532
									],
									[
										20698,
										20704
									],
									[
										20869,
										20875
									],
									[
										20928,
										20934
									],
									[
										21045,
										21051
									],
									[
										21171,
										21177
									],
									[
										21439,
										21445
									],
									[
										21672,
										21678
									],
									[
										21726,
										21732
									],
									[
										21964,
										21970
									],
									[
										22074,
										22080
									],
									[
										22131,
										22137
									],
									[
										22153,
										22159
									],
									[
										22194,
										22200
									],
									[
										22211,
										22217
									],
									[
										22250,
										22256
									],
									[
										22288,
										22294
									],
									[
										22341,
										22347
									],
									[
										22376,
										22382
									],
									[
										22505,
										22511
									],
									[
										22555,
										22561
									],
									[
										22659,
										22665
									],
									[
										22800,
										22806
									],
									[
										22912,
										22918
									],
									[
										22947,
										22953
									],
									[
										22982,
										22988
									],
									[
										23019,
										23025
									],
									[
										23157,
										23163
									],
									[
										23270,
										23276
									],
									[
										23426,
										23432
									],
									[
										23475,
										23481
									],
									[
										23522,
										23528
									],
									[
										23571,
										23577
									],
									[
										23673,
										23679
									],
									[
										23717,
										23723
									],
									[
										23787,
										23793
									],
									[
										23836,
										23842
									],
									[
										23859,
										23865
									],
									[
										23893,
										23899
									],
									[
										23920,
										23926
									],
									[
										23962,
										23968
									],
									[
										24057,
										24063
									],
									[
										24101,
										24107
									],
									[
										24248,
										24254
									],
									[
										24278,
										24284
									],
									[
										24345,
										24351
									],
									[
										24472,
										24478
									],
									[
										24633,
										24639
									],
									[
										24863,
										24869
									],
									[
										25016,
										25022
									],
									[
										25168,
										25174
									],
									[
										25307,
										25313
									],
									[
										25390,
										25396
									],
									[
										25710,
										25716
									],
									[
										25774,
										25780
									],
									[
										25857,
										25863
									],
									[
										25922,
										25928
									],
									[
										25988,
										25994
									],
									[
										26050,
										26056
									],
									[
										26208,
										26214
									],
									[
										26375,
										26381
									],
									[
										26415,
										26421
									],
									[
										26663,
										26669
									],
									[
										26921,
										26927
									],
									[
										27114,
										27120
									],
									[
										27216,
										27222
									],
									[
										27309,
										27315
									],
									[
										27356,
										27362
									],
									[
										27378,
										27384
									],
									[
										27757,
										27763
									],
									[
										28045,
										28051
									],
									[
										28286,
										28292
									],
									[
										28452,
										28458
									],
									[
										28596,
										28602
									],
									[
										28737,
										28743
									],
									[
										28886,
										28892
									],
									[
										29024,
										29030
									],
									[
										29289,
										29295
									],
									[
										29490,
										29496
									],
									[
										29816,
										29822
									],
									[
										29987,
										29993
									],
									[
										30046,
										30052
									],
									[
										30163,
										30169
									],
									[
										30289,
										30295
									],
									[
										30580,
										30586
									],
									[
										30784,
										30790
									],
									[
										30838,
										30844
									],
									[
										30947,
										30953
									],
									[
										30989,
										30995
									],
									[
										31091,
										31097
									],
									[
										31148,
										31154
									],
									[
										31170,
										31176
									],
									[
										31211,
										31217
									],
									[
										31228,
										31234
									],
									[
										31267,
										31273
									],
									[
										31305,
										31311
									],
									[
										31358,
										31364
									],
									[
										31393,
										31399
									],
									[
										31482,
										31488
									],
									[
										31524,
										31530
									],
									[
										31623,
										31629
									],
									[
										31675,
										31681
									],
									[
										31815,
										31821
									],
									[
										31850,
										31856
									],
									[
										31885,
										31891
									],
									[
										31922,
										31928
									],
									[
										32073,
										32079
									],
									[
										32117,
										32123
									],
									[
										32343,
										32349
									],
									[
										32387,
										32393
									],
									[
										32550,
										32556
									],
									[
										32599,
										32605
									],
									[
										32646,
										32652
									],
									[
										32695,
										32701
									],
									[
										32953,
										32959
									],
									[
										33106,
										33112
									],
									[
										33259,
										33265
									],
									[
										33477,
										33483
									],
									[
										33560,
										33566
									],
									[
										33928,
										33934
									],
									[
										33992,
										33998
									],
									[
										34075,
										34081
									],
									[
										34140,
										34146
									],
									[
										34206,
										34212
									],
									[
										34268,
										34274
									],
									[
										34426,
										34432
									],
									[
										34593,
										34599
									],
									[
										34633,
										34639
									],
									[
										34881,
										34887
									],
									[
										35095,
										35101
									],
									[
										35261,
										35267
									],
									[
										35343,
										35349
									],
									[
										35436,
										35442
									],
									[
										35483,
										35489
									],
									[
										35505,
										35511
									],
									[
										35706,
										35712
									],
									[
										35764,
										35770
									],
									[
										35967,
										35973
									],
									[
										36083,
										36089
									],
									[
										36107,
										36113
									],
									[
										36263,
										36269
									],
									[
										36287,
										36293
									],
									[
										36392,
										36398
									],
									[
										36424,
										36430
									],
									[
										36517,
										36523
									],
									[
										36635,
										36641
									],
									[
										36700,
										36706
									],
									[
										36769,
										36775
									],
									[
										36777,
										36783
									],
									[
										36902,
										36908
									],
									[
										36996,
										37002
									],
									[
										37103,
										37109
									],
									[
										37173,
										37179
									],
									[
										37320,
										37326
									],
									[
										37430,
										37436
									],
									[
										37485,
										37491
									],
									[
										37584,
										37590
									],
									[
										37762,
										37768
									],
									[
										37868,
										37874
									],
									[
										38256,
										38262
									],
									[
										38544,
										38550
									],
									[
										38785,
										38791
									],
									[
										38951,
										38957
									],
									[
										39095,
										39101
									],
									[
										39236,
										39242
									],
									[
										39385,
										39391
									],
									[
										39523,
										39529
									],
									[
										39788,
										39794
									],
									[
										40029,
										40035
									],
									[
										40195,
										40201
									],
									[
										40339,
										40345
									],
									[
										40480,
										40486
									],
									[
										40629,
										40635
									],
									[
										40767,
										40773
									],
									[
										41013,
										41019
									],
									[
										41232,
										41238
									],
									[
										41356,
										41362
									],
									[
										41441,
										41447
									],
									[
										41575,
										41581
									],
									[
										41602,
										41608
									],
									[
										41688,
										41694
									],
									[
										41831,
										41837
									],
									[
										41853,
										41859
									],
									[
										41878,
										41884
									],
									[
										41937,
										41943
									],
									[
										42055,
										42061
									],
									[
										42073,
										42079
									],
									[
										42112,
										42118
									],
									[
										42251,
										42257
									],
									[
										42276,
										42282
									],
									[
										42323,
										42329
									],
									[
										42453,
										42459
									],
									[
										42643,
										42649
									],
									[
										42865,
										42871
									],
									[
										42903,
										42909
									],
									[
										42936,
										42942
									],
									[
										43002,
										43008
									],
									[
										43120,
										43126
									],
									[
										43138,
										43144
									],
									[
										43177,
										43183
									],
									[
										43372,
										43378
									],
									[
										43479,
										43485
									],
									[
										43512,
										43518
									],
									[
										43560,
										43566
									],
									[
										43826,
										43832
									],
									[
										44021,
										44027
									],
									[
										44078,
										44084
									],
									[
										44318,
										44324
									],
									[
										44503,
										44509
									],
									[
										44894,
										44900
									],
									[
										45267,
										45273
									],
									[
										45556,
										45562
									],
									[
										45680,
										45686
									],
									[
										45765,
										45771
									],
									[
										45899,
										45905
									],
									[
										45926,
										45932
									],
									[
										46012,
										46018
									],
									[
										46155,
										46161
									],
									[
										46177,
										46183
									],
									[
										46202,
										46208
									],
									[
										46261,
										46267
									],
									[
										46379,
										46385
									],
									[
										46397,
										46403
									],
									[
										46436,
										46442
									],
									[
										46575,
										46581
									],
									[
										46600,
										46606
									],
									[
										46647,
										46653
									],
									[
										46777,
										46783
									],
									[
										46967,
										46973
									],
									[
										47189,
										47195
									],
									[
										47227,
										47233
									],
									[
										47260,
										47266
									],
									[
										47326,
										47332
									],
									[
										47444,
										47450
									],
									[
										47462,
										47468
									],
									[
										47501,
										47507
									],
									[
										47696,
										47702
									],
									[
										47803,
										47809
									],
									[
										47836,
										47842
									],
									[
										47884,
										47890
									],
									[
										48054,
										48060
									],
									[
										48098,
										48104
									],
									[
										48245,
										48251
									],
									[
										48275,
										48281
									],
									[
										48342,
										48348
									],
									[
										48469,
										48475
									],
									[
										48630,
										48636
									],
									[
										48836,
										48842
									],
									[
										49115,
										49121
									],
									[
										49137,
										49143
									],
									[
										49169,
										49175
									],
									[
										49247,
										49253
									],
									[
										49439,
										49445
									],
									[
										49688,
										49694
									],
									[
										49846,
										49852
									],
									[
										50190,
										50196
									],
									[
										50323,
										50329
									],
									[
										50460,
										50466
									],
									[
										50469,
										50475
									],
									[
										50676,
										50682
									],
									[
										50742,
										50748
									],
									[
										50829,
										50835
									],
									[
										50920,
										50926
									],
									[
										51351,
										51357
									],
									[
										51437,
										51443
									],
									[
										51930,
										51936
									],
									[
										52024,
										52030
									],
									[
										52050,
										52056
									],
									[
										52394,
										52400
									],
									[
										52438,
										52444
									],
									[
										52556,
										52562
									],
									[
										52620,
										52626
									],
									[
										52824,
										52830
									],
									[
										52998,
										53004
									],
									[
										53163,
										53169
									],
									[
										53342,
										53348
									],
									[
										53391,
										53397
									],
									[
										53576,
										53582
									],
									[
										53727,
										53733
									],
									[
										53886,
										53892
									],
									[
										54032,
										54038
									],
									[
										54183,
										54189
									],
									[
										54258,
										54264
									],
									[
										54329,
										54335
									],
									[
										54495,
										54501
									],
									[
										54654,
										54660
									],
									[
										54804,
										54810
									],
									[
										54832,
										54838
									],
									[
										54870,
										54876
									],
									[
										54892,
										54898
									],
									[
										54937,
										54943
									],
									[
										54965,
										54971
									],
									[
										55075,
										55081
									],
									[
										55157,
										55163
									],
									[
										55261,
										55267
									],
									[
										55336,
										55342
									],
									[
										55422,
										55428
									],
									[
										55530,
										55536
									],
									[
										55655,
										55661
									],
									[
										55769,
										55775
									],
									[
										56002,
										56008
									],
									[
										56179,
										56185
									],
									[
										56374,
										56380
									],
									[
										56488,
										56494
									],
									[
										56516,
										56522
									],
									[
										56582,
										56588
									],
									[
										56605,
										56611
									],
									[
										56641,
										56647
									],
									[
										56668,
										56674
									],
									[
										56712,
										56718
									],
									[
										56788,
										56794
									],
									[
										56802,
										56808
									],
									[
										56846,
										56852
									],
									[
										56995,
										57001
									],
									[
										57009,
										57015
									],
									[
										57156,
										57162
									],
									[
										57186,
										57192
									],
									[
										57326,
										57332
									],
									[
										57512,
										57518
									],
									[
										57532,
										57538
									],
									[
										57551,
										57557
									],
									[
										57593,
										57599
									],
									[
										57626,
										57632
									],
									[
										57743,
										57749
									],
									[
										57965,
										57971
									],
									[
										58116,
										58122
									],
									[
										58323,
										58329
									],
									[
										58478,
										58484
									],
									[
										58508,
										58514
									],
									[
										58648,
										58654
									],
									[
										58834,
										58840
									],
									[
										58854,
										58860
									],
									[
										58873,
										58879
									],
									[
										58915,
										58921
									],
									[
										58948,
										58954
									],
									[
										59065,
										59071
									],
									[
										59330,
										59336
									],
									[
										59517,
										59523
									],
									[
										59668,
										59674
									],
									[
										59698,
										59704
									],
									[
										59838,
										59844
									],
									[
										60024,
										60030
									],
									[
										60044,
										60050
									],
									[
										60063,
										60069
									],
									[
										60105,
										60111
									],
									[
										60138,
										60144
									],
									[
										60255,
										60261
									],
									[
										60520,
										60526
									],
									[
										60760,
										60766
									],
									[
										60977,
										60983
									],
									[
										61220,
										61226
									],
									[
										61250,
										61256
									],
									[
										61390,
										61396
									],
									[
										61571,
										61577
									],
									[
										61591,
										61597
									],
									[
										61610,
										61616
									],
									[
										61652,
										61658
									],
									[
										61685,
										61691
									],
									[
										61802,
										61808
									],
									[
										62047,
										62053
									],
									[
										62157,
										62163
									],
									[
										62281,
										62287
									],
									[
										62453,
										62459
									],
									[
										62656,
										62662
									],
									[
										62759,
										62765
									],
									[
										62929,
										62935
									],
									[
										63115,
										63121
									],
									[
										63135,
										63141
									],
									[
										63154,
										63160
									],
									[
										63196,
										63202
									],
									[
										63229,
										63235
									],
									[
										63346,
										63352
									],
									[
										63611,
										63617
									],
									[
										63846,
										63852
									],
									[
										64006,
										64012
									],
									[
										64036,
										64042
									],
									[
										64176,
										64182
									],
									[
										64362,
										64368
									],
									[
										64382,
										64388
									],
									[
										64401,
										64407
									],
									[
										64443,
										64449
									],
									[
										64476,
										64482
									],
									[
										64593,
										64599
									],
									[
										64858,
										64864
									],
									[
										64968,
										64974
									],
									[
										65072,
										65078
									],
									[
										65190,
										65196
									],
									[
										65385,
										65391
									],
									[
										65538,
										65544
									],
									[
										65568,
										65574
									],
									[
										65708,
										65714
									],
									[
										65924,
										65930
									],
									[
										65944,
										65950
									],
									[
										65963,
										65969
									],
									[
										66005,
										66011
									],
									[
										66038,
										66044
									],
									[
										66155,
										66161
									],
									[
										66413,
										66419
									],
									[
										66543,
										66549
									],
									[
										66653,
										66659
									],
									[
										66757,
										66763
									],
									[
										66972,
										66978
									],
									[
										67102,
										67108
									],
									[
										67324,
										67330
									],
									[
										67569,
										67575
									],
									[
										67721,
										67727
									],
									[
										67751,
										67757
									],
									[
										67891,
										67897
									],
									[
										68077,
										68083
									],
									[
										68097,
										68103
									],
									[
										68116,
										68122
									],
									[
										68158,
										68164
									],
									[
										68191,
										68197
									],
									[
										68308,
										68314
									],
									[
										68573,
										68579
									],
									[
										68683,
										68689
									],
									[
										68787,
										68793
									],
									[
										68905,
										68911
									],
									[
										69159,
										69165
									],
									[
										69331,
										69337
									],
									[
										69361,
										69367
									],
									[
										69501,
										69507
									],
									[
										69687,
										69693
									],
									[
										69707,
										69713
									],
									[
										69726,
										69732
									],
									[
										69768,
										69774
									],
									[
										69801,
										69807
									],
									[
										69918,
										69924
									],
									[
										70183,
										70189
									],
									[
										70457,
										70463
									],
									[
										70682,
										70688
									],
									[
										70842,
										70848
									],
									[
										70872,
										70878
									],
									[
										71012,
										71018
									],
									[
										71198,
										71204
									],
									[
										71218,
										71224
									],
									[
										71237,
										71243
									],
									[
										71279,
										71285
									],
									[
										71312,
										71318
									],
									[
										71429,
										71435
									],
									[
										71628,
										71634
									],
									[
										71702,
										71708
									],
									[
										71892,
										71898
									],
									[
										71906,
										71912
									],
									[
										71922,
										71928
									],
									[
										71993,
										71999
									],
									[
										72022,
										72028
									],
									[
										72069,
										72075
									],
									[
										72147,
										72153
									],
									[
										72194,
										72200
									],
									[
										72272,
										72278
									],
									[
										72325,
										72331
									],
									[
										72526,
										72532
									],
									[
										72544,
										72550
									],
									[
										72611,
										72617
									],
									[
										72794,
										72800
									],
									[
										72885,
										72891
									],
									[
										73040,
										73046
									],
									[
										73189,
										73195
									],
									[
										73456,
										73462
									],
									[
										73474,
										73480
									],
									[
										73513,
										73519
									],
									[
										73633,
										73639
									],
									[
										73916,
										73922
									],
									[
										74105,
										74111
									],
									[
										74317,
										74323
									],
									[
										74326,
										74332
									],
									[
										74562,
										74568
									],
									[
										74612,
										74618
									],
									[
										74647,
										74653
									],
									[
										74678,
										74684
									],
									[
										74773,
										74779
									],
									[
										74789,
										74795
									],
									[
										74817,
										74823
									],
									[
										75105,
										75111
									],
									[
										75217,
										75223
									],
									[
										75262,
										75268
									],
									[
										75379,
										75385
									],
									[
										75583,
										75589
									],
									[
										75773,
										75779
									],
									[
										75920,
										75926
									],
									[
										75929,
										75935
									],
									[
										76016,
										76022
									],
									[
										76025,
										76031
									],
									[
										76322,
										76328
									],
									[
										76344,
										76350
									],
									[
										76371,
										76377
									],
									[
										76639,
										76645
									],
									[
										76817,
										76823
									],
									[
										77007,
										77013
									],
									[
										77188,
										77194
									],
									[
										77354,
										77360
									],
									[
										77372,
										77378
									],
									[
										77439,
										77445
									],
									[
										77525,
										77531
									],
									[
										77549,
										77555
									],
									[
										77588,
										77594
									],
									[
										77612,
										77618
									],
									[
										77779,
										77785
									],
									[
										77942,
										77948
									],
									[
										78058,
										78064
									],
									[
										78246,
										78252
									],
									[
										78479,
										78485
									],
									[
										78780,
										78786
									],
									[
										78865,
										78871
									],
									[
										78932,
										78938
									],
									[
										79086,
										79092
									],
									[
										79374,
										79380
									],
									[
										79398,
										79404
									],
									[
										79555,
										79561
									],
									[
										79869,
										79875
									],
									[
										79887,
										79893
									],
									[
										79926,
										79932
									],
									[
										79964,
										79970
									],
									[
										80014,
										80020
									],
									[
										80049,
										80055
									],
									[
										80080,
										80086
									],
									[
										80134,
										80140
									],
									[
										80150,
										80156
									],
									[
										80178,
										80184
									],
									[
										80255,
										80261
									],
									[
										80439,
										80445
									],
									[
										80587,
										80593
									],
									[
										80748,
										80754
									],
									[
										80908,
										80914
									],
									[
										81061,
										81067
									],
									[
										81139,
										81145
									],
									[
										81222,
										81228
									],
									[
										81310,
										81316
									],
									[
										81573,
										81579
									],
									[
										81630,
										81636
									],
									[
										81654,
										81660
									],
									[
										81775,
										81781
									],
									[
										83495,
										83501
									],
									[
										83576,
										83582
									],
									[
										83730,
										83736
									],
									[
										83745,
										83751
									],
									[
										83800,
										83806
									],
									[
										83871,
										83877
									],
									[
										83886,
										83892
									],
									[
										84141,
										84147
									],
									[
										84224,
										84230
									],
									[
										84324,
										84330
									],
									[
										84523,
										84529
									],
									[
										84607,
										84613
									],
									[
										84631,
										84637
									],
									[
										84776,
										84782
									],
									[
										85118,
										85124
									],
									[
										85326,
										85332
									],
									[
										85748,
										85754
									],
									[
										86026,
										86032
									],
									[
										86324,
										86330
									],
									[
										86608,
										86614
									],
									[
										86914,
										86920
									],
									[
										87233,
										87239
									],
									[
										87418,
										87424
									],
									[
										87594,
										87600
									],
									[
										87618,
										87624
									],
									[
										87690,
										87696
									],
									[
										87725,
										87731
									],
									[
										87878,
										87884
									],
									[
										87930,
										87936
									],
									[
										87984,
										87990
									],
									[
										88038,
										88044
									],
									[
										88141,
										88147
									],
									[
										88170,
										88176
									],
									[
										88247,
										88253
									],
									[
										88287,
										88293
									],
									[
										88424,
										88430
									],
									[
										88480,
										88486
									],
									[
										88617,
										88623
									],
									[
										88643,
										88649
									],
									[
										88717,
										88723
									],
									[
										88754,
										88760
									],
									[
										88913,
										88919
									],
									[
										88931,
										88937
									],
									[
										89088,
										89094
									],
									[
										89177,
										89183
									],
									[
										89245,
										89251
									],
									[
										89362,
										89368
									],
									[
										89491,
										89497
									],
									[
										89735,
										89741
									],
									[
										89762,
										89768
									],
									[
										89837,
										89843
									],
									[
										89875,
										89881
									],
									[
										90006,
										90012
									],
									[
										90056,
										90062
									],
									[
										90191,
										90197
									],
									[
										90217,
										90223
									],
									[
										90291,
										90297
									],
									[
										90328,
										90334
									],
									[
										90488,
										90494
									],
									[
										90506,
										90512
									],
									[
										90557,
										90563
									],
									[
										90625,
										90631
									],
									[
										90868,
										90874
									],
									[
										90959,
										90965
									],
									[
										91131,
										91137
									],
									[
										91169,
										91175
									],
									[
										91255,
										91261
									],
									[
										91304,
										91310
									],
									[
										91452,
										91458
									],
									[
										91470,
										91476
									],
									[
										91492,
										91498
									],
									[
										91591,
										91597
									],
									[
										91646,
										91652
									],
									[
										91686,
										91692
									],
									[
										91774,
										91780
									],
									[
										91825,
										91831
									],
									[
										91969,
										91975
									],
									[
										92018,
										92024
									],
									[
										92100,
										92106
									],
									[
										92165,
										92171
									],
									[
										92230,
										92236
									],
									[
										92274,
										92280
									],
									[
										92366,
										92372
									],
									[
										92421,
										92427
									],
									[
										92596,
										92602
									],
									[
										92648,
										92654
									],
									[
										92710,
										92716
									],
									[
										92772,
										92778
									],
									[
										92920,
										92926
									],
									[
										92962,
										92968
									],
									[
										93077,
										93083
									],
									[
										93245,
										93251
									],
									[
										93398,
										93404
									],
									[
										93416,
										93422
									],
									[
										93579,
										93585
									],
									[
										93586,
										93592
									],
									[
										93647,
										93653
									],
									[
										93654,
										93660
									],
									[
										93814,
										93820
									],
									[
										93821,
										93827
									],
									[
										93882,
										93888
									],
									[
										93889,
										93895
									],
									[
										94084,
										94090
									],
									[
										94133,
										94139
									],
									[
										94230,
										94236
									],
									[
										94290,
										94296
									],
									[
										94449,
										94455
									],
									[
										94467,
										94473
									],
									[
										94476,
										94482
									],
									[
										94496,
										94502
									],
									[
										94523,
										94529
									],
									[
										94614,
										94620
									],
									[
										94661,
										94667
									],
									[
										94701,
										94707
									],
									[
										94789,
										94795
									],
									[
										94840,
										94846
									],
									[
										95000,
										95006
									],
									[
										95018,
										95024
									],
									[
										95040,
										95046
									],
									[
										95190,
										95196
									],
									[
										95230,
										95236
									],
									[
										95318,
										95324
									],
									[
										95369,
										95375
									],
									[
										95552,
										95558
									],
									[
										95739,
										95745
									],
									[
										95781,
										95787
									],
									[
										95871,
										95877
									],
									[
										95924,
										95930
									],
									[
										96096,
										96102
									],
									[
										96235,
										96241
									],
									[
										96291,
										96297
									],
									[
										96335,
										96341
									],
									[
										96427,
										96433
									],
									[
										96482,
										96488
									],
									[
										96656,
										96662
									],
									[
										96865,
										96871
									],
									[
										96918,
										96924
									],
									[
										97019,
										97025
									],
									[
										97083,
										97089
									],
									[
										97318,
										97324
									],
									[
										97535,
										97541
									],
									[
										97584,
										97590
									],
									[
										97681,
										97687
									],
									[
										97741,
										97747
									],
									[
										97872,
										97878
									],
									[
										97913,
										97919
									],
									[
										97998,
										98004
									],
									[
										98172,
										98178
									],
									[
										98219,
										98225
									],
									[
										98314,
										98320
									],
									[
										98372,
										98378
									],
									[
										98611,
										98617
									],
									[
										98629,
										98635
									],
									[
										98651,
										98657
									],
									[
										98717,
										98723
									],
									[
										98924,
										98930
									],
									[
										98960,
										98966
									],
									[
										99044,
										99050
									],
									[
										99091,
										99097
									],
									[
										99237,
										99243
									],
									[
										99255,
										99261
									],
									[
										99277,
										99283
									],
									[
										99428,
										99434
									],
									[
										99464,
										99470
									],
									[
										99548,
										99554
									],
									[
										99595,
										99601
									],
									[
										99727,
										99733
									],
									[
										99782,
										99788
									],
									[
										99923,
										99929
									],
									[
										99967,
										99973
									],
									[
										100059,
										100065
									],
									[
										100114,
										100120
									],
									[
										100254,
										100260
									],
									[
										100309,
										100315
									],
									[
										100450,
										100456
									],
									[
										100492,
										100498
									],
									[
										100582,
										100588
									],
									[
										100635,
										100641
									],
									[
										100800,
										100806
									],
									[
										100818,
										100824
									],
									[
										100840,
										100846
									],
									[
										100944,
										100950
									],
									[
										101000,
										101006
									],
									[
										101033,
										101039
									],
									[
										101139,
										101145
									],
									[
										101285,
										101291
									],
									[
										101417,
										101423
									],
									[
										101533,
										101539
									],
									[
										101551,
										101557
									],
									[
										101604,
										101610
									],
									[
										101664,
										101670
									],
									[
										101810,
										101816
									],
									[
										101864,
										101870
									],
									[
										101991,
										101997
									],
									[
										102135,
										102141
									],
									[
										102182,
										102188
									],
									[
										102277,
										102283
									],
									[
										102335,
										102341
									],
									[
										102500,
										102506
									],
									[
										102684,
										102690
									],
									[
										102722,
										102728
									],
									[
										102808,
										102814
									],
									[
										102857,
										102863
									],
									[
										102998,
										103004
									],
									[
										103050,
										103056
									],
									[
										103112,
										103118
									],
									[
										103174,
										103180
									],
									[
										103315,
										103321
									],
									[
										103365,
										103371
									],
									[
										103463,
										103469
									],
									[
										103524,
										103530
									],
									[
										103684,
										103690
									],
									[
										103702,
										103708
									],
									[
										103724,
										103730
									],
									[
										103873,
										103879
									],
									[
										103928,
										103934
									],
									[
										104031,
										104037
									],
									[
										104097,
										104103
									],
									[
										104293,
										104299
									],
									[
										104311,
										104317
									],
									[
										104333,
										104339
									],
									[
										104448,
										104454
									],
									[
										104483,
										104489
									],
									[
										104566,
										104572
									],
									[
										104612,
										104618
									],
									[
										104770,
										104776
									],
									[
										104788,
										104794
									],
									[
										104810,
										104816
									],
									[
										104861,
										104867
									],
									[
										104901,
										104907
									],
									[
										104995,
										105001
									],
									[
										105041,
										105047
									],
									[
										105135,
										105141
									],
									[
										105192,
										105198
									],
									[
										105368,
										105374
									],
									[
										105544,
										105550
									],
									[
										105603,
										105609
									],
									[
										105710,
										105716
									],
									[
										105780,
										105786
									],
									[
										105970,
										105976
									],
									[
										106116,
										106122
									],
									[
										106165,
										106171
									],
									[
										106262,
										106268
									],
									[
										106322,
										106328
									],
									[
										106505,
										106511
									],
									[
										106577,
										106583
									],
									[
										106712,
										106718
									],
									[
										106764,
										106770
									],
									[
										106864,
										106870
									],
									[
										106927,
										106933
									],
									[
										107089,
										107095
									],
									[
										107107,
										107113
									],
									[
										107129,
										107135
									],
									[
										107180,
										107186
									],
									[
										107275,
										107281
									],
									[
										107328,
										107334
									],
									[
										107429,
										107435
									],
									[
										107493,
										107499
									],
									[
										107680,
										107686
									],
									[
										107742,
										107748
									],
									[
										107864,
										107870
									],
									[
										107914,
										107920
									],
									[
										108012,
										108018
									],
									[
										108073,
										108079
									],
									[
										108254,
										108260
									],
									[
										108316,
										108322
									],
									[
										108408,
										108414
									],
									[
										108464,
										108470
									],
									[
										108508,
										108514
									],
									[
										108600,
										108606
									],
									[
										108655,
										108661
									],
									[
										108830,
										108836
									],
									[
										108882,
										108888
									],
									[
										108944,
										108950
									],
									[
										109006,
										109012
									],
									[
										109165,
										109171
									],
									[
										109208,
										109214
									],
									[
										109299,
										109305
									],
									[
										109353,
										109359
									],
									[
										109523,
										109529
									],
									[
										109578,
										109584
									],
									[
										109715,
										109721
									],
									[
										109755,
										109761
									],
									[
										109843,
										109849
									],
									[
										109894,
										109900
									],
									[
										110071,
										110077
									],
									[
										110127,
										110133
									],
									[
										110360,
										110366
									],
									[
										110403,
										110409
									],
									[
										110494,
										110500
									],
									[
										110548,
										110554
									],
									[
										110704,
										110710
									],
									[
										110722,
										110728
									],
									[
										110744,
										110750
									],
									[
										110894,
										110900
									],
									[
										110936,
										110942
									],
									[
										111026,
										111032
									],
									[
										111079,
										111085
									],
									[
										111234,
										111240
									],
									[
										111252,
										111258
									],
									[
										111274,
										111280
									],
									[
										111398,
										111404
									],
									[
										111437,
										111443
									],
									[
										111524,
										111530
									],
									[
										111574,
										111580
									],
									[
										111750,
										111756
									],
									[
										111795,
										111801
									],
									[
										111986,
										111992
									],
									[
										112032,
										112038
									],
									[
										112126,
										112132
									],
									[
										112183,
										112189
									],
									[
										112339,
										112345
									],
									[
										112357,
										112363
									],
									[
										112379,
										112385
									],
									[
										112430,
										112436
									],
									[
										112470,
										112476
									],
									[
										112665,
										112671
									],
									[
										112729,
										112735
									],
									[
										112763,
										112769
									],
									[
										112969,
										112975
									],
									[
										113047,
										113053
									],
									[
										113229,
										113235
									],
									[
										113313,
										113319
									],
									[
										113348,
										113354
									],
									[
										113456,
										113462
									],
									[
										113676,
										113682
									],
									[
										113694,
										113700
									],
									[
										113812,
										113818
									],
									[
										113830,
										113836
									],
									[
										114076,
										114082
									],
									[
										114282,
										114288
									],
									[
										114319,
										114325
									],
									[
										114337,
										114343
									],
									[
										114424,
										114430
									],
									[
										114486,
										114492
									],
									[
										114549,
										114555
									],
									[
										114617,
										114623
									],
									[
										114790,
										114796
									],
									[
										114825,
										114831
									],
									[
										114902,
										114908
									],
									[
										114978,
										114984
									],
									[
										115035,
										115041
									],
									[
										115096,
										115102
									],
									[
										115152,
										115158
									],
									[
										115165,
										115171
									],
									[
										115253,
										115259
									],
									[
										115364,
										115370
									],
									[
										115396,
										115402
									],
									[
										115452,
										115458
									],
									[
										115531,
										115537
									],
									[
										115649,
										115655
									],
									[
										115763,
										115769
									],
									[
										115867,
										115873
									],
									[
										116141,
										116147
									],
									[
										116350,
										116356
									],
									[
										116544,
										116550
									],
									[
										116783,
										116789
									],
									[
										116800,
										116806
									],
									[
										117068,
										117074
									],
									[
										117121,
										117127
									],
									[
										117408,
										117414
									],
									[
										117476,
										117482
									],
									[
										117621,
										117627
									],
									[
										117855,
										117861
									],
									[
										117873,
										117879
									],
									[
										118029,
										118035
									],
									[
										118141,
										118147
									],
									[
										118197,
										118203
									],
									[
										118241,
										118247
									],
									[
										118341,
										118347
									],
									[
										118527,
										118533
									],
									[
										118723,
										118729
									],
									[
										118844,
										118850
									],
									[
										118937,
										118943
									],
									[
										119059,
										119065
									],
									[
										119225,
										119231
									],
									[
										119387,
										119393
									],
									[
										119427,
										119433
									],
									[
										119540,
										119546
									],
									[
										119589,
										119595
									],
									[
										119841,
										119847
									],
									[
										119884,
										119890
									],
									[
										120047,
										120053
									],
									[
										120106,
										120112
									],
									[
										120330,
										120336
									],
									[
										120364,
										120370
									],
									[
										120742,
										120748
									],
									[
										120930,
										120936
									],
									[
										121137,
										121143
									],
									[
										121338,
										121344
									],
									[
										121369,
										121375
									],
									[
										121573,
										121579
									],
									[
										121642,
										121648
									],
									[
										121709,
										121715
									],
									[
										121761,
										121767
									],
									[
										121800,
										121806
									],
									[
										121999,
										122005
									],
									[
										122157,
										122163
									],
									[
										122247,
										122253
									],
									[
										122472,
										122478
									],
									[
										122769,
										122775
									],
									[
										123037,
										123043
									],
									[
										123302,
										123308
									],
									[
										123468,
										123474
									],
									[
										123627,
										123633
									],
									[
										123710,
										123716
									],
									[
										123776,
										123782
									],
									[
										123813,
										123819
									],
									[
										123879,
										123885
									],
									[
										123957,
										123963
									],
									[
										123988,
										123994
									],
									[
										124121,
										124127
									],
									[
										124246,
										124252
									],
									[
										124324,
										124330
									],
									[
										124437,
										124443
									],
									[
										124561,
										124567
									],
									[
										124708,
										124714
									],
									[
										124878,
										124884
									],
									[
										125048,
										125054
									],
									[
										125089,
										125095
									],
									[
										125216,
										125222
									],
									[
										125237,
										125243
									],
									[
										125419,
										125425
									],
									[
										125575,
										125581
									],
									[
										125724,
										125730
									],
									[
										125817,
										125823
									],
									[
										125848,
										125854
									],
									[
										126091,
										126097
									],
									[
										126264,
										126270
									],
									[
										126304,
										126310
									],
									[
										126529,
										126535
									],
									[
										126559,
										126565
									],
									[
										126900,
										126906
									],
									[
										127100,
										127106
									],
									[
										127166,
										127172
									],
									[
										127476,
										127482
									],
									[
										127892,
										127898
									],
									[
										128165,
										128171
									],
									[
										128277,
										128283
									],
									[
										128372,
										128378
									],
									[
										128465,
										128471
									],
									[
										128503,
										128509
									],
									[
										128619,
										128625
									],
									[
										128793,
										128799
									],
									[
										128882,
										128888
									],
									[
										129009,
										129015
									],
									[
										129168,
										129174
									],
									[
										129378,
										129384
									],
									[
										129442,
										129448
									],
									[
										129516,
										129522
									],
									[
										129565,
										129571
									],
									[
										129737,
										129743
									],
									[
										129778,
										129784
									],
									[
										129942,
										129948
									],
									[
										130209,
										130215
									],
									[
										130389,
										130395
									],
									[
										130407,
										130413
									],
									[
										130456,
										130462
									],
									[
										130583,
										130589
									],
									[
										130627,
										130633
									],
									[
										130788,
										130794
									],
									[
										130832,
										130838
									],
									[
										130950,
										130956
									],
									[
										131200,
										131206
									],
									[
										131447,
										131453
									],
									[
										131626,
										131632
									],
									[
										131761,
										131767
									],
									[
										131909,
										131915
									],
									[
										131990,
										131996
									],
									[
										132188,
										132194
									],
									[
										132344,
										132350
									],
									[
										132595,
										132601
									],
									[
										132805,
										132811
									],
									[
										133019,
										133025
									],
									[
										133286,
										133292
									],
									[
										133517,
										133523
									],
									[
										133636,
										133642
									],
									[
										133813,
										133819
									],
									[
										133876,
										133882
									],
									[
										133998,
										134004
									],
									[
										134123,
										134129
									],
									[
										134175,
										134181
									],
									[
										134265,
										134271
									],
									[
										134300,
										134306
									],
									[
										134443,
										134449
									],
									[
										134600,
										134606
									],
									[
										134763,
										134769
									],
									[
										134892,
										134898
									],
									[
										134983,
										134989
									],
									[
										135081,
										135087
									],
									[
										135160,
										135166
									],
									[
										135240,
										135246
									],
									[
										135447,
										135453
									],
									[
										135565,
										135571
									],
									[
										135719,
										135725
									],
									[
										135797,
										135803
									],
									[
										136021,
										136027
									],
									[
										136271,
										136277
									],
									[
										136441,
										136447
									],
									[
										136579,
										136585
									],
									[
										136679,
										136685
									],
									[
										136761,
										136767
									],
									[
										136809,
										136815
									],
									[
										136909,
										136915
									],
									[
										136974,
										136980
									],
									[
										137038,
										137044
									],
									[
										137132,
										137138
									],
									[
										137204,
										137210
									],
									[
										137334,
										137340
									],
									[
										137623,
										137629
									],
									[
										137636,
										137642
									],
									[
										137744,
										137750
									],
									[
										137810,
										137816
									],
									[
										137845,
										137851
									],
									[
										137899,
										137905
									],
									[
										137956,
										137962
									],
									[
										138010,
										138016
									],
									[
										138066,
										138072
									],
									[
										138117,
										138123
									],
									[
										138215,
										138221
									],
									[
										138276,
										138282
									],
									[
										138351,
										138357
									],
									[
										138411,
										138417
									],
									[
										138503,
										138509
									],
									[
										138871,
										138877
									],
									[
										140152,
										140158
									],
									[
										141458,
										141464
									],
									[
										141555,
										141561
									],
									[
										141833,
										141839
									],
									[
										142079,
										142085
									],
									[
										142366,
										142372
									],
									[
										142656,
										142662
									],
									[
										143937,
										143943
									],
									[
										145229,
										145235
									],
									[
										145524,
										145530
									],
									[
										145817,
										145823
									],
									[
										146082,
										146088
									],
									[
										146177,
										146183
									],
									[
										146272,
										146278
									],
									[
										146490,
										146496
									],
									[
										146676,
										146682
									],
									[
										146873,
										146879
									],
									[
										147218,
										147224
									],
									[
										147512,
										147518
									],
									[
										147734,
										147740
									],
									[
										147931,
										147937
									],
									[
										147958,
										147964
									],
									[
										148145,
										148151
									],
									[
										148170,
										148176
									],
									[
										148308,
										148314
									],
									[
										148393,
										148399
									],
									[
										148620,
										148626
									],
									[
										148725,
										148731
									],
									[
										148844,
										148850
									],
									[
										148914,
										148920
									],
									[
										149028,
										149034
									],
									[
										149041,
										149047
									],
									[
										149081,
										149087
									],
									[
										149176,
										149182
									],
									[
										149229,
										149235
									],
									[
										149276,
										149282
									],
									[
										149331,
										149337
									],
									[
										149422,
										149428
									],
									[
										149474,
										149480
									],
									[
										149610,
										149616
									],
									[
										149760,
										149766
									],
									[
										149791,
										149797
									],
									[
										149875,
										149881
									],
									[
										149913,
										149919
									],
									[
										149995,
										150001
									],
									[
										150071,
										150077
									],
									[
										150204,
										150210
									],
									[
										150295,
										150301
									],
									[
										150341,
										150347
									],
									[
										150406,
										150412
									],
									[
										150448,
										150454
									],
									[
										150521,
										150527
									],
									[
										150561,
										150567
									],
									[
										150631,
										150637
									],
									[
										150680,
										150686
									],
									[
										150738,
										150744
									],
									[
										150787,
										150793
									],
									[
										150871,
										150877
									],
									[
										150954,
										150960
									],
									[
										150963,
										150969
									],
									[
										151055,
										151061
									],
									[
										151198,
										151204
									],
									[
										151224,
										151230
									],
									[
										151428,
										151434
									],
									[
										151440,
										151446
									],
									[
										151468,
										151474
									],
									[
										151494,
										151500
									],
									[
										151535,
										151541
									],
									[
										151795,
										151801
									],
									[
										151901,
										151907
									],
									[
										151921,
										151927
									],
									[
										152046,
										152052
									],
									[
										152187,
										152193
									],
									[
										152251,
										152257
									],
									[
										152347,
										152353
									],
									[
										152412,
										152418
									],
									[
										152579,
										152585
									],
									[
										152798,
										152804
									],
									[
										153105,
										153111
									],
									[
										153232,
										153238
									],
									[
										153350,
										153356
									],
									[
										153381,
										153387
									],
									[
										153662,
										153668
									],
									[
										153905,
										153911
									],
									[
										154179,
										154185
									],
									[
										154313,
										154319
									],
									[
										154633,
										154639
									],
									[
										154928,
										154934
									],
									[
										155112,
										155118
									],
									[
										155136,
										155142
									],
									[
										155208,
										155214
									],
									[
										155243,
										155249
									],
									[
										155396,
										155402
									],
									[
										155448,
										155454
									],
									[
										155502,
										155508
									],
									[
										155556,
										155562
									],
									[
										155659,
										155665
									],
									[
										155688,
										155694
									],
									[
										155765,
										155771
									],
									[
										155805,
										155811
									],
									[
										155942,
										155948
									],
									[
										155998,
										156004
									],
									[
										156135,
										156141
									],
									[
										156161,
										156167
									],
									[
										156235,
										156241
									],
									[
										156272,
										156278
									],
									[
										156431,
										156437
									],
									[
										156449,
										156455
									],
									[
										156606,
										156612
									],
									[
										156695,
										156701
									],
									[
										156763,
										156769
									],
									[
										156880,
										156886
									],
									[
										157009,
										157015
									],
									[
										157253,
										157259
									],
									[
										157280,
										157286
									],
									[
										157355,
										157361
									],
									[
										157393,
										157399
									],
									[
										157524,
										157530
									],
									[
										157574,
										157580
									],
									[
										157709,
										157715
									],
									[
										157735,
										157741
									],
									[
										157809,
										157815
									],
									[
										157846,
										157852
									],
									[
										158006,
										158012
									],
									[
										158024,
										158030
									],
									[
										158075,
										158081
									],
									[
										158143,
										158149
									],
									[
										158386,
										158392
									],
									[
										158477,
										158483
									],
									[
										158649,
										158655
									],
									[
										158687,
										158693
									],
									[
										158773,
										158779
									],
									[
										158822,
										158828
									],
									[
										158970,
										158976
									],
									[
										158988,
										158994
									],
									[
										159010,
										159016
									],
									[
										159109,
										159115
									],
									[
										159164,
										159170
									],
									[
										159204,
										159210
									],
									[
										159292,
										159298
									],
									[
										159343,
										159349
									],
									[
										159487,
										159493
									],
									[
										159536,
										159542
									],
									[
										159618,
										159624
									],
									[
										159683,
										159689
									],
									[
										159748,
										159754
									],
									[
										159792,
										159798
									],
									[
										159884,
										159890
									],
									[
										159939,
										159945
									],
									[
										160114,
										160120
									],
									[
										160166,
										160172
									],
									[
										160228,
										160234
									],
									[
										160290,
										160296
									],
									[
										160438,
										160444
									],
									[
										160480,
										160486
									],
									[
										160595,
										160601
									],
									[
										160763,
										160769
									],
									[
										160916,
										160922
									],
									[
										160934,
										160940
									],
									[
										161097,
										161103
									],
									[
										161104,
										161110
									],
									[
										161165,
										161171
									],
									[
										161172,
										161178
									],
									[
										161332,
										161338
									],
									[
										161339,
										161345
									],
									[
										161400,
										161406
									],
									[
										161407,
										161413
									],
									[
										161602,
										161608
									],
									[
										161651,
										161657
									],
									[
										161748,
										161754
									],
									[
										161808,
										161814
									],
									[
										161967,
										161973
									],
									[
										161985,
										161991
									],
									[
										161994,
										162000
									],
									[
										162014,
										162020
									],
									[
										162041,
										162047
									],
									[
										162132,
										162138
									],
									[
										162179,
										162185
									],
									[
										162219,
										162225
									],
									[
										162307,
										162313
									],
									[
										162358,
										162364
									],
									[
										162518,
										162524
									],
									[
										162536,
										162542
									],
									[
										162558,
										162564
									],
									[
										162708,
										162714
									],
									[
										162748,
										162754
									],
									[
										162836,
										162842
									],
									[
										162887,
										162893
									],
									[
										163070,
										163076
									],
									[
										163257,
										163263
									],
									[
										163299,
										163305
									],
									[
										163389,
										163395
									],
									[
										163442,
										163448
									],
									[
										163614,
										163620
									],
									[
										163753,
										163759
									],
									[
										163809,
										163815
									],
									[
										163853,
										163859
									],
									[
										163945,
										163951
									],
									[
										164000,
										164006
									],
									[
										164174,
										164180
									],
									[
										164383,
										164389
									],
									[
										164436,
										164442
									],
									[
										164537,
										164543
									],
									[
										164601,
										164607
									],
									[
										164836,
										164842
									],
									[
										165053,
										165059
									],
									[
										165102,
										165108
									],
									[
										165199,
										165205
									],
									[
										165259,
										165265
									],
									[
										165390,
										165396
									],
									[
										165431,
										165437
									],
									[
										165516,
										165522
									],
									[
										165690,
										165696
									],
									[
										165737,
										165743
									],
									[
										165832,
										165838
									],
									[
										165890,
										165896
									],
									[
										166129,
										166135
									],
									[
										166147,
										166153
									],
									[
										166169,
										166175
									],
									[
										166235,
										166241
									],
									[
										166442,
										166448
									],
									[
										166478,
										166484
									],
									[
										166562,
										166568
									],
									[
										166609,
										166615
									],
									[
										166755,
										166761
									],
									[
										166773,
										166779
									],
									[
										166795,
										166801
									],
									[
										166946,
										166952
									],
									[
										166982,
										166988
									],
									[
										167066,
										167072
									],
									[
										167113,
										167119
									],
									[
										167245,
										167251
									],
									[
										167300,
										167306
									],
									[
										167441,
										167447
									],
									[
										167485,
										167491
									],
									[
										167577,
										167583
									],
									[
										167632,
										167638
									],
									[
										167772,
										167778
									],
									[
										167827,
										167833
									],
									[
										167968,
										167974
									],
									[
										168010,
										168016
									],
									[
										168100,
										168106
									],
									[
										168153,
										168159
									],
									[
										168318,
										168324
									],
									[
										168336,
										168342
									],
									[
										168358,
										168364
									],
									[
										168462,
										168468
									],
									[
										168518,
										168524
									],
									[
										168551,
										168557
									],
									[
										168657,
										168663
									],
									[
										168803,
										168809
									],
									[
										168935,
										168941
									],
									[
										169051,
										169057
									],
									[
										169069,
										169075
									],
									[
										169122,
										169128
									],
									[
										169182,
										169188
									],
									[
										169328,
										169334
									],
									[
										169382,
										169388
									],
									[
										169509,
										169515
									],
									[
										169653,
										169659
									],
									[
										169700,
										169706
									],
									[
										169795,
										169801
									],
									[
										169853,
										169859
									],
									[
										170018,
										170024
									],
									[
										170202,
										170208
									],
									[
										170240,
										170246
									],
									[
										170326,
										170332
									],
									[
										170375,
										170381
									],
									[
										170516,
										170522
									],
									[
										170568,
										170574
									],
									[
										170630,
										170636
									],
									[
										170692,
										170698
									],
									[
										170833,
										170839
									],
									[
										170883,
										170889
									],
									[
										170981,
										170987
									],
									[
										171042,
										171048
									],
									[
										171202,
										171208
									],
									[
										171220,
										171226
									],
									[
										171242,
										171248
									],
									[
										171391,
										171397
									],
									[
										171446,
										171452
									],
									[
										171549,
										171555
									],
									[
										171615,
										171621
									],
									[
										171811,
										171817
									],
									[
										171829,
										171835
									],
									[
										171851,
										171857
									],
									[
										171966,
										171972
									],
									[
										172001,
										172007
									],
									[
										172084,
										172090
									],
									[
										172130,
										172136
									],
									[
										172288,
										172294
									],
									[
										172306,
										172312
									],
									[
										172328,
										172334
									],
									[
										172379,
										172385
									],
									[
										172419,
										172425
									],
									[
										172513,
										172519
									],
									[
										172559,
										172565
									],
									[
										172653,
										172659
									],
									[
										172710,
										172716
									],
									[
										172886,
										172892
									],
									[
										173062,
										173068
									],
									[
										173121,
										173127
									],
									[
										173228,
										173234
									],
									[
										173298,
										173304
									],
									[
										173488,
										173494
									],
									[
										173634,
										173640
									],
									[
										173683,
										173689
									],
									[
										173780,
										173786
									],
									[
										173840,
										173846
									],
									[
										174023,
										174029
									],
									[
										174095,
										174101
									],
									[
										174230,
										174236
									],
									[
										174282,
										174288
									],
									[
										174382,
										174388
									],
									[
										174445,
										174451
									],
									[
										174607,
										174613
									],
									[
										174625,
										174631
									],
									[
										174647,
										174653
									],
									[
										174698,
										174704
									],
									[
										174793,
										174799
									],
									[
										174846,
										174852
									],
									[
										174947,
										174953
									],
									[
										175011,
										175017
									],
									[
										175198,
										175204
									],
									[
										175260,
										175266
									],
									[
										175382,
										175388
									],
									[
										175432,
										175438
									],
									[
										175530,
										175536
									],
									[
										175591,
										175597
									],
									[
										175772,
										175778
									],
									[
										175834,
										175840
									],
									[
										175926,
										175932
									],
									[
										175982,
										175988
									],
									[
										176026,
										176032
									],
									[
										176118,
										176124
									],
									[
										176173,
										176179
									],
									[
										176348,
										176354
									],
									[
										176400,
										176406
									],
									[
										176462,
										176468
									],
									[
										176524,
										176530
									],
									[
										176683,
										176689
									],
									[
										176726,
										176732
									],
									[
										176817,
										176823
									],
									[
										176871,
										176877
									],
									[
										177041,
										177047
									],
									[
										177096,
										177102
									],
									[
										177233,
										177239
									],
									[
										177273,
										177279
									],
									[
										177361,
										177367
									],
									[
										177412,
										177418
									],
									[
										177589,
										177595
									],
									[
										177645,
										177651
									],
									[
										177878,
										177884
									],
									[
										177921,
										177927
									],
									[
										178012,
										178018
									],
									[
										178066,
										178072
									],
									[
										178222,
										178228
									],
									[
										178240,
										178246
									],
									[
										178262,
										178268
									],
									[
										178412,
										178418
									],
									[
										178454,
										178460
									],
									[
										178544,
										178550
									],
									[
										178597,
										178603
									],
									[
										178752,
										178758
									],
									[
										178770,
										178776
									],
									[
										178792,
										178798
									],
									[
										178916,
										178922
									],
									[
										178955,
										178961
									],
									[
										179042,
										179048
									],
									[
										179092,
										179098
									],
									[
										179268,
										179274
									],
									[
										179313,
										179319
									],
									[
										179504,
										179510
									],
									[
										179550,
										179556
									],
									[
										179644,
										179650
									],
									[
										179701,
										179707
									],
									[
										179857,
										179863
									],
									[
										179875,
										179881
									],
									[
										179897,
										179903
									],
									[
										179948,
										179954
									],
									[
										179988,
										179994
									],
									[
										180191,
										180197
									],
									[
										180255,
										180261
									],
									[
										180289,
										180295
									],
									[
										180495,
										180501
									],
									[
										180573,
										180579
									],
									[
										180755,
										180761
									],
									[
										180839,
										180845
									],
									[
										180874,
										180880
									],
									[
										180982,
										180988
									],
									[
										181203,
										181209
									],
									[
										181221,
										181227
									],
									[
										181339,
										181345
									],
									[
										181357,
										181363
									],
									[
										181611,
										181617
									],
									[
										181825,
										181831
									],
									[
										181862,
										181868
									],
									[
										181880,
										181886
									],
									[
										181967,
										181973
									],
									[
										182029,
										182035
									],
									[
										182092,
										182098
									],
									[
										182160,
										182166
									],
									[
										182341,
										182347
									],
									[
										182376,
										182382
									],
									[
										182453,
										182459
									],
									[
										182529,
										182535
									],
									[
										182586,
										182592
									],
									[
										182647,
										182653
									],
									[
										182703,
										182709
									],
									[
										182716,
										182722
									],
									[
										182804,
										182810
									],
									[
										182915,
										182921
									],
									[
										182947,
										182953
									],
									[
										183003,
										183009
									],
									[
										183082,
										183088
									],
									[
										183200,
										183206
									],
									[
										183314,
										183320
									],
									[
										183418,
										183424
									],
									[
										183692,
										183698
									],
									[
										183909,
										183915
									],
									[
										184111,
										184117
									],
									[
										184358,
										184364
									],
									[
										184375,
										184381
									],
									[
										184643,
										184649
									],
									[
										184696,
										184702
									],
									[
										184991,
										184997
									],
									[
										185059,
										185065
									],
									[
										185204,
										185210
									],
									[
										185446,
										185452
									],
									[
										185464,
										185470
									],
									[
										185620,
										185626
									],
									[
										185732,
										185738
									],
									[
										185788,
										185794
									],
									[
										185832,
										185838
									],
									[
										185932,
										185938
									],
									[
										186118,
										186124
									],
									[
										186314,
										186320
									],
									[
										186435,
										186441
									],
									[
										186528,
										186534
									],
									[
										186650,
										186656
									],
									[
										186816,
										186822
									],
									[
										186978,
										186984
									],
									[
										187018,
										187024
									],
									[
										187131,
										187137
									],
									[
										187180,
										187186
									],
									[
										187432,
										187438
									],
									[
										187475,
										187481
									],
									[
										187638,
										187644
									],
									[
										187697,
										187703
									],
									[
										187921,
										187927
									],
									[
										187955,
										187961
									],
									[
										188333,
										188339
									],
									[
										188521,
										188527
									],
									[
										188728,
										188734
									],
									[
										188929,
										188935
									],
									[
										188960,
										188966
									],
									[
										189164,
										189170
									],
									[
										189233,
										189239
									],
									[
										189300,
										189306
									],
									[
										189352,
										189358
									],
									[
										189391,
										189397
									],
									[
										189590,
										189596
									],
									[
										189748,
										189754
									],
									[
										189838,
										189844
									],
									[
										190063,
										190069
									],
									[
										190360,
										190366
									],
									[
										190628,
										190634
									],
									[
										190893,
										190899
									],
									[
										191059,
										191065
									],
									[
										191218,
										191224
									],
									[
										191301,
										191307
									],
									[
										191367,
										191373
									],
									[
										191404,
										191410
									],
									[
										191470,
										191476
									],
									[
										191548,
										191554
									],
									[
										191579,
										191585
									],
									[
										191712,
										191718
									],
									[
										191837,
										191843
									],
									[
										191915,
										191921
									],
									[
										192028,
										192034
									],
									[
										192152,
										192158
									],
									[
										192299,
										192305
									],
									[
										192469,
										192475
									],
									[
										192639,
										192645
									],
									[
										192680,
										192686
									],
									[
										192807,
										192813
									],
									[
										192828,
										192834
									],
									[
										193010,
										193016
									],
									[
										193166,
										193172
									],
									[
										193315,
										193321
									],
									[
										193408,
										193414
									],
									[
										193439,
										193445
									],
									[
										193682,
										193688
									],
									[
										193855,
										193861
									],
									[
										193895,
										193901
									],
									[
										194128,
										194134
									],
									[
										194158,
										194164
									],
									[
										194499,
										194505
									],
									[
										194699,
										194705
									],
									[
										194765,
										194771
									],
									[
										195075,
										195081
									],
									[
										195491,
										195497
									],
									[
										195764,
										195770
									],
									[
										195876,
										195882
									],
									[
										195971,
										195977
									],
									[
										196064,
										196070
									],
									[
										196102,
										196108
									],
									[
										196218,
										196224
									],
									[
										196392,
										196398
									],
									[
										196481,
										196487
									],
									[
										196608,
										196614
									],
									[
										196767,
										196773
									],
									[
										196977,
										196983
									],
									[
										197041,
										197047
									],
									[
										197115,
										197121
									],
									[
										197164,
										197170
									],
									[
										197336,
										197342
									],
									[
										197377,
										197383
									],
									[
										197541,
										197547
									],
									[
										197816,
										197822
									],
									[
										197996,
										198002
									],
									[
										198014,
										198020
									],
									[
										198063,
										198069
									],
									[
										198190,
										198196
									],
									[
										198234,
										198240
									],
									[
										198395,
										198401
									],
									[
										198439,
										198445
									],
									[
										198557,
										198563
									],
									[
										198807,
										198813
									],
									[
										199054,
										199060
									],
									[
										199233,
										199239
									],
									[
										199368,
										199374
									],
									[
										199516,
										199522
									],
									[
										199597,
										199603
									],
									[
										199795,
										199801
									],
									[
										199951,
										199957
									],
									[
										200202,
										200208
									],
									[
										200412,
										200418
									],
									[
										200626,
										200632
									],
									[
										200893,
										200899
									],
									[
										201124,
										201130
									],
									[
										201243,
										201249
									],
									[
										201420,
										201426
									],
									[
										201483,
										201489
									],
									[
										201605,
										201611
									],
									[
										201730,
										201736
									],
									[
										201782,
										201788
									],
									[
										201872,
										201878
									],
									[
										201907,
										201913
									],
									[
										202050,
										202056
									],
									[
										202207,
										202213
									],
									[
										202370,
										202376
									],
									[
										202499,
										202505
									],
									[
										202590,
										202596
									],
									[
										202688,
										202694
									],
									[
										202767,
										202773
									],
									[
										202847,
										202853
									],
									[
										203054,
										203060
									],
									[
										203172,
										203178
									],
									[
										203326,
										203332
									],
									[
										203404,
										203410
									],
									[
										203628,
										203634
									],
									[
										203878,
										203884
									],
									[
										204048,
										204054
									],
									[
										204186,
										204192
									],
									[
										204286,
										204292
									],
									[
										204368,
										204374
									],
									[
										204416,
										204422
									],
									[
										204516,
										204522
									],
									[
										204581,
										204587
									],
									[
										204645,
										204651
									],
									[
										204739,
										204745
									],
									[
										204811,
										204817
									],
									[
										204941,
										204947
									],
									[
										205238,
										205244
									],
									[
										205251,
										205257
									],
									[
										205359,
										205365
									],
									[
										205425,
										205431
									],
									[
										205460,
										205466
									],
									[
										205514,
										205520
									],
									[
										205571,
										205577
									],
									[
										205625,
										205631
									],
									[
										205681,
										205687
									],
									[
										205732,
										205738
									],
									[
										205830,
										205836
									],
									[
										205891,
										205897
									],
									[
										205966,
										205972
									],
									[
										206026,
										206032
									],
									[
										206118,
										206124
									],
									[
										206374,
										206380
									],
									[
										206595,
										206601
									],
									[
										206719,
										206725
									],
									[
										206888,
										206894
									],
									[
										207007,
										207013
									],
									[
										207110,
										207116
									],
									[
										207162,
										207168
									],
									[
										207318,
										207324
									],
									[
										207335,
										207341
									],
									[
										207392,
										207398
									],
									[
										207620,
										207626
									],
									[
										207637,
										207643
									],
									[
										207772,
										207778
									],
									[
										207943,
										207949
									],
									[
										208025,
										208031
									],
									[
										208089,
										208095
									],
									[
										208114,
										208120
									],
									[
										208157,
										208163
									],
									[
										208297,
										208303
									],
									[
										208551,
										208557
									],
									[
										208830,
										208836
									],
									[
										208852,
										208858
									],
									[
										208884,
										208890
									],
									[
										208962,
										208968
									],
									[
										209318,
										209324
									],
									[
										209606,
										209612
									],
									[
										209854,
										209860
									],
									[
										210020,
										210026
									],
									[
										210164,
										210170
									],
									[
										210305,
										210311
									],
									[
										210454,
										210460
									],
									[
										210592,
										210598
									],
									[
										210864,
										210870
									],
									[
										211069,
										211075
									],
									[
										211087,
										211093
									],
									[
										211252,
										211258
									],
									[
										211274,
										211280
									],
									[
										211471,
										211477
									],
									[
										211502,
										211508
									],
									[
										211524,
										211530
									],
									[
										211676,
										211682
									],
									[
										211876,
										211882
									],
									[
										212066,
										212072
									],
									[
										212095,
										212101
									],
									[
										212398,
										212404
									],
									[
										212556,
										212562
									],
									[
										212752,
										212758
									],
									[
										213385,
										213391
									],
									[
										213966,
										213972
									],
									[
										214146,
										214152
									],
									[
										215568,
										215574
									],
									[
										215920,
										215926
									],
									[
										216098,
										216104
									],
									[
										216437,
										216443
									],
									[
										216742,
										216748
									],
									[
										216804,
										216810
									],
									[
										217049,
										217055
									],
									[
										217372,
										217378
									],
									[
										217605,
										217611
									],
									[
										217890,
										217896
									],
									[
										218156,
										218162
									],
									[
										218415,
										218421
									],
									[
										218655,
										218661
									],
									[
										218970,
										218976
									],
									[
										219080,
										219086
									],
									[
										219263,
										219269
									],
									[
										219324,
										219330
									],
									[
										219382,
										219388
									],
									[
										219396,
										219402
									],
									[
										219523,
										219529
									],
									[
										219611,
										219617
									],
									[
										219808,
										219814
									],
									[
										219826,
										219832
									],
									[
										219903,
										219909
									],
									[
										219922,
										219928
									],
									[
										219965,
										219971
									],
									[
										220155,
										220161
									],
									[
										220281,
										220287
									],
									[
										220293,
										220299
									],
									[
										220327,
										220333
									],
									[
										220358,
										220364
									],
									[
										220472,
										220478
									],
									[
										220643,
										220649
									],
									[
										220674,
										220680
									],
									[
										220724,
										220730
									],
									[
										220850,
										220856
									],
									[
										221004,
										221010
									],
									[
										221243,
										221249
									],
									[
										221349,
										221355
									],
									[
										221525,
										221531
									],
									[
										221678,
										221684
									],
									[
										221764,
										221770
									],
									[
										221794,
										221800
									],
									[
										221946,
										221952
									],
									[
										221959,
										221965
									],
									[
										222012,
										222018
									],
									[
										222237,
										222243
									],
									[
										222250,
										222256
									],
									[
										222400,
										222406
									],
									[
										222433,
										222439
									],
									[
										222446,
										222452
									],
									[
										222494,
										222500
									],
									[
										222542,
										222548
									],
									[
										222611,
										222617
									],
									[
										222633,
										222639
									],
									[
										222677,
										222683
									],
									[
										222719,
										222725
									],
									[
										222853,
										222859
									],
									[
										223044,
										223050
									],
									[
										223237,
										223243
									],
									[
										223334,
										223340
									],
									[
										223418,
										223424
									],
									[
										223455,
										223461
									],
									[
										223647,
										223653
									],
									[
										223772,
										223778
									],
									[
										223974,
										223980
									],
									[
										224195,
										224201
									],
									[
										224217,
										224223
									],
									[
										224364,
										224370
									],
									[
										224562,
										224568
									],
									[
										224808,
										224814
									],
									[
										225092,
										225098
									],
									[
										225216,
										225222
									],
									[
										225301,
										225307
									],
									[
										225435,
										225441
									],
									[
										225462,
										225468
									],
									[
										225548,
										225554
									],
									[
										225691,
										225697
									],
									[
										225713,
										225719
									],
									[
										225738,
										225744
									],
									[
										225797,
										225803
									],
									[
										225915,
										225921
									],
									[
										225933,
										225939
									],
									[
										225972,
										225978
									],
									[
										226111,
										226117
									],
									[
										226136,
										226142
									],
									[
										226183,
										226189
									],
									[
										226313,
										226319
									],
									[
										226503,
										226509
									],
									[
										226725,
										226731
									],
									[
										226763,
										226769
									],
									[
										226796,
										226802
									],
									[
										226862,
										226868
									],
									[
										226980,
										226986
									],
									[
										226998,
										227004
									],
									[
										227037,
										227043
									],
									[
										227232,
										227238
									],
									[
										227339,
										227345
									],
									[
										227372,
										227378
									],
									[
										227420,
										227426
									],
									[
										227639,
										227645
									],
									[
										227866,
										227872
									],
									[
										227990,
										227996
									],
									[
										228075,
										228081
									],
									[
										228209,
										228215
									],
									[
										228236,
										228242
									],
									[
										228322,
										228328
									],
									[
										228465,
										228471
									],
									[
										228487,
										228493
									],
									[
										228512,
										228518
									],
									[
										228571,
										228577
									],
									[
										228689,
										228695
									],
									[
										228707,
										228713
									],
									[
										228746,
										228752
									],
									[
										228885,
										228891
									],
									[
										228910,
										228916
									],
									[
										228957,
										228963
									],
									[
										229087,
										229093
									],
									[
										229277,
										229283
									],
									[
										229499,
										229505
									],
									[
										229537,
										229543
									],
									[
										229570,
										229576
									],
									[
										229636,
										229642
									],
									[
										229754,
										229760
									],
									[
										229772,
										229778
									],
									[
										229811,
										229817
									],
									[
										230006,
										230012
									],
									[
										230113,
										230119
									],
									[
										230146,
										230152
									],
									[
										230194,
										230200
									],
									[
										230423,
										230429
									],
									[
										230683,
										230689
									],
									[
										231064,
										231070
									],
									[
										231352,
										231358
									],
									[
										231594,
										231600
									],
									[
										231760,
										231766
									],
									[
										231904,
										231910
									],
									[
										232045,
										232051
									],
									[
										232194,
										232200
									],
									[
										232332,
										232338
									],
									[
										232598,
										232604
									],
									[
										232851,
										232857
									],
									[
										233009,
										233015
									],
									[
										233226,
										233232
									],
									[
										233609,
										233615
									],
									[
										233807,
										233813
									],
									[
										234017,
										234023
									],
									[
										234083,
										234089
									],
									[
										234119,
										234125
									],
									[
										234377,
										234383
									],
									[
										234591,
										234597
									],
									[
										234907,
										234913
									],
									[
										235327,
										235333
									],
									[
										235497,
										235503
									],
									[
										235525,
										235531
									],
									[
										235532,
										235538
									],
									[
										235612,
										235618
									],
									[
										235748,
										235754
									],
									[
										235757,
										235763
									],
									[
										236009,
										236015
									],
									[
										236303,
										236309
									],
									[
										236322,
										236328
									],
									[
										236411,
										236417
									],
									[
										236430,
										236436
									],
									[
										236527,
										236533
									],
									[
										236623,
										236629
									],
									[
										236665,
										236671
									],
									[
										236691,
										236697
									],
									[
										236773,
										236779
									],
									[
										236837,
										236843
									],
									[
										236923,
										236929
									],
									[
										236975,
										236981
									],
									[
										237138,
										237144
									],
									[
										237178,
										237184
									],
									[
										237276,
										237282
									],
									[
										237330,
										237336
									],
									[
										237386,
										237392
									],
									[
										237498,
										237504
									],
									[
										237627,
										237633
									],
									[
										237656,
										237662
									],
									[
										237764,
										237770
									],
									[
										237925,
										237931
									],
									[
										238083,
										238089
									],
									[
										238259,
										238265
									],
									[
										238445,
										238451
									],
									[
										238616,
										238622
									],
									[
										238693,
										238699
									],
									[
										238898,
										238904
									],
									[
										239012,
										239018
									],
									[
										239087,
										239093
									],
									[
										239360,
										239366
									],
									[
										239563,
										239569
									],
									[
										242788,
										242794
									],
									[
										243096,
										243102
									],
									[
										243291,
										243297
									],
									[
										243348,
										243354
									],
									[
										243588,
										243594
									],
									[
										243773,
										243779
									],
									[
										244177,
										244183
									],
									[
										244647,
										244653
									],
									[
										245133,
										245139
									],
									[
										245415,
										245421
									],
									[
										245657,
										245663
									],
									[
										245726,
										245732
									],
									[
										245805,
										245811
									],
									[
										246039,
										246045
									],
									[
										246372,
										246378
									],
									[
										246601,
										246607
									],
									[
										246722,
										246728
									],
									[
										246863,
										246869
									],
									[
										247175,
										247181
									],
									[
										247219,
										247225
									],
									[
										247366,
										247372
									],
									[
										247396,
										247402
									],
									[
										247463,
										247469
									],
									[
										247590,
										247596
									],
									[
										247751,
										247757
									],
									[
										247978,
										247984
									],
									[
										248278,
										248284
									],
									[
										248300,
										248306
									],
									[
										248332,
										248338
									],
									[
										248410,
										248416
									],
									[
										248647,
										248653
									],
									[
										248855,
										248861
									],
									[
										248872,
										248878
									],
									[
										249015,
										249021
									],
									[
										249024,
										249030
									],
									[
										249147,
										249153
									],
									[
										249265,
										249271
									],
									[
										249283,
										249289
									],
									[
										249427,
										249433
									],
									[
										249660,
										249666
									],
									[
										249786,
										249792
									],
									[
										249815,
										249821
									],
									[
										249980,
										249986
									],
									[
										250024,
										250030
									],
									[
										250047,
										250053
									],
									[
										250165,
										250171
									],
									[
										250182,
										250188
									],
									[
										250451,
										250457
									],
									[
										250473,
										250479
									],
									[
										250505,
										250511
									],
									[
										250583,
										250589
									],
									[
										250905,
										250911
									],
									[
										251199,
										251205
									],
									[
										251421,
										251427
									],
									[
										251628,
										251634
									],
									[
										251655,
										251661
									],
									[
										251842,
										251848
									],
									[
										251867,
										251873
									],
									[
										252005,
										252011
									],
									[
										252090,
										252096
									],
									[
										252317,
										252323
									],
									[
										252422,
										252428
									],
									[
										252541,
										252547
									],
									[
										252611,
										252617
									],
									[
										252725,
										252731
									],
									[
										252738,
										252744
									],
									[
										252778,
										252784
									],
									[
										252873,
										252879
									],
									[
										252926,
										252932
									],
									[
										252973,
										252979
									],
									[
										253028,
										253034
									],
									[
										253119,
										253125
									],
									[
										253171,
										253177
									],
									[
										253307,
										253313
									],
									[
										253457,
										253463
									],
									[
										253488,
										253494
									],
									[
										253572,
										253578
									],
									[
										253610,
										253616
									],
									[
										253692,
										253698
									],
									[
										253768,
										253774
									],
									[
										253901,
										253907
									],
									[
										253992,
										253998
									],
									[
										254038,
										254044
									],
									[
										254103,
										254109
									],
									[
										254145,
										254151
									],
									[
										254218,
										254224
									],
									[
										254258,
										254264
									],
									[
										254328,
										254334
									],
									[
										254377,
										254383
									],
									[
										254435,
										254441
									],
									[
										254484,
										254490
									],
									[
										254568,
										254574
									],
									[
										254651,
										254657
									],
									[
										254660,
										254666
									],
									[
										254752,
										254758
									],
									[
										254895,
										254901
									],
									[
										254921,
										254927
									],
									[
										255125,
										255131
									],
									[
										255137,
										255143
									],
									[
										255165,
										255171
									],
									[
										255191,
										255197
									],
									[
										255232,
										255238
									],
									[
										255492,
										255498
									],
									[
										255598,
										255604
									],
									[
										255618,
										255624
									],
									[
										255743,
										255749
									],
									[
										255884,
										255890
									],
									[
										255948,
										255954
									],
									[
										256044,
										256050
									],
									[
										256109,
										256115
									],
									[
										256276,
										256282
									],
									[
										256495,
										256501
									],
									[
										256812,
										256818
									],
									[
										256939,
										256945
									],
									[
										257057,
										257063
									],
									[
										257088,
										257094
									],
									[
										257379,
										257385
									],
									[
										257622,
										257628
									],
									[
										257896,
										257902
									],
									[
										258030,
										258036
									],
									[
										258350,
										258356
									],
									[
										258655,
										258661
									],
									[
										258849,
										258855
									],
									[
										258873,
										258879
									],
									[
										258945,
										258951
									],
									[
										258980,
										258986
									],
									[
										259133,
										259139
									],
									[
										259185,
										259191
									],
									[
										259239,
										259245
									],
									[
										259293,
										259299
									],
									[
										259396,
										259402
									],
									[
										259425,
										259431
									],
									[
										259502,
										259508
									],
									[
										259542,
										259548
									],
									[
										259679,
										259685
									],
									[
										259735,
										259741
									],
									[
										259872,
										259878
									],
									[
										259898,
										259904
									],
									[
										259972,
										259978
									],
									[
										260009,
										260015
									],
									[
										260168,
										260174
									],
									[
										260186,
										260192
									],
									[
										260343,
										260349
									],
									[
										260432,
										260438
									],
									[
										260500,
										260506
									],
									[
										260617,
										260623
									],
									[
										260746,
										260752
									],
									[
										260990,
										260996
									],
									[
										261017,
										261023
									],
									[
										261092,
										261098
									],
									[
										261130,
										261136
									],
									[
										261261,
										261267
									],
									[
										261311,
										261317
									],
									[
										261446,
										261452
									],
									[
										261472,
										261478
									],
									[
										261546,
										261552
									],
									[
										261583,
										261589
									],
									[
										261743,
										261749
									],
									[
										261761,
										261767
									],
									[
										261812,
										261818
									],
									[
										261880,
										261886
									],
									[
										262123,
										262129
									],
									[
										262214,
										262220
									],
									[
										262386,
										262392
									],
									[
										262424,
										262430
									],
									[
										262510,
										262516
									],
									[
										262559,
										262565
									],
									[
										262707,
										262713
									],
									[
										262725,
										262731
									],
									[
										262747,
										262753
									],
									[
										262846,
										262852
									],
									[
										262901,
										262907
									],
									[
										262941,
										262947
									],
									[
										263029,
										263035
									],
									[
										263080,
										263086
									],
									[
										263224,
										263230
									],
									[
										263273,
										263279
									],
									[
										263355,
										263361
									],
									[
										263420,
										263426
									],
									[
										263485,
										263491
									],
									[
										263529,
										263535
									],
									[
										263621,
										263627
									],
									[
										263676,
										263682
									],
									[
										263851,
										263857
									],
									[
										263903,
										263909
									],
									[
										263965,
										263971
									],
									[
										264027,
										264033
									],
									[
										264175,
										264181
									],
									[
										264217,
										264223
									],
									[
										264332,
										264338
									],
									[
										264500,
										264506
									],
									[
										264653,
										264659
									],
									[
										264671,
										264677
									],
									[
										264834,
										264840
									],
									[
										264841,
										264847
									],
									[
										264902,
										264908
									],
									[
										264909,
										264915
									],
									[
										265069,
										265075
									],
									[
										265076,
										265082
									],
									[
										265137,
										265143
									],
									[
										265144,
										265150
									],
									[
										265339,
										265345
									],
									[
										265388,
										265394
									],
									[
										265485,
										265491
									],
									[
										265545,
										265551
									],
									[
										265704,
										265710
									],
									[
										265722,
										265728
									],
									[
										265731,
										265737
									],
									[
										265751,
										265757
									],
									[
										265778,
										265784
									],
									[
										265869,
										265875
									],
									[
										265916,
										265922
									],
									[
										265956,
										265962
									],
									[
										266044,
										266050
									],
									[
										266095,
										266101
									],
									[
										266255,
										266261
									],
									[
										266273,
										266279
									],
									[
										266295,
										266301
									],
									[
										266445,
										266451
									],
									[
										266485,
										266491
									],
									[
										266573,
										266579
									],
									[
										266624,
										266630
									],
									[
										266807,
										266813
									],
									[
										266994,
										267000
									],
									[
										267036,
										267042
									],
									[
										267126,
										267132
									],
									[
										267179,
										267185
									],
									[
										267351,
										267357
									],
									[
										267490,
										267496
									],
									[
										267546,
										267552
									],
									[
										267590,
										267596
									],
									[
										267682,
										267688
									],
									[
										267737,
										267743
									],
									[
										267911,
										267917
									],
									[
										268120,
										268126
									],
									[
										268173,
										268179
									],
									[
										268274,
										268280
									],
									[
										268338,
										268344
									],
									[
										268573,
										268579
									],
									[
										268790,
										268796
									],
									[
										268839,
										268845
									],
									[
										268936,
										268942
									],
									[
										268996,
										269002
									],
									[
										269127,
										269133
									],
									[
										269168,
										269174
									],
									[
										269253,
										269259
									],
									[
										269427,
										269433
									],
									[
										269474,
										269480
									],
									[
										269569,
										269575
									],
									[
										269627,
										269633
									],
									[
										269866,
										269872
									],
									[
										269884,
										269890
									],
									[
										269906,
										269912
									],
									[
										269972,
										269978
									],
									[
										270179,
										270185
									],
									[
										270215,
										270221
									],
									[
										270299,
										270305
									],
									[
										270346,
										270352
									],
									[
										270492,
										270498
									],
									[
										270510,
										270516
									],
									[
										270532,
										270538
									],
									[
										270683,
										270689
									],
									[
										270719,
										270725
									],
									[
										270803,
										270809
									],
									[
										270850,
										270856
									],
									[
										270982,
										270988
									],
									[
										271037,
										271043
									],
									[
										271178,
										271184
									],
									[
										271222,
										271228
									],
									[
										271314,
										271320
									],
									[
										271369,
										271375
									],
									[
										271509,
										271515
									],
									[
										271564,
										271570
									],
									[
										271705,
										271711
									],
									[
										271747,
										271753
									],
									[
										271837,
										271843
									],
									[
										271890,
										271896
									],
									[
										272055,
										272061
									],
									[
										272073,
										272079
									],
									[
										272095,
										272101
									],
									[
										272199,
										272205
									],
									[
										272255,
										272261
									],
									[
										272288,
										272294
									],
									[
										272394,
										272400
									],
									[
										272540,
										272546
									],
									[
										272672,
										272678
									],
									[
										272788,
										272794
									],
									[
										272806,
										272812
									],
									[
										272859,
										272865
									],
									[
										272919,
										272925
									],
									[
										273065,
										273071
									],
									[
										273119,
										273125
									],
									[
										273246,
										273252
									],
									[
										273390,
										273396
									],
									[
										273437,
										273443
									],
									[
										273532,
										273538
									],
									[
										273590,
										273596
									],
									[
										273755,
										273761
									],
									[
										273939,
										273945
									],
									[
										273977,
										273983
									],
									[
										274063,
										274069
									],
									[
										274112,
										274118
									],
									[
										274253,
										274259
									],
									[
										274305,
										274311
									],
									[
										274367,
										274373
									],
									[
										274429,
										274435
									],
									[
										274570,
										274576
									],
									[
										274620,
										274626
									],
									[
										274718,
										274724
									],
									[
										274779,
										274785
									],
									[
										274939,
										274945
									],
									[
										274957,
										274963
									],
									[
										274979,
										274985
									],
									[
										275128,
										275134
									],
									[
										275183,
										275189
									],
									[
										275286,
										275292
									],
									[
										275352,
										275358
									],
									[
										275548,
										275554
									],
									[
										275566,
										275572
									],
									[
										275588,
										275594
									],
									[
										275703,
										275709
									],
									[
										275738,
										275744
									],
									[
										275821,
										275827
									],
									[
										275867,
										275873
									],
									[
										276025,
										276031
									],
									[
										276043,
										276049
									],
									[
										276065,
										276071
									],
									[
										276116,
										276122
									],
									[
										276156,
										276162
									],
									[
										276250,
										276256
									],
									[
										276296,
										276302
									],
									[
										276390,
										276396
									],
									[
										276447,
										276453
									],
									[
										276623,
										276629
									],
									[
										276799,
										276805
									],
									[
										276858,
										276864
									],
									[
										276965,
										276971
									],
									[
										277035,
										277041
									],
									[
										277225,
										277231
									],
									[
										277371,
										277377
									],
									[
										277420,
										277426
									],
									[
										277517,
										277523
									],
									[
										277577,
										277583
									],
									[
										277760,
										277766
									],
									[
										277832,
										277838
									],
									[
										277967,
										277973
									],
									[
										278019,
										278025
									],
									[
										278119,
										278125
									],
									[
										278182,
										278188
									],
									[
										278344,
										278350
									],
									[
										278362,
										278368
									],
									[
										278384,
										278390
									],
									[
										278435,
										278441
									],
									[
										278530,
										278536
									],
									[
										278583,
										278589
									],
									[
										278684,
										278690
									],
									[
										278748,
										278754
									],
									[
										278935,
										278941
									],
									[
										278997,
										279003
									],
									[
										279119,
										279125
									],
									[
										279169,
										279175
									],
									[
										279267,
										279273
									],
									[
										279328,
										279334
									],
									[
										279509,
										279515
									],
									[
										279571,
										279577
									],
									[
										279663,
										279669
									],
									[
										279719,
										279725
									],
									[
										279763,
										279769
									],
									[
										279855,
										279861
									],
									[
										279910,
										279916
									],
									[
										280085,
										280091
									],
									[
										280137,
										280143
									],
									[
										280199,
										280205
									],
									[
										280261,
										280267
									],
									[
										280420,
										280426
									],
									[
										280463,
										280469
									],
									[
										280554,
										280560
									],
									[
										280608,
										280614
									],
									[
										280778,
										280784
									],
									[
										280833,
										280839
									],
									[
										280970,
										280976
									],
									[
										281010,
										281016
									],
									[
										281098,
										281104
									],
									[
										281149,
										281155
									],
									[
										281326,
										281332
									],
									[
										281382,
										281388
									],
									[
										281615,
										281621
									],
									[
										281658,
										281664
									],
									[
										281749,
										281755
									],
									[
										281803,
										281809
									],
									[
										281959,
										281965
									],
									[
										281977,
										281983
									],
									[
										281999,
										282005
									],
									[
										282149,
										282155
									],
									[
										282191,
										282197
									],
									[
										282281,
										282287
									],
									[
										282334,
										282340
									],
									[
										282489,
										282495
									],
									[
										282507,
										282513
									],
									[
										282529,
										282535
									],
									[
										282653,
										282659
									],
									[
										282692,
										282698
									],
									[
										282779,
										282785
									],
									[
										282829,
										282835
									],
									[
										283005,
										283011
									],
									[
										283050,
										283056
									],
									[
										283241,
										283247
									],
									[
										283287,
										283293
									],
									[
										283381,
										283387
									],
									[
										283438,
										283444
									],
									[
										283594,
										283600
									],
									[
										283612,
										283618
									],
									[
										283634,
										283640
									],
									[
										283685,
										283691
									],
									[
										283725,
										283731
									],
									[
										283938,
										283944
									],
									[
										284002,
										284008
									],
									[
										284036,
										284042
									],
									[
										284242,
										284248
									],
									[
										284320,
										284326
									],
									[
										284502,
										284508
									],
									[
										284586,
										284592
									],
									[
										284621,
										284627
									],
									[
										284729,
										284735
									],
									[
										284950,
										284956
									],
									[
										284968,
										284974
									],
									[
										285086,
										285092
									],
									[
										285104,
										285110
									],
									[
										285368,
										285374
									],
									[
										285592,
										285598
									],
									[
										285629,
										285635
									],
									[
										285647,
										285653
									],
									[
										285734,
										285740
									],
									[
										285796,
										285802
									],
									[
										285859,
										285865
									],
									[
										285927,
										285933
									],
									[
										286118,
										286124
									],
									[
										286153,
										286159
									],
									[
										286230,
										286236
									],
									[
										286306,
										286312
									],
									[
										286363,
										286369
									],
									[
										286424,
										286430
									],
									[
										286480,
										286486
									],
									[
										286493,
										286499
									],
									[
										286581,
										286587
									],
									[
										286692,
										286698
									],
									[
										286724,
										286730
									],
									[
										286780,
										286786
									],
									[
										286859,
										286865
									],
									[
										286977,
										286983
									],
									[
										287091,
										287097
									],
									[
										287195,
										287201
									],
									[
										287469,
										287475
									],
									[
										287696,
										287702
									],
									[
										287908,
										287914
									],
									[
										288165,
										288171
									],
									[
										288182,
										288188
									],
									[
										288450,
										288456
									],
									[
										288503,
										288509
									],
									[
										288808,
										288814
									],
									[
										288876,
										288882
									],
									[
										289021,
										289027
									],
									[
										289273,
										289279
									],
									[
										289291,
										289297
									],
									[
										289447,
										289453
									],
									[
										289559,
										289565
									],
									[
										289615,
										289621
									],
									[
										289659,
										289665
									],
									[
										289759,
										289765
									],
									[
										289945,
										289951
									],
									[
										290141,
										290147
									],
									[
										290262,
										290268
									],
									[
										290355,
										290361
									],
									[
										290477,
										290483
									],
									[
										290643,
										290649
									],
									[
										290805,
										290811
									],
									[
										290845,
										290851
									],
									[
										290958,
										290964
									],
									[
										291007,
										291013
									],
									[
										291259,
										291265
									],
									[
										291302,
										291308
									],
									[
										291465,
										291471
									],
									[
										291524,
										291530
									],
									[
										291748,
										291754
									],
									[
										291782,
										291788
									],
									[
										292160,
										292166
									],
									[
										292348,
										292354
									],
									[
										292555,
										292561
									],
									[
										292756,
										292762
									],
									[
										292787,
										292793
									],
									[
										292991,
										292997
									],
									[
										293060,
										293066
									],
									[
										293127,
										293133
									],
									[
										293179,
										293185
									],
									[
										293218,
										293224
									],
									[
										293417,
										293423
									],
									[
										293575,
										293581
									],
									[
										293665,
										293671
									],
									[
										293890,
										293896
									],
									[
										294187,
										294193
									],
									[
										294455,
										294461
									],
									[
										294720,
										294726
									],
									[
										294886,
										294892
									],
									[
										295045,
										295051
									],
									[
										295128,
										295134
									],
									[
										295194,
										295200
									],
									[
										295231,
										295237
									],
									[
										295297,
										295303
									],
									[
										295375,
										295381
									],
									[
										295406,
										295412
									],
									[
										295539,
										295545
									],
									[
										295664,
										295670
									],
									[
										295742,
										295748
									],
									[
										295855,
										295861
									],
									[
										295979,
										295985
									],
									[
										296126,
										296132
									],
									[
										296296,
										296302
									],
									[
										296466,
										296472
									],
									[
										296507,
										296513
									],
									[
										296634,
										296640
									],
									[
										296655,
										296661
									],
									[
										296837,
										296843
									],
									[
										296993,
										296999
									],
									[
										297142,
										297148
									],
									[
										297235,
										297241
									],
									[
										297266,
										297272
									],
									[
										297509,
										297515
									],
									[
										297682,
										297688
									],
									[
										297722,
										297728
									],
									[
										297965,
										297971
									],
									[
										297995,
										298001
									],
									[
										298336,
										298342
									],
									[
										298536,
										298542
									],
									[
										298602,
										298608
									],
									[
										298912,
										298918
									],
									[
										299328,
										299334
									],
									[
										299601,
										299607
									],
									[
										299713,
										299719
									],
									[
										299808,
										299814
									],
									[
										299901,
										299907
									],
									[
										299939,
										299945
									],
									[
										300055,
										300061
									],
									[
										300229,
										300235
									],
									[
										300318,
										300324
									],
									[
										300445,
										300451
									],
									[
										300604,
										300610
									],
									[
										300814,
										300820
									],
									[
										300878,
										300884
									],
									[
										300952,
										300958
									],
									[
										301001,
										301007
									],
									[
										301173,
										301179
									],
									[
										301214,
										301220
									],
									[
										301378,
										301384
									],
									[
										301663,
										301669
									],
									[
										301843,
										301849
									],
									[
										301861,
										301867
									],
									[
										301910,
										301916
									],
									[
										302037,
										302043
									],
									[
										302081,
										302087
									],
									[
										302242,
										302248
									],
									[
										302286,
										302292
									],
									[
										302404,
										302410
									],
									[
										302654,
										302660
									],
									[
										302901,
										302907
									],
									[
										303080,
										303086
									],
									[
										303215,
										303221
									],
									[
										303363,
										303369
									],
									[
										303444,
										303450
									],
									[
										303642,
										303648
									],
									[
										303798,
										303804
									],
									[
										304049,
										304055
									],
									[
										304259,
										304265
									],
									[
										304473,
										304479
									],
									[
										304740,
										304746
									],
									[
										304971,
										304977
									],
									[
										305090,
										305096
									],
									[
										305267,
										305273
									],
									[
										305330,
										305336
									],
									[
										305452,
										305458
									],
									[
										305577,
										305583
									],
									[
										305629,
										305635
									],
									[
										305719,
										305725
									],
									[
										305754,
										305760
									],
									[
										305897,
										305903
									],
									[
										306054,
										306060
									],
									[
										306217,
										306223
									],
									[
										306346,
										306352
									],
									[
										306437,
										306443
									],
									[
										306535,
										306541
									],
									[
										306614,
										306620
									],
									[
										306694,
										306700
									],
									[
										306901,
										306907
									],
									[
										307019,
										307025
									],
									[
										307173,
										307179
									],
									[
										307251,
										307257
									],
									[
										307475,
										307481
									],
									[
										307725,
										307731
									],
									[
										307895,
										307901
									],
									[
										308033,
										308039
									],
									[
										308133,
										308139
									],
									[
										308215,
										308221
									],
									[
										308263,
										308269
									],
									[
										308363,
										308369
									],
									[
										308428,
										308434
									],
									[
										308492,
										308498
									],
									[
										308586,
										308592
									],
									[
										308658,
										308664
									],
									[
										308788,
										308794
									],
									[
										309095,
										309101
									],
									[
										309108,
										309114
									],
									[
										309216,
										309222
									],
									[
										309282,
										309288
									],
									[
										309317,
										309323
									],
									[
										309371,
										309377
									],
									[
										309428,
										309434
									],
									[
										309482,
										309488
									],
									[
										309538,
										309544
									],
									[
										309589,
										309595
									],
									[
										309687,
										309693
									],
									[
										309748,
										309754
									],
									[
										309823,
										309829
									],
									[
										309883,
										309889
									],
									[
										309975,
										309981
									],
									[
										310241,
										310247
									],
									[
										310472,
										310478
									],
									[
										310596,
										310602
									],
									[
										310765,
										310771
									],
									[
										310884,
										310890
									],
									[
										310987,
										310993
									],
									[
										311039,
										311045
									],
									[
										311195,
										311201
									],
									[
										311212,
										311218
									],
									[
										311269,
										311275
									],
									[
										311497,
										311503
									],
									[
										311514,
										311520
									],
									[
										311649,
										311655
									],
									[
										311830,
										311836
									],
									[
										311912,
										311918
									],
									[
										311976,
										311982
									],
									[
										312001,
										312007
									],
									[
										312044,
										312050
									],
									[
										312184,
										312190
									],
									[
										312448,
										312454
									],
									[
										312743,
										312749
									],
									[
										312946,
										312952
									],
									[
										313320,
										313326
									],
									[
										313608,
										313614
									],
									[
										313866,
										313872
									],
									[
										314032,
										314038
									],
									[
										314176,
										314182
									],
									[
										314317,
										314323
									],
									[
										314466,
										314472
									],
									[
										314604,
										314610
									],
									[
										314886,
										314892
									],
									[
										315084,
										315090
									],
									[
										315106,
										315112
									],
									[
										315132,
										315138
									],
									[
										315210,
										315216
									],
									[
										315399,
										315405
									],
									[
										315523,
										315529
									],
									[
										315608,
										315614
									],
									[
										315742,
										315748
									],
									[
										315769,
										315775
									],
									[
										315855,
										315861
									],
									[
										315998,
										316004
									],
									[
										316020,
										316026
									],
									[
										316045,
										316051
									],
									[
										316104,
										316110
									],
									[
										316222,
										316228
									],
									[
										316240,
										316246
									],
									[
										316279,
										316285
									],
									[
										316418,
										316424
									],
									[
										316443,
										316449
									],
									[
										316490,
										316496
									],
									[
										316620,
										316626
									],
									[
										316810,
										316816
									],
									[
										317032,
										317038
									],
									[
										317070,
										317076
									],
									[
										317103,
										317109
									],
									[
										317169,
										317175
									],
									[
										317287,
										317293
									],
									[
										317305,
										317311
									],
									[
										317344,
										317350
									],
									[
										317539,
										317545
									],
									[
										317646,
										317652
									],
									[
										317679,
										317685
									],
									[
										317727,
										317733
									],
									[
										317898,
										317904
									],
									[
										318161,
										318167
									],
									[
										318351,
										318357
									],
									[
										318580,
										318586
									],
									[
										318824,
										318830
									],
									[
										318842,
										318848
									],
									[
										318970,
										318976
									],
									[
										319129,
										319135
									],
									[
										319245,
										319251
									],
									[
										319329,
										319335
									],
									[
										319446,
										319452
									],
									[
										319585,
										319591
									],
									[
										319634,
										319640
									],
									[
										319663,
										319669
									],
									[
										319770,
										319776
									],
									[
										319830,
										319836
									],
									[
										320026,
										320032
									],
									[
										320086,
										320092
									],
									[
										320302,
										320308
									],
									[
										320362,
										320368
									],
									[
										320592,
										320598
									],
									[
										320652,
										320658
									],
									[
										320793,
										320799
									],
									[
										320840,
										320846
									],
									[
										320926,
										320932
									],
									[
										320973,
										320979
									],
									[
										321120,
										321126
									],
									[
										321180,
										321186
									],
									[
										321356,
										321362
									],
									[
										321515,
										321521
									],
									[
										321665,
										321671
									],
									[
										321852,
										321858
									],
									[
										322034,
										322040
									],
									[
										322174,
										322180
									],
									[
										322392,
										322398
									],
									[
										322589,
										322595
									],
									[
										322805,
										322811
									],
									[
										322950,
										322956
									],
									[
										323104,
										323110
									],
									[
										323303,
										323309
									],
									[
										323334,
										323340
									],
									[
										323398,
										323404
									],
									[
										323528,
										323534
									],
									[
										323722,
										323728
									],
									[
										323814,
										323820
									],
									[
										323963,
										323969
									],
									[
										324100,
										324106
									],
									[
										324208,
										324214
									],
									[
										324225,
										324231
									],
									[
										324385,
										324391
									],
									[
										324407,
										324413
									],
									[
										324450,
										324456
									],
									[
										324459,
										324465
									],
									[
										324477,
										324483
									],
									[
										324646,
										324652
									],
									[
										324723,
										324729
									],
									[
										324868,
										324874
									],
									[
										324922,
										324928
									],
									[
										324998,
										325004
									],
									[
										325111,
										325117
									],
									[
										325268,
										325274
									],
									[
										325519,
										325525
									],
									[
										325848,
										325854
									],
									[
										326164,
										326170
									],
									[
										326402,
										326408
									],
									[
										326674,
										326680
									],
									[
										326687,
										326693
									],
									[
										326711,
										326717
									],
									[
										326737,
										326743
									],
									[
										326905,
										326911
									],
									[
										326932,
										326938
									],
									[
										326950,
										326956
									],
									[
										326968,
										326974
									],
									[
										327026,
										327032
									],
									[
										327049,
										327055
									],
									[
										327071,
										327077
									],
									[
										327110,
										327116
									],
									[
										327117,
										327123
									],
									[
										327159,
										327165
									],
									[
										327177,
										327183
									],
									[
										327206,
										327212
									],
									[
										327252,
										327258
									],
									[
										327296,
										327302
									],
									[
										327348,
										327354
									],
									[
										327399,
										327405
									],
									[
										327406,
										327412
									],
									[
										327425,
										327431
									],
									[
										327470,
										327476
									],
									[
										327555,
										327561
									],
									[
										327621,
										327627
									],
									[
										327825,
										327831
									],
									[
										327991,
										327997
									],
									[
										328108,
										328114
									],
									[
										328129,
										328135
									],
									[
										328310,
										328316
									],
									[
										328392,
										328398
									],
									[
										328687,
										328693
									],
									[
										328772,
										328778
									],
									[
										328794,
										328800
									],
									[
										328832,
										328838
									],
									[
										329044,
										329050
									],
									[
										329127,
										329133
									],
									[
										329206,
										329212
									],
									[
										329292,
										329298
									],
									[
										329372,
										329378
									],
									[
										329462,
										329468
									],
									[
										329547,
										329553
									],
									[
										329631,
										329637
									],
									[
										330337,
										330343
									],
									[
										330918,
										330924
									],
									[
										331098,
										331104
									],
									[
										332531,
										332537
									],
									[
										332883,
										332889
									],
									[
										333061,
										333067
									],
									[
										333411,
										333417
									],
									[
										333716,
										333722
									],
									[
										333778,
										333784
									],
									[
										334023,
										334029
									],
									[
										334346,
										334352
									],
									[
										334590,
										334596
									],
									[
										334875,
										334881
									],
									[
										335141,
										335147
									],
									[
										335400,
										335406
									],
									[
										335640,
										335646
									],
									[
										335966,
										335972
									],
									[
										336076,
										336082
									],
									[
										336259,
										336265
									],
									[
										336320,
										336326
									],
									[
										336378,
										336384
									],
									[
										336392,
										336398
									],
									[
										336519,
										336525
									],
									[
										336607,
										336613
									],
									[
										336883,
										336889
									],
									[
										336905,
										336911
									],
									[
										336937,
										336943
									],
									[
										337015,
										337021
									],
									[
										337195,
										337201
									],
									[
										337218,
										337224
									],
									[
										337294,
										337300
									],
									[
										337305,
										337311
									],
									[
										337498,
										337504
									],
									[
										337659,
										337665
									],
									[
										337946,
										337952
									],
									[
										338156,
										338162
									],
									[
										338211,
										338217
									],
									[
										338467,
										338473
									],
									[
										338731,
										338737
									],
									[
										338767,
										338773
									],
									[
										338779,
										338785
									],
									[
										338908,
										338914
									],
									[
										339106,
										339112
									],
									[
										339215,
										339221
									],
									[
										339238,
										339244
									],
									[
										339284,
										339290
									],
									[
										339374,
										339380
									],
									[
										339390,
										339396
									],
									[
										339443,
										339449
									],
									[
										339466,
										339472
									],
									[
										339597,
										339603
									],
									[
										339723,
										339729
									],
									[
										340091,
										340097
									],
									[
										340105,
										340111
									],
									[
										340246,
										340252
									],
									[
										340473,
										340479
									],
									[
										340502,
										340508
									],
									[
										340676,
										340682
									],
									[
										340697,
										340703
									],
									[
										340833,
										340839
									],
									[
										340882,
										340888
									],
									[
										340900,
										340906
									],
									[
										340989,
										340995
									],
									[
										341226,
										341232
									],
									[
										341548,
										341554
									],
									[
										341722,
										341728
									],
									[
										341741,
										341747
									],
									[
										341897,
										341903
									],
									[
										342159,
										342165
									],
									[
										342202,
										342208
									],
									[
										342414,
										342420
									],
									[
										342457,
										342463
									],
									[
										342667,
										342673
									],
									[
										342710,
										342716
									],
									[
										342949,
										342955
									],
									[
										342970,
										342976
									],
									[
										342999,
										343005
									],
									[
										343211,
										343217
									],
									[
										343254,
										343260
									],
									[
										343492,
										343498
									],
									[
										343533,
										343539
									],
									[
										343883,
										343889
									],
									[
										344107,
										344113
									],
									[
										344136,
										344142
									],
									[
										344445,
										344451
									],
									[
										344593,
										344599
									],
									[
										344844,
										344850
									],
									[
										345001,
										345007
									],
									[
										345266,
										345272
									],
									[
										345292,
										345298
									],
									[
										345710,
										345716
									],
									[
										346149,
										346155
									],
									[
										346440,
										346446
									],
									[
										346455,
										346461
									],
									[
										346473,
										346479
									],
									[
										346506,
										346512
									],
									[
										346992,
										346998
									],
									[
										347190,
										347196
									],
									[
										347401,
										347407
									],
									[
										347467,
										347473
									],
									[
										347503,
										347509
									],
									[
										347761,
										347767
									],
									[
										347975,
										347981
									],
									[
										348291,
										348297
									],
									[
										348816,
										348822
									],
									[
										349258,
										349264
									],
									[
										349428,
										349434
									],
									[
										349452,
										349458
									],
									[
										349642,
										349648
									],
									[
										349666,
										349672
									],
									[
										349830,
										349836
									],
									[
										349854,
										349860
									],
									[
										350002,
										350008
									],
									[
										350126,
										350132
									],
									[
										350235,
										350241
									],
									[
										350541,
										350547
									],
									[
										350557,
										350563
									],
									[
										350799,
										350805
									],
									[
										350816,
										350822
									],
									[
										350959,
										350965
									],
									[
										350968,
										350974
									],
									[
										351142,
										351148
									],
									[
										351282,
										351288
									],
									[
										351300,
										351306
									],
									[
										351482,
										351488
									],
									[
										351695,
										351701
									],
									[
										351963,
										351969
									],
									[
										352131,
										352137
									],
									[
										352153,
										352159
									],
									[
										352175,
										352181
									],
									[
										352225,
										352231
									],
									[
										352245,
										352251
									],
									[
										352422,
										352428
									],
									[
										352683,
										352689
									],
									[
										352912,
										352918
									],
									[
										353033,
										353039
									],
									[
										353174,
										353180
									],
									[
										353527,
										353533
									],
									[
										353811,
										353817
									],
									[
										353855,
										353861
									],
									[
										354125,
										354131
									],
									[
										354347,
										354353
									],
									[
										354597,
										354603
									],
									[
										354625,
										354631
									],
									[
										354803,
										354809
									],
									[
										354943,
										354949
									],
									[
										354961,
										354967
									],
									[
										355072,
										355078
									],
									[
										355277,
										355283
									],
									[
										355634,
										355640
									],
									[
										355652,
										355658
									],
									[
										355661,
										355667
									],
									[
										355787,
										355793
									],
									[
										355976,
										355982
									],
									[
										356165,
										356171
									],
									[
										356204,
										356210
									],
									[
										356375,
										356381
									],
									[
										356558,
										356564
									],
									[
										356695,
										356701
									],
									[
										356745,
										356751
									],
									[
										357139,
										357145
									],
									[
										357504,
										357510
									],
									[
										357813,
										357819
									],
									[
										358082,
										358088
									],
									[
										358336,
										358342
									],
									[
										358452,
										358458
									],
									[
										358625,
										358631
									],
									[
										358837,
										358843
									],
									[
										359105,
										359111
									],
									[
										359402,
										359408
									],
									[
										359657,
										359663
									],
									[
										359916,
										359922
									],
									[
										360162,
										360168
									],
									[
										360498,
										360504
									],
									[
										360608,
										360614
									],
									[
										360852,
										360858
									],
									[
										361072,
										361078
									],
									[
										361196,
										361202
									],
									[
										361281,
										361287
									],
									[
										361415,
										361421
									],
									[
										361442,
										361448
									],
									[
										361528,
										361534
									],
									[
										361671,
										361677
									],
									[
										361693,
										361699
									],
									[
										361718,
										361724
									],
									[
										361777,
										361783
									],
									[
										361895,
										361901
									],
									[
										361913,
										361919
									],
									[
										361952,
										361958
									],
									[
										362091,
										362097
									],
									[
										362116,
										362122
									],
									[
										362163,
										362169
									],
									[
										362293,
										362299
									],
									[
										362483,
										362489
									],
									[
										362705,
										362711
									],
									[
										362743,
										362749
									],
									[
										362776,
										362782
									],
									[
										362842,
										362848
									],
									[
										362960,
										362966
									],
									[
										362978,
										362984
									],
									[
										363017,
										363023
									],
									[
										363212,
										363218
									],
									[
										363319,
										363325
									],
									[
										363352,
										363358
									],
									[
										363400,
										363406
									],
									[
										363621,
										363627
									],
									[
										363866,
										363872
									],
									[
										363889,
										363895
									],
									[
										363972,
										363978
									],
									[
										364038,
										364044
									],
									[
										364249,
										364255
									],
									[
										364373,
										364379
									],
									[
										364458,
										364464
									],
									[
										364592,
										364598
									],
									[
										364619,
										364625
									],
									[
										364705,
										364711
									],
									[
										364848,
										364854
									],
									[
										364870,
										364876
									],
									[
										364895,
										364901
									],
									[
										364954,
										364960
									],
									[
										365072,
										365078
									],
									[
										365090,
										365096
									],
									[
										365129,
										365135
									],
									[
										365268,
										365274
									],
									[
										365293,
										365299
									],
									[
										365340,
										365346
									],
									[
										365470,
										365476
									],
									[
										365660,
										365666
									],
									[
										365882,
										365888
									],
									[
										365920,
										365926
									],
									[
										365953,
										365959
									],
									[
										366019,
										366025
									],
									[
										366137,
										366143
									],
									[
										366155,
										366161
									],
									[
										366194,
										366200
									],
									[
										366389,
										366395
									],
									[
										366496,
										366502
									],
									[
										366529,
										366535
									],
									[
										366577,
										366583
									],
									[
										366734,
										366740
									],
									[
										366751,
										366757
									],
									[
										366885,
										366891
									],
									[
										366894,
										366900
									],
									[
										367017,
										367023
									],
									[
										367135,
										367141
									],
									[
										367153,
										367159
									],
									[
										367297,
										367303
									],
									[
										367442,
										367448
									],
									[
										367471,
										367477
									],
									[
										367636,
										367642
									],
									[
										367680,
										367686
									],
									[
										367703,
										367709
									],
									[
										367821,
										367827
									],
									[
										367838,
										367844
									],
									[
										368056,
										368062
									],
									[
										368180,
										368186
									],
									[
										368265,
										368271
									],
									[
										368399,
										368405
									],
									[
										368426,
										368432
									],
									[
										368512,
										368518
									],
									[
										368655,
										368661
									],
									[
										368677,
										368683
									],
									[
										368702,
										368708
									],
									[
										368761,
										368767
									],
									[
										368879,
										368885
									],
									[
										368897,
										368903
									],
									[
										368936,
										368942
									],
									[
										369075,
										369081
									],
									[
										369100,
										369106
									],
									[
										369147,
										369153
									],
									[
										369277,
										369283
									],
									[
										369467,
										369473
									],
									[
										369689,
										369695
									],
									[
										369727,
										369733
									],
									[
										369760,
										369766
									],
									[
										369826,
										369832
									],
									[
										369944,
										369950
									],
									[
										369962,
										369968
									],
									[
										370001,
										370007
									],
									[
										370196,
										370202
									],
									[
										370303,
										370309
									],
									[
										370336,
										370342
									],
									[
										370384,
										370390
									],
									[
										370576,
										370582
									],
									[
										370598,
										370604
									],
									[
										370630,
										370636
									],
									[
										370708,
										370714
									],
									[
										370868,
										370874
									],
									[
										371040,
										371046
									],
									[
										371211,
										371217
									],
									[
										371270,
										371276
									],
									[
										371387,
										371393
									],
									[
										371513,
										371519
									],
									[
										371756,
										371762
									],
									[
										371989,
										371995
									],
									[
										372043,
										372049
									],
									[
										372281,
										372287
									],
									[
										372391,
										372397
									],
									[
										372448,
										372454
									],
									[
										372470,
										372476
									],
									[
										372511,
										372517
									],
									[
										372528,
										372534
									],
									[
										372567,
										372573
									],
									[
										372605,
										372611
									],
									[
										372658,
										372664
									],
									[
										372693,
										372699
									],
									[
										372822,
										372828
									],
									[
										372872,
										372878
									],
									[
										372976,
										372982
									],
									[
										373117,
										373123
									],
									[
										373229,
										373235
									],
									[
										373264,
										373270
									],
									[
										373299,
										373305
									],
									[
										373336,
										373342
									],
									[
										373474,
										373480
									],
									[
										373587,
										373593
									],
									[
										373743,
										373749
									],
									[
										373792,
										373798
									],
									[
										373839,
										373845
									],
									[
										373888,
										373894
									],
									[
										373990,
										373996
									],
									[
										374034,
										374040
									],
									[
										374104,
										374110
									],
									[
										374153,
										374159
									],
									[
										374176,
										374182
									],
									[
										374210,
										374216
									],
									[
										374237,
										374243
									],
									[
										374279,
										374285
									],
									[
										374374,
										374380
									],
									[
										374418,
										374424
									],
									[
										374565,
										374571
									],
									[
										374595,
										374601
									],
									[
										374662,
										374668
									],
									[
										374789,
										374795
									],
									[
										374950,
										374956
									],
									[
										375155,
										375161
									],
									[
										375308,
										375314
									],
									[
										375460,
										375466
									],
									[
										375599,
										375605
									],
									[
										375682,
										375688
									],
									[
										375977,
										375983
									],
									[
										376041,
										376047
									],
									[
										376124,
										376130
									],
									[
										376189,
										376195
									],
									[
										376255,
										376261
									],
									[
										376317,
										376323
									],
									[
										376475,
										376481
									],
									[
										376642,
										376648
									],
									[
										376682,
										376688
									],
									[
										376930,
										376936
									],
									[
										377188,
										377194
									],
									[
										377381,
										377387
									],
									[
										377483,
										377489
									],
									[
										377576,
										377582
									],
									[
										377623,
										377629
									],
									[
										377645,
										377651
									],
									[
										377904,
										377910
									],
									[
										378072,
										378078
									],
									[
										378384,
										378390
									],
									[
										378698,
										378704
									],
									[
										378782,
										378788
									],
									[
										379028,
										379034
									],
									[
										379102,
										379108
									],
									[
										379122,
										379128
									],
									[
										379214,
										379220
									],
									[
										379235,
										379241
									],
									[
										379283,
										379289
									],
									[
										379320,
										379326
									],
									[
										379502,
										379508
									],
									[
										379540,
										379546
									],
									[
										379599,
										379605
									],
									[
										379647,
										379653
									],
									[
										379694,
										379700
									],
									[
										379766,
										379772
									],
									[
										379897,
										379903
									],
									[
										380101,
										380107
									],
									[
										380377,
										380383
									],
									[
										380457,
										380463
									],
									[
										380780,
										380786
									],
									[
										380978,
										380984
									],
									[
										381326,
										381332
									],
									[
										381380,
										381386
									],
									[
										381598,
										381604
									],
									[
										381652,
										381658
									],
									[
										381904,
										381910
									],
									[
										382082,
										382088
									],
									[
										382249,
										382255
									],
									[
										382363,
										382369
									],
									[
										382387,
										382393
									],
									[
										382457,
										382463
									],
									[
										382561,
										382567
									],
									[
										382585,
										382591
									],
									[
										382655,
										382661
									],
									[
										382761,
										382767
									],
									[
										382859,
										382865
									],
									[
										382884,
										382890
									],
									[
										382925,
										382931
									],
									[
										382950,
										382956
									],
									[
										383002,
										383008
									],
									[
										383075,
										383081
									],
									[
										383170,
										383176
									],
									[
										383305,
										383311
									],
									[
										383410,
										383416
									],
									[
										383461,
										383467
									],
									[
										383619,
										383625
									],
									[
										383770,
										383776
									],
									[
										383918,
										383924
									],
									[
										384064,
										384070
									],
									[
										384159,
										384165
									],
									[
										384294,
										384300
									],
									[
										384399,
										384405
									],
									[
										384450,
										384456
									],
									[
										384607,
										384613
									],
									[
										384758,
										384764
									],
									[
										384906,
										384912
									],
									[
										385169,
										385175
									],
									[
										385293,
										385299
									],
									[
										385378,
										385384
									],
									[
										385512,
										385518
									],
									[
										385539,
										385545
									],
									[
										385625,
										385631
									],
									[
										385768,
										385774
									],
									[
										385790,
										385796
									],
									[
										385815,
										385821
									],
									[
										385874,
										385880
									],
									[
										385992,
										385998
									],
									[
										386010,
										386016
									],
									[
										386049,
										386055
									],
									[
										386188,
										386194
									],
									[
										386213,
										386219
									],
									[
										386260,
										386266
									],
									[
										386390,
										386396
									],
									[
										386580,
										386586
									],
									[
										386802,
										386808
									],
									[
										386840,
										386846
									],
									[
										386873,
										386879
									],
									[
										386939,
										386945
									],
									[
										387057,
										387063
									],
									[
										387075,
										387081
									],
									[
										387114,
										387120
									],
									[
										387309,
										387315
									],
									[
										387416,
										387422
									],
									[
										387449,
										387455
									],
									[
										387497,
										387503
									],
									[
										387712,
										387718
									],
									[
										388071,
										388077
									],
									[
										388359,
										388365
									],
									[
										388579,
										388585
									],
									[
										388745,
										388751
									],
									[
										388889,
										388895
									],
									[
										389030,
										389036
									],
									[
										389179,
										389185
									],
									[
										389317,
										389323
									],
									[
										389561,
										389567
									],
									[
										389788,
										389794
									],
									[
										389982,
										389988
									],
									[
										390214,
										390220
									],
									[
										390236,
										390242
									],
									[
										390364,
										390370
									],
									[
										390574,
										390580
									],
									[
										390701,
										390707
									],
									[
										390803,
										390809
									],
									[
										390947,
										390953
									],
									[
										391169,
										391175
									],
									[
										391359,
										391365
									],
									[
										391588,
										391594
									],
									[
										391837,
										391843
									],
									[
										391855,
										391861
									],
									[
										391983,
										391989
									],
									[
										392142,
										392148
									],
									[
										392258,
										392264
									],
									[
										392342,
										392348
									],
									[
										392459,
										392465
									],
									[
										392598,
										392604
									],
									[
										392647,
										392653
									],
									[
										392676,
										392682
									],
									[
										392783,
										392789
									],
									[
										392843,
										392849
									],
									[
										393039,
										393045
									],
									[
										393099,
										393105
									],
									[
										393315,
										393321
									],
									[
										393375,
										393381
									],
									[
										393605,
										393611
									],
									[
										393665,
										393671
									],
									[
										393806,
										393812
									],
									[
										393853,
										393859
									],
									[
										393939,
										393945
									],
									[
										393986,
										393992
									],
									[
										394133,
										394139
									],
									[
										394193,
										394199
									],
									[
										394369,
										394375
									],
									[
										394528,
										394534
									],
									[
										394678,
										394684
									],
									[
										394865,
										394871
									],
									[
										395047,
										395053
									],
									[
										395187,
										395193
									],
									[
										395405,
										395411
									],
									[
										395602,
										395608
									],
									[
										395818,
										395824
									],
									[
										395963,
										395969
									],
									[
										396117,
										396123
									],
									[
										396316,
										396322
									],
									[
										396347,
										396353
									],
									[
										396411,
										396417
									],
									[
										396541,
										396547
									],
									[
										396735,
										396741
									],
									[
										396827,
										396833
									],
									[
										396976,
										396982
									],
									[
										397113,
										397119
									],
									[
										397221,
										397227
									],
									[
										397238,
										397244
									],
									[
										397398,
										397404
									],
									[
										397420,
										397426
									],
									[
										397463,
										397469
									],
									[
										397472,
										397478
									],
									[
										397490,
										397496
									],
									[
										397659,
										397665
									],
									[
										397736,
										397742
									],
									[
										397881,
										397887
									],
									[
										397935,
										397941
									],
									[
										398011,
										398017
									],
									[
										398124,
										398130
									],
									[
										398281,
										398287
									],
									[
										398537,
										398543
									],
									[
										398871,
										398877
									],
									[
										399187,
										399193
									],
									[
										399425,
										399431
									],
									[
										399697,
										399703
									],
									[
										399710,
										399716
									],
									[
										399734,
										399740
									],
									[
										399760,
										399766
									],
									[
										399991,
										399997
									],
									[
										400115,
										400121
									],
									[
										400200,
										400206
									],
									[
										400334,
										400340
									],
									[
										400361,
										400367
									],
									[
										400447,
										400453
									],
									[
										400590,
										400596
									],
									[
										400612,
										400618
									],
									[
										400637,
										400643
									],
									[
										400696,
										400702
									],
									[
										400814,
										400820
									],
									[
										400832,
										400838
									],
									[
										400871,
										400877
									],
									[
										401010,
										401016
									],
									[
										401035,
										401041
									],
									[
										401082,
										401088
									],
									[
										401212,
										401218
									],
									[
										401402,
										401408
									],
									[
										401624,
										401630
									],
									[
										401662,
										401668
									],
									[
										401695,
										401701
									],
									[
										401761,
										401767
									],
									[
										401879,
										401885
									],
									[
										401897,
										401903
									],
									[
										401936,
										401942
									],
									[
										402131,
										402137
									],
									[
										402238,
										402244
									],
									[
										402271,
										402277
									],
									[
										402319,
										402325
									],
									[
										402468,
										402474
									],
									[
										402495,
										402501
									],
									[
										402513,
										402519
									],
									[
										402531,
										402537
									],
									[
										402589,
										402595
									],
									[
										402612,
										402618
									],
									[
										402634,
										402640
									],
									[
										402673,
										402679
									],
									[
										402680,
										402686
									],
									[
										402722,
										402728
									],
									[
										402740,
										402746
									],
									[
										402769,
										402775
									],
									[
										402815,
										402821
									],
									[
										402859,
										402865
									],
									[
										402911,
										402917
									],
									[
										402962,
										402968
									],
									[
										402969,
										402975
									],
									[
										402988,
										402994
									],
									[
										403033,
										403039
									],
									[
										403118,
										403124
									],
									[
										403184,
										403190
									],
									[
										403393,
										403399
									],
									[
										403559,
										403565
									],
									[
										403676,
										403682
									],
									[
										403697,
										403703
									],
									[
										403878,
										403884
									],
									[
										403960,
										403966
									],
									[
										404260,
										404266
									],
									[
										404345,
										404351
									],
									[
										404367,
										404373
									],
									[
										404405,
										404411
									],
									[
										404617,
										404623
									],
									[
										404700,
										404706
									],
									[
										404779,
										404785
									],
									[
										404865,
										404871
									],
									[
										404945,
										404951
									],
									[
										405035,
										405041
									],
									[
										405120,
										405126
									],
									[
										405204,
										405210
									],
									[
										405915,
										405921
									],
									[
										406496,
										406502
									],
									[
										406676,
										406682
									],
									[
										408114,
										408120
									],
									[
										408466,
										408472
									],
									[
										408644,
										408650
									],
									[
										408999,
										409005
									],
									[
										409304,
										409310
									],
									[
										409366,
										409372
									],
									[
										409611,
										409617
									],
									[
										409934,
										409940
									],
									[
										410183,
										410189
									],
									[
										410468,
										410474
									],
									[
										410734,
										410740
									],
									[
										410993,
										410999
									],
									[
										411233,
										411239
									],
									[
										411564,
										411570
									],
									[
										411674,
										411680
									],
									[
										411857,
										411863
									],
									[
										411918,
										411924
									],
									[
										411976,
										411982
									],
									[
										411990,
										411996
									],
									[
										412117,
										412123
									],
									[
										412205,
										412211
									],
									[
										412486,
										412492
									],
									[
										412508,
										412514
									],
									[
										412540,
										412546
									],
									[
										412618,
										412624
									],
									[
										412872,
										412878
									],
									[
										413172,
										413178
									],
									[
										413443,
										413449
									],
									[
										413715,
										413721
									],
									[
										413982,
										413988
									],
									[
										414336,
										414342
									],
									[
										414630,
										414636
									],
									[
										414770,
										414776
									],
									[
										414921,
										414927
									],
									[
										415193,
										415199
									],
									[
										415236,
										415242
									],
									[
										415641,
										415647
									],
									[
										415733,
										415739
									],
									[
										415906,
										415912
									],
									[
										415988,
										415994
									],
									[
										416194,
										416200
									],
									[
										416378,
										416384
									],
									[
										416572,
										416578
									],
									[
										416670,
										416676
									],
									[
										416687,
										416693
									],
									[
										416719,
										416725
									],
									[
										416958,
										416964
									],
									[
										417288,
										417294
									],
									[
										417459,
										417465
									],
									[
										417804,
										417810
									],
									[
										417991,
										417997
									],
									[
										418205,
										418211
									],
									[
										418488,
										418494
									],
									[
										418510,
										418516
									],
									[
										418565,
										418571
									],
									[
										418619,
										418625
									],
									[
										418802,
										418808
									],
									[
										419085,
										419091
									],
									[
										419107,
										419113
									],
									[
										419162,
										419168
									],
									[
										419211,
										419217
									],
									[
										419265,
										419271
									],
									[
										419533,
										419539
									],
									[
										419555,
										419561
									],
									[
										419610,
										419616
									],
									[
										419659,
										419665
									],
									[
										419713,
										419719
									],
									[
										419859,
										419865
									],
									[
										420097,
										420103
									],
									[
										420119,
										420125
									],
									[
										420174,
										420180
									],
									[
										420223,
										420229
									],
									[
										420277,
										420283
									],
									[
										420334,
										420340
									],
									[
										420587,
										420593
									],
									[
										420609,
										420615
									],
									[
										420664,
										420670
									],
									[
										420713,
										420719
									],
									[
										420767,
										420773
									],
									[
										420969,
										420975
									],
									[
										420991,
										420997
									],
									[
										421046,
										421052
									],
									[
										421095,
										421101
									],
									[
										421149,
										421155
									],
									[
										421351,
										421357
									],
									[
										421373,
										421379
									],
									[
										421428,
										421434
									],
									[
										421477,
										421483
									],
									[
										421531,
										421537
									],
									[
										421649,
										421655
									],
									[
										421715,
										421721
									],
									[
										421974,
										421980
									],
									[
										422240,
										422246
									],
									[
										422443,
										422449
									],
									[
										422597,
										422603
									],
									[
										422769,
										422775
									],
									[
										423036,
										423042
									],
									[
										423246,
										423252
									],
									[
										423466,
										423472
									],
									[
										423666,
										423672
									],
									[
										423866,
										423872
									],
									[
										424108,
										424114
									],
									[
										424362,
										424368
									],
									[
										424384,
										424390
									],
									[
										424439,
										424445
									],
									[
										424488,
										424494
									],
									[
										424542,
										424548
									],
									[
										424865,
										424871
									],
									[
										425149,
										425155
									],
									[
										425478,
										425484
									],
									[
										425762,
										425768
									],
									[
										426108,
										426114
									],
									[
										426392,
										426398
									],
									[
										426685,
										426691
									],
									[
										426860,
										426866
									],
									[
										426885,
										426891
									],
									[
										427050,
										427056
									],
									[
										427180,
										427186
									],
									[
										427381,
										427387
									],
									[
										427537,
										427543
									],
									[
										427658,
										427664
									],
									[
										427700,
										427706
									],
									[
										427735,
										427741
									],
									[
										427768,
										427774
									],
									[
										427832,
										427838
									],
									[
										427863,
										427869
									],
									[
										427942,
										427948
									],
									[
										427977,
										427983
									],
									[
										428252,
										428258
									],
									[
										428606,
										428612
									],
									[
										428937,
										428943
									],
									[
										429077,
										429083
									],
									[
										429228,
										429234
									],
									[
										429500,
										429506
									],
									[
										429543,
										429549
									],
									[
										429985,
										429991
									],
									[
										430077,
										430083
									],
									[
										430250,
										430256
									],
									[
										430332,
										430338
									],
									[
										430538,
										430544
									],
									[
										430722,
										430728
									],
									[
										430916,
										430922
									],
									[
										431014,
										431020
									],
									[
										431031,
										431037
									],
									[
										431063,
										431069
									],
									[
										431302,
										431308
									],
									[
										431669,
										431675
									],
									[
										431840,
										431846
									],
									[
										432222,
										432228
									],
									[
										432409,
										432415
									],
									[
										432623,
										432629
									],
									[
										432906,
										432912
									],
									[
										432928,
										432934
									],
									[
										432983,
										432989
									],
									[
										433037,
										433043
									],
									[
										433220,
										433226
									],
									[
										433503,
										433509
									],
									[
										433525,
										433531
									],
									[
										433580,
										433586
									],
									[
										433629,
										433635
									],
									[
										433683,
										433689
									],
									[
										433951,
										433957
									],
									[
										433973,
										433979
									],
									[
										434028,
										434034
									],
									[
										434077,
										434083
									],
									[
										434131,
										434137
									],
									[
										434277,
										434283
									],
									[
										434515,
										434521
									],
									[
										434537,
										434543
									],
									[
										434592,
										434598
									],
									[
										434641,
										434647
									],
									[
										434695,
										434701
									],
									[
										434752,
										434758
									],
									[
										435005,
										435011
									],
									[
										435027,
										435033
									],
									[
										435082,
										435088
									],
									[
										435131,
										435137
									],
									[
										435185,
										435191
									],
									[
										435387,
										435393
									],
									[
										435409,
										435415
									],
									[
										435464,
										435470
									],
									[
										435513,
										435519
									],
									[
										435567,
										435573
									],
									[
										435769,
										435775
									],
									[
										435791,
										435797
									],
									[
										435846,
										435852
									],
									[
										435895,
										435901
									],
									[
										435949,
										435955
									],
									[
										436067,
										436073
									],
									[
										436133,
										436139
									],
									[
										436392,
										436398
									],
									[
										436658,
										436664
									],
									[
										436861,
										436867
									],
									[
										437015,
										437021
									],
									[
										437187,
										437193
									],
									[
										437454,
										437460
									],
									[
										437664,
										437670
									],
									[
										437884,
										437890
									],
									[
										438084,
										438090
									],
									[
										438284,
										438290
									],
									[
										438526,
										438532
									],
									[
										438780,
										438786
									],
									[
										438802,
										438808
									],
									[
										438857,
										438863
									],
									[
										438906,
										438912
									],
									[
										438960,
										438966
									],
									[
										439260,
										439266
									],
									[
										439544,
										439550
									],
									[
										439850,
										439856
									],
									[
										440134,
										440140
									],
									[
										440457,
										440463
									],
									[
										440741,
										440747
									],
									[
										441011,
										441017
									],
									[
										441186,
										441192
									],
									[
										441211,
										441217
									],
									[
										441376,
										441382
									],
									[
										441506,
										441512
									],
									[
										441707,
										441713
									],
									[
										441863,
										441869
									],
									[
										441984,
										441990
									],
									[
										442026,
										442032
									],
									[
										442061,
										442067
									],
									[
										442094,
										442100
									],
									[
										442158,
										442164
									],
									[
										442189,
										442195
									],
									[
										442268,
										442274
									],
									[
										442303,
										442309
									],
									[
										442555,
										442561
									],
									[
										442909,
										442915
									],
									[
										443217,
										443223
									],
									[
										443357,
										443363
									],
									[
										443508,
										443514
									],
									[
										443780,
										443786
									],
									[
										443823,
										443829
									],
									[
										444242,
										444248
									],
									[
										444334,
										444340
									],
									[
										444507,
										444513
									],
									[
										444589,
										444595
									],
									[
										444795,
										444801
									],
									[
										444979,
										444985
									],
									[
										445173,
										445179
									],
									[
										445271,
										445277
									],
									[
										445288,
										445294
									],
									[
										445320,
										445326
									],
									[
										445559,
										445565
									],
									[
										445903,
										445909
									],
									[
										446074,
										446080
									],
									[
										446433,
										446439
									],
									[
										446620,
										446626
									],
									[
										446834,
										446840
									],
									[
										447117,
										447123
									],
									[
										447139,
										447145
									],
									[
										447194,
										447200
									],
									[
										447248,
										447254
									],
									[
										447431,
										447437
									],
									[
										447714,
										447720
									],
									[
										447736,
										447742
									],
									[
										447791,
										447797
									],
									[
										447840,
										447846
									],
									[
										447894,
										447900
									],
									[
										448162,
										448168
									],
									[
										448184,
										448190
									],
									[
										448239,
										448245
									],
									[
										448288,
										448294
									],
									[
										448342,
										448348
									],
									[
										448488,
										448494
									],
									[
										448726,
										448732
									],
									[
										448748,
										448754
									],
									[
										448803,
										448809
									],
									[
										448852,
										448858
									],
									[
										448906,
										448912
									],
									[
										448963,
										448969
									],
									[
										449216,
										449222
									],
									[
										449238,
										449244
									],
									[
										449293,
										449299
									],
									[
										449342,
										449348
									],
									[
										449396,
										449402
									],
									[
										449598,
										449604
									],
									[
										449620,
										449626
									],
									[
										449675,
										449681
									],
									[
										449724,
										449730
									],
									[
										449778,
										449784
									],
									[
										449980,
										449986
									],
									[
										450002,
										450008
									],
									[
										450057,
										450063
									],
									[
										450106,
										450112
									],
									[
										450160,
										450166
									],
									[
										450278,
										450284
									],
									[
										450344,
										450350
									],
									[
										450603,
										450609
									],
									[
										450869,
										450875
									],
									[
										451072,
										451078
									],
									[
										451226,
										451232
									],
									[
										451398,
										451404
									],
									[
										451665,
										451671
									],
									[
										451875,
										451881
									],
									[
										452095,
										452101
									],
									[
										452295,
										452301
									],
									[
										452495,
										452501
									],
									[
										452737,
										452743
									],
									[
										452991,
										452997
									],
									[
										453013,
										453019
									],
									[
										453068,
										453074
									],
									[
										453117,
										453123
									],
									[
										453171,
										453177
									],
									[
										453453,
										453459
									],
									[
										453697,
										453703
									],
									[
										453856,
										453862
									],
									[
										453967,
										453973
									],
									[
										454039,
										454045
									],
									[
										454101,
										454107
									],
									[
										454123,
										454129
									],
									[
										454133,
										454139
									],
									[
										454153,
										454159
									],
									[
										454396,
										454402
									],
									[
										454596,
										454602
									],
									[
										454605,
										454611
									],
									[
										454813,
										454819
									],
									[
										454942,
										454948
									],
									[
										454994,
										455000
									],
									[
										455054,
										455060
									],
									[
										455215,
										455221
									],
									[
										455234,
										455240
									],
									[
										455374,
										455380
									],
									[
										455595,
										455601
									],
									[
										455826,
										455832
									],
									[
										455853,
										455859
									],
									[
										455959,
										455965
									],
									[
										456033,
										456039
									],
									[
										456189,
										456195
									],
									[
										456507,
										456513
									],
									[
										456634,
										456640
									],
									[
										456756,
										456762
									],
									[
										457054,
										457060
									],
									[
										457397,
										457403
									],
									[
										457438,
										457444
									],
									[
										457483,
										457489
									],
									[
										457956,
										457962
									],
									[
										458004,
										458010
									],
									[
										458102,
										458108
									],
									[
										458640,
										458646
									],
									[
										458891,
										458897
									],
									[
										459048,
										459054
									],
									[
										459782,
										459788
									],
									[
										459791,
										459797
									],
									[
										460174,
										460180
									],
									[
										460250,
										460256
									],
									[
										460280,
										460286
									],
									[
										460318,
										460324
									],
									[
										460595,
										460601
									],
									[
										460620,
										460626
									],
									[
										460662,
										460668
									],
									[
										460704,
										460710
									],
									[
										460716,
										460722
									],
									[
										460729,
										460735
									],
									[
										460806,
										460812
									],
									[
										461085,
										461091
									],
									[
										461257,
										461263
									],
									[
										461321,
										461327
									],
									[
										461355,
										461361
									],
									[
										461561,
										461567
									],
									[
										461639,
										461645
									],
									[
										461821,
										461827
									],
									[
										461905,
										461911
									],
									[
										461940,
										461946
									],
									[
										462048,
										462054
									],
									[
										462270,
										462276
									],
									[
										462288,
										462294
									],
									[
										462406,
										462412
									],
									[
										462424,
										462430
									],
									[
										462654,
										462660
									],
									[
										462805,
										462811
									],
									[
										462823,
										462829
									],
									[
										462952,
										462958
									],
									[
										462989,
										462995
									],
									[
										462998,
										463004
									],
									[
										463083,
										463089
									],
									[
										463145,
										463151
									],
									[
										463208,
										463214
									],
									[
										463276,
										463282
									],
									[
										463433,
										463439
									],
									[
										463468,
										463474
									],
									[
										463545,
										463551
									],
									[
										463621,
										463627
									],
									[
										463678,
										463684
									],
									[
										463740,
										463746
									],
									[
										463796,
										463802
									],
									[
										463809,
										463815
									],
									[
										463897,
										463903
									],
									[
										464008,
										464014
									],
									[
										464040,
										464046
									],
									[
										464096,
										464102
									],
									[
										464175,
										464181
									],
									[
										464293,
										464299
									],
									[
										464407,
										464413
									],
									[
										464511,
										464517
									],
									[
										464785,
										464791
									],
									[
										464978,
										464984
									],
									[
										465156,
										465162
									],
									[
										465379,
										465385
									],
									[
										465396,
										465402
									],
									[
										465664,
										465670
									],
									[
										465717,
										465723
									],
									[
										465988,
										465994
									],
									[
										466056,
										466062
									],
									[
										466201,
										466207
									],
									[
										466419,
										466425
									],
									[
										466437,
										466443
									],
									[
										466551,
										466557
									],
									[
										466607,
										466613
									],
									[
										466719,
										466725
									],
									[
										466886,
										466892
									],
									[
										467035,
										467041
									],
									[
										467254,
										467260
									],
									[
										467347,
										467353
									],
									[
										467469,
										467475
									],
									[
										467643,
										467649
									],
									[
										467805,
										467811
									],
									[
										467845,
										467851
									],
									[
										467958,
										467964
									],
									[
										468007,
										468013
									],
									[
										468191,
										468197
									],
									[
										468235,
										468241
									],
									[
										468489,
										468495
									],
									[
										468764,
										468770
									],
									[
										468798,
										468804
									],
									[
										469176,
										469182
									],
									[
										469364,
										469370
									],
									[
										469591,
										469597
									],
									[
										469637,
										469643
									],
									[
										469838,
										469844
									],
									[
										469869,
										469875
									],
									[
										470064,
										470070
									],
									[
										470127,
										470133
									],
									[
										470183,
										470189
									],
									[
										470202,
										470208
									],
									[
										470417,
										470423
									],
									[
										470575,
										470581
									],
									[
										470665,
										470671
									],
									[
										470848,
										470854
									],
									[
										471145,
										471151
									],
									[
										471413,
										471419
									],
									[
										471665,
										471671
									],
									[
										471839,
										471845
									],
									[
										471883,
										471889
									],
									[
										471993,
										471999
									],
									[
										472164,
										472170
									],
									[
										472181,
										472187
									],
									[
										472214,
										472220
									],
									[
										472228,
										472234
									],
									[
										472260,
										472266
									],
									[
										472272,
										472278
									],
									[
										472293,
										472299
									],
									[
										472331,
										472337
									],
									[
										472464,
										472470
									],
									[
										472494,
										472500
									],
									[
										472599,
										472605
									],
									[
										472685,
										472691
									],
									[
										472799,
										472805
									],
									[
										472938,
										472944
									],
									[
										473082,
										473088
									],
									[
										473152,
										473158
									],
									[
										473230,
										473236
									],
									[
										473343,
										473349
									],
									[
										473467,
										473473
									],
									[
										473627,
										473633
									],
									[
										473812,
										473818
									],
									[
										473982,
										473988
									],
									[
										474014,
										474020
									],
									[
										474175,
										474181
									],
									[
										474196,
										474202
									],
									[
										474378,
										474384
									],
									[
										474534,
										474540
									],
									[
										474645,
										474651
									],
									[
										474738,
										474744
									],
									[
										474769,
										474775
									],
									[
										475012,
										475018
									],
									[
										475205,
										475211
									],
									[
										475245,
										475251
									],
									[
										475454,
										475460
									],
									[
										475484,
										475490
									],
									[
										475825,
										475831
									],
									[
										476025,
										476031
									],
									[
										476091,
										476097
									],
									[
										476401,
										476407
									],
									[
										476817,
										476823
									],
									[
										477090,
										477096
									],
									[
										477202,
										477208
									],
									[
										477297,
										477303
									],
									[
										477390,
										477396
									],
									[
										477428,
										477434
									],
									[
										477544,
										477550
									],
									[
										477724,
										477730
									],
									[
										477813,
										477819
									],
									[
										477940,
										477946
									],
									[
										478099,
										478105
									],
									[
										478314,
										478320
									],
									[
										478378,
										478384
									],
									[
										478452,
										478458
									],
									[
										478501,
										478507
									],
									[
										478673,
										478679
									],
									[
										478714,
										478720
									],
									[
										478755,
										478761
									],
									[
										478919,
										478925
									],
									[
										479170,
										479176
									],
									[
										479350,
										479356
									],
									[
										479368,
										479374
									],
									[
										479417,
										479423
									],
									[
										479544,
										479550
									],
									[
										479697,
										479703
									],
									[
										479741,
										479747
									],
									[
										479976,
										479982
									],
									[
										480223,
										480229
									],
									[
										480340,
										480346
									],
									[
										480488,
										480494
									],
									[
										480569,
										480575
									],
									[
										480767,
										480773
									],
									[
										480923,
										480929
									],
									[
										481174,
										481180
									],
									[
										481384,
										481390
									],
									[
										481600,
										481606
									],
									[
										481867,
										481873
									],
									[
										482100,
										482106
									],
									[
										482212,
										482218
									],
									[
										482383,
										482389
									],
									[
										482505,
										482511
									],
									[
										482638,
										482644
									],
									[
										482690,
										482696
									],
									[
										482780,
										482786
									],
									[
										482815,
										482821
									],
									[
										482958,
										482964
									],
									[
										483115,
										483121
									],
									[
										483240,
										483246
									],
									[
										483356,
										483362
									],
									[
										483447,
										483453
									],
									[
										483545,
										483551
									],
									[
										483624,
										483630
									],
									[
										483701,
										483707
									],
									[
										483908,
										483914
									],
									[
										484026,
										484032
									],
									[
										484180,
										484186
									],
									[
										484336,
										484342
									],
									[
										484497,
										484503
									],
									[
										484637,
										484643
									],
									[
										484685,
										484691
									],
									[
										484767,
										484773
									],
									[
										484868,
										484874
									],
									[
										484940,
										484946
									],
									[
										485070,
										485076
									],
									[
										485343,
										485349
									],
									[
										485356,
										485362
									],
									[
										485464,
										485470
									],
									[
										485530,
										485536
									],
									[
										485565,
										485571
									],
									[
										485619,
										485625
									],
									[
										485676,
										485682
									],
									[
										485730,
										485736
									],
									[
										485786,
										485792
									],
									[
										485837,
										485843
									],
									[
										485935,
										485941
									],
									[
										485996,
										486002
									],
									[
										486071,
										486077
									],
									[
										486131,
										486137
									],
									[
										486223,
										486229
									],
									[
										486408,
										486414
									],
									[
										486624,
										486630
									],
									[
										486744,
										486750
									],
									[
										486977,
										486983
									],
									[
										487106,
										487112
									],
									[
										487238,
										487244
									],
									[
										487370,
										487376
									],
									[
										487523,
										487529
									],
									[
										487715,
										487721
									],
									[
										490758,
										490764
									],
									[
										490813,
										490819
									],
									[
										490877,
										490883
									],
									[
										493581,
										493587
									],
									[
										493654,
										493660
									],
									[
										493724,
										493730
									],
									[
										494064,
										494070
									],
									[
										494137,
										494143
									],
									[
										494207,
										494213
									],
									[
										495437,
										495443
									],
									[
										496874,
										496880
									],
									[
										497160,
										497166
									],
									[
										497290,
										497296
									],
									[
										497400,
										497406
									],
									[
										497433,
										497439
									],
									[
										497689,
										497695
									],
									[
										497814,
										497820
									],
									[
										498092,
										498098
									],
									[
										498355,
										498361
									],
									[
										498640,
										498646
									],
									[
										498906,
										498912
									],
									[
										499165,
										499171
									],
									[
										499405,
										499411
									],
									[
										499732,
										499738
									],
									[
										499842,
										499848
									],
									[
										500002,
										500008
									],
									[
										500179,
										500185
									],
									[
										500240,
										500246
									],
									[
										500298,
										500304
									],
									[
										500312,
										500318
									],
									[
										500920,
										500926
									],
									[
										501501,
										501507
									],
									[
										501681,
										501687
									],
									[
										503091,
										503097
									],
									[
										503443,
										503449
									],
									[
										503621,
										503627
									],
									[
										503948,
										503954
									],
									[
										504253,
										504259
									],
									[
										504315,
										504321
									],
									[
										504560,
										504566
									],
									[
										504883,
										504889
									],
									[
										505104,
										505110
									],
									[
										505389,
										505395
									],
									[
										505655,
										505661
									],
									[
										505914,
										505920
									],
									[
										506154,
										506160
									],
									[
										506457,
										506463
									],
									[
										506567,
										506573
									],
									[
										506750,
										506756
									],
									[
										506811,
										506817
									],
									[
										506869,
										506875
									],
									[
										506883,
										506889
									],
									[
										507010,
										507016
									],
									[
										507098,
										507104
									],
									[
										507341,
										507347
									],
									[
										507401,
										507407
									],
									[
										507469,
										507475
									],
									[
										507558,
										507564
									],
									[
										507642,
										507648
									],
									[
										507701,
										507707
									],
									[
										507773,
										507779
									],
									[
										507872,
										507878
									],
									[
										507963,
										507969
									],
									[
										508190,
										508196
									],
									[
										508283,
										508289
									],
									[
										508478,
										508484
									],
									[
										508713,
										508719
									],
									[
										508837,
										508843
									],
									[
										509069,
										509075
									],
									[
										509300,
										509306
									],
									[
										509391,
										509397
									],
									[
										509609,
										509615
									],
									[
										509765,
										509771
									],
									[
										509970,
										509976
									],
									[
										510149,
										510155
									],
									[
										510303,
										510309
									],
									[
										510481,
										510487
									],
									[
										510641,
										510647
									],
									[
										510913,
										510919
									],
									[
										510937,
										510943
									],
									[
										511062,
										511068
									],
									[
										511305,
										511311
									],
									[
										511526,
										511532
									],
									[
										512122,
										512128
									],
									[
										512148,
										512154
									],
									[
										512254,
										512260
									],
									[
										512440,
										512446
									],
									[
										512616,
										512622
									],
									[
										512639,
										512645
									],
									[
										512904,
										512910
									],
									[
										513277,
										513283
									],
									[
										513292,
										513298
									],
									[
										513367,
										513373
									],
									[
										513389,
										513395
									],
									[
										513403,
										513409
									],
									[
										513539,
										513545
									],
									[
										513668,
										513674
									],
									[
										513690,
										513696
									],
									[
										513936,
										513942
									],
									[
										513958,
										513964
									],
									[
										514216,
										514222
									],
									[
										514365,
										514371
									],
									[
										514395,
										514401
									],
									[
										514423,
										514429
									],
									[
										514600,
										514606
									],
									[
										514935,
										514941
									],
									[
										515119,
										515125
									],
									[
										515142,
										515148
									],
									[
										515160,
										515166
									],
									[
										515247,
										515253
									],
									[
										515364,
										515370
									],
									[
										515455,
										515461
									],
									[
										515547,
										515553
									],
									[
										515642,
										515648
									],
									[
										515740,
										515746
									],
									[
										515921,
										515927
									],
									[
										516011,
										516017
									],
									[
										516144,
										516150
									],
									[
										516246,
										516252
									],
									[
										516287,
										516293
									],
									[
										516438,
										516444
									],
									[
										516600,
										516606
									],
									[
										516741,
										516747
									],
									[
										516877,
										516883
									],
									[
										516993,
										516999
									],
									[
										517083,
										517089
									],
									[
										517216,
										517222
									],
									[
										517318,
										517324
									],
									[
										517359,
										517365
									],
									[
										517491,
										517497
									],
									[
										517641,
										517647
									],
									[
										517782,
										517788
									],
									[
										517921,
										517927
									],
									[
										518114,
										518120
									],
									[
										518309,
										518315
									],
									[
										518327,
										518333
									],
									[
										518417,
										518423
									],
									[
										518578,
										518584
									],
									[
										518729,
										518735
									],
									[
										518858,
										518864
									],
									[
										518943,
										518949
									],
									[
										519029,
										519035
									],
									[
										519118,
										519124
									],
									[
										519210,
										519216
									],
									[
										549085,
										549091
									],
									[
										558415,
										558421
									],
									[
										628374,
										628380
									],
									[
										630431,
										630437
									],
									[
										633346,
										633352
									],
									[
										633496,
										633502
									],
									[
										633567,
										633573
									],
									[
										633706,
										633712
									],
									[
										634304,
										634310
									],
									[
										646286,
										646292
									],
									[
										646352,
										646358
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 19375.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Users/ssr0304/Downloads/demo2/node_modules/express/lib/express.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1487,
						"regions":
						{
						},
						"selection":
						[
							[
								1247,
								1247
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1518.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "MyMeanProject.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 296.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
